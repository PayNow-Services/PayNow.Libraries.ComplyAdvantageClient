name: Generate and Publish API Client
on:
  push:
    branches: ['main']
  schedule:
    - cron: '0 0 * * TUE'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          fetch-depth: 0  # Need full history for version calculation

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Generate API client with Kiota
        id: generate_client
        run: |
          dotnet tool install --global Microsoft.OpenApi.Kiota
          export PATH="$PATH:/home/runner/.dotnet/tools"
          cd src/PayNow.Libraries.ComplyAdvantageClient
          
          # Download the latest OpenAPI spec
          curl -o openapi.json https://docs.mesh.complyadvantage.com/openapi/mesh-api.json
          
          # Generate new client and capture output
          KIOTA_OUTPUT=$(kiota generate -d openapi.json --language csharp -o . --exclude-path '**/iam/**' -n PayNow.Libraries.ComplyAdvantageClient -c ComplyAdvantageApiClient 2>&1)
          KIOTA_EXIT_CODE=$?
          
          echo "Kiota output: $KIOTA_OUTPUT"
          echo "Kiota exit code: $KIOTA_EXIT_CODE"
          
          # Check if Kiota skipped generation due to no changes
          if echo "$KIOTA_OUTPUT" | grep -q "Generation skipped as no changes were detected"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes detected by Kiota - skipping build and publish"
          elif [ $KIOTA_EXIT_CODE -eq 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Kiota generated new client successfully"
          else
            echo "‚ùå Kiota generation failed with exit code $KIOTA_EXIT_CODE"
            exit 1
          fi

      - name: Calculate version
        id: version
        if: steps.generate_client.outputs.has_changes == 'true'
        run: |
          # Get current version from csproj or use default
          cd src/PayNow.Libraries.ComplyAdvantageClient
          
          # Extract current version from .csproj
          CURRENT_VERSION=$(grep '<Version>' *.csproj | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/' || echo "1.0.0")
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update project version
        if: steps.generate_client.outputs.has_changes == 'true'
        run: |
          cd src/PayNow.Libraries.ComplyAdvantageClient
          
          # Update version in .csproj
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.version.outputs.new_version }}<\/Version>/" *.csproj
          sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ steps.version.outputs.new_version }}<\/AssemblyVersion>/" *.csproj
          sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ steps.version.outputs.new_version }}<\/FileVersion>/" *.csproj
          
          # If no Version tag exists, add it
          if ! grep -q '<Version>' *.csproj; then
            sed -i '/<PropertyGroup>/a \    <Version>${{ steps.version.outputs.new_version }}</Version>' *.csproj
          fi

      - name: Build project
        if: steps.generate_client.outputs.has_changes == 'true'
        run: |
          cd src/PayNow.Libraries.ComplyAdvantageClient
          dotnet restore
          dotnet build --configuration Release

      - name: Run tests
        if: steps.generate_client.outputs.has_changes == 'true'
        continue-on-error: true  # Don't fail if no tests exist
        run: |
          cd src/PayNow.Libraries.ComplyAdvantageClient
          dotnet test --configuration Release --no-build || true

      - name: Pack NuGet package
        if: steps.generate_client.outputs.has_changes == 'true'
        run: |
          cd src/PayNow.Libraries.ComplyAdvantageClient
          dotnet pack --configuration Release --no-build --output ./nupkg
          
          # Display package info
          ls -la ./nupkg/

      - name: Push to GitHub Packages
        if: steps.generate_client.outputs.has_changes == 'true'
        run: |
          cd src/PayNow.Libraries.ComplyAdvantageClient
          
          # Push to GitHub Packages
          dotnet nuget push ./nupkg/*.nupkg \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --skip-duplicate
          
          echo "‚úÖ Package published to GitHub Packages"
          echo "üì¶ Version: ${{ steps.version.outputs.new_version }}"
          echo "üîó URL: https://github.com/${{ github.repository }}/packages"

      - name: Commit version changes
        if: steps.generate_client.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Update API client to version ${{ steps.version.outputs.new_version }}" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Create GitHub Release
        if: steps.generate_client.outputs.has_changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ## API Client Update - v${{ steps.version.outputs.new_version }}
            
            ### üìã Changes
            - Updated ComplyAdvantage API client from OpenAPI specification
            - Previous version: ${{ steps.version.outputs.current_version }}
            - New version: ${{ steps.version.outputs.new_version }}
            
            ### üì¶ Package Location
            - GitHub Packages: [View Package](https://github.com/${{ github.repository }}/packages)
            
            ### üíª Installation
            
            1. Add GitHub Packages source to your NuGet config:
            ```bash
            dotnet add package PayNow.Libraries.ComplyAdvantageClient --version ${{ steps.version.outputs.new_version }}
            ```
            
            ### üîó Source
            Generated from: https://docs.mesh.complyadvantage.com/openapi/65d331cf63f13e003243dd79
          files: |
            src/PayNow.Libraries.ComplyAdvantageClient/nupkg/*.nupkg
          draft: false
          prerelease: false

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.generate_client.outputs.has_changes }}" == "true" ]; then
            echo "## üì¶ Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Previous Version:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Package:** PayNow.Libraries.ComplyAdvantageClient" >> $GITHUB_STEP_SUMMARY
            echo "- **Registry:** GitHub Packages" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### View Package" >> $GITHUB_STEP_SUMMARY
            echo "[Open in GitHub Packages](https://github.com/${{ github.repository }}/packages)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ÑπÔ∏è No Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Kiota detected no changes in the API specification." >> $GITHUB_STEP_SUMMARY
            echo "No new package version was published." >> $GITHUB_STEP_SUMMARY
          fi
