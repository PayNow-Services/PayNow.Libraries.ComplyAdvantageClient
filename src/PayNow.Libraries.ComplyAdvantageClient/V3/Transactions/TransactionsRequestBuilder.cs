// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PayNow.Libraries.ComplyAdvantageClient.Models;
using PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.External;
using PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Item;
using PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Process;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.V3.Transactions
{
    /// <summary>
    /// Builds and executes requests for operations under \v3\transactions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TransactionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The external property</summary>
        public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.External.ExternalRequestBuilder External
        {
            get => new global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.External.ExternalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The process property</summary>
        public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Process.ProcessRequestBuilder Process
        {
            get => new global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Process.ProcessRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the PayNow.Libraries.ComplyAdvantageClient.v3.transactions.item collection</summary>
        /// <param name="position">Our identifier for the transaction.</param>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Item.WithIdentifierItemRequestBuilder"/></returns>
        public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Item.WithIdentifierItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("identifier", position);
                return new global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Item.WithIdentifierItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the PayNow.Libraries.ComplyAdvantageClient.v3.transactions.item collection</summary>
        /// <param name="position">Our identifier for the transaction.</param>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Item.WithIdentifierItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Item.WithIdentifierItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("identifier", position);
                return new global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.Item.WithIdentifierItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TransactionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v3/transactions{?base_value%2Eamount_from*,base_value%2Eamount_to*,base_value%2Ecurrency*,customer%2Eidentifier*,direction*,evaluation_outcome*,occurred_at_from*,occurred_at_to*,page_number*,page_size*,received_at_from*,received_at_to*,review_decision*,search*,sort*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TransactionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v3/transactions{?base_value%2Eamount_from*,base_value%2Eamount_to*,base_value%2Ecurrency*,customer%2Eidentifier*,direction*,evaluation_outcome*,occurred_at_from*,occurred_at_to*,page_number*,page_size*,received_at_from*,received_at_to*,review_decision*,search*,sort*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all transactions in an account with the ability to search, sort and filter.You need the &quot;View Transactions&quot; permission to use this endpoint.Additionally, you need either &quot;Access to base transaction monitoring functionality&quot; and/or &quot;Access to base payment screening functionality&quot; to use this endpoint. 
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.PaginatedResponseTransactionV3"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.PaginatedResponseTransactionV3?> GetAsync(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.PaginatedResponseTransactionV3> GetAsync(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::PayNow.Libraries.ComplyAdvantageClient.Models.PaginatedResponseTransactionV3>(requestInfo, global::PayNow.Libraries.ComplyAdvantageClient.Models.PaginatedResponseTransactionV3.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all transactions in an account with the ability to search, sort and filter.You need the &quot;View Transactions&quot; permission to use this endpoint.Additionally, you need either &quot;Access to base transaction monitoring functionality&quot; and/or &quot;Access to base payment screening functionality&quot; to use this endpoint. 
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all transactions in an account with the ability to search, sort and filter.You need the &quot;View Transactions&quot; permission to use this endpoint.Additionally, you need either &quot;Access to base transaction monitoring functionality&quot; and/or &quot;Access to base payment screening functionality&quot; to use this endpoint. 
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TransactionsRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter by minimum base amount (inclusive).</summary>
            [QueryParameter("base_value%2Eamount_from")]
            public double? BaseValueAmountFrom { get; set; }
            /// <summary>Filter by maximum base amount (inclusive).</summary>
            [QueryParameter("base_value%2Eamount_to")]
            public double? BaseValueAmountTo { get; set; }
            /// <summary>Filter by currency code (ISO 4217).</summary>
            [Obsolete("This property is deprecated, use BaseValueCurrencyAsGetBaseValueCurrencyQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("base_value%2Ecurrency")]
            public string[]? BaseValueCurrency { get; set; }
#nullable restore
#else
            [QueryParameter("base_value%2Ecurrency")]
            public string[] BaseValueCurrency { get; set; }
#endif
            /// <summary>Filter by currency code (ISO 4217).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("base_value%2Ecurrency")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetBase_valueCurrencyQueryParameterType[]? BaseValueCurrencyAsGetBaseValueCurrencyQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("base_value%2Ecurrency")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetBase_valueCurrencyQueryParameterType[] BaseValueCurrencyAsGetBaseValueCurrencyQueryParameterType { get; set; }
#endif
            /// <summary>Search for a full match using the identifier of the customer associated with the transaction.</summary>
            [QueryParameter("customer%2Eidentifier")]
            public Guid? CustomerIdentifier { get; set; }
            /// <summary>Filter by transaction direction.</summary>
            [Obsolete("This property is deprecated, use DirectionAsGetDirectionQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("direction")]
            public string[]? Direction { get; set; }
#nullable restore
#else
            [QueryParameter("direction")]
            public string[] Direction { get; set; }
#endif
            /// <summary>Filter by transaction direction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("direction")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetDirectionQueryParameterType[]? DirectionAsGetDirectionQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("direction")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetDirectionQueryParameterType[] DirectionAsGetDirectionQueryParameterType { get; set; }
#endif
            /// <summary>Filter by transaction evaluation outcome.</summary>
            [Obsolete("This property is deprecated, use EvaluationOutcomeAsGetEvaluationOutcomeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("evaluation_outcome")]
            public string[]? EvaluationOutcome { get; set; }
#nullable restore
#else
            [QueryParameter("evaluation_outcome")]
            public string[] EvaluationOutcome { get; set; }
#endif
            /// <summary>Filter by transaction evaluation outcome.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("evaluation_outcome")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetEvaluation_outcomeQueryParameterType[]? EvaluationOutcomeAsGetEvaluationOutcomeQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("evaluation_outcome")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetEvaluation_outcomeQueryParameterType[] EvaluationOutcomeAsGetEvaluationOutcomeQueryParameterType { get; set; }
#endif
            /// <summary>Filter by minimum occurred date/time (inclusive). ISO 8601 format.</summary>
            [QueryParameter("occurred_at_from")]
            public DateTimeOffset? OccurredAtFrom { get; set; }
            /// <summary>Filter by maximum occurred date/time (inclusive). ISO 8601 format.</summary>
            [QueryParameter("occurred_at_to")]
            public DateTimeOffset? OccurredAtTo { get; set; }
            /// <summary>One-based page index (1..N)</summary>
            [QueryParameter("page_number")]
            public int? PageNumber { get; set; }
            /// <summary>The size of the page to be returned</summary>
            [QueryParameter("page_size")]
            public int? PageSize { get; set; }
            /// <summary>Filter by minimum received date/time (inclusive). ISO 8601 format.</summary>
            [QueryParameter("received_at_from")]
            public DateTimeOffset? ReceivedAtFrom { get; set; }
            /// <summary>Filter by maximum received date/time (inclusive). ISO 8601 format.</summary>
            [QueryParameter("received_at_to")]
            public DateTimeOffset? ReceivedAtTo { get; set; }
            /// <summary>Filter by transaction review decision.</summary>
            [Obsolete("This property is deprecated, use ReviewDecisionAsGetReviewDecisionQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("review_decision")]
            public string[]? ReviewDecision { get; set; }
#nullable restore
#else
            [QueryParameter("review_decision")]
            public string[] ReviewDecision { get; set; }
#endif
            /// <summary>Filter by transaction review decision.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("review_decision")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetReview_decisionQueryParameterType[]? ReviewDecisionAsGetReviewDecisionQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("review_decision")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetReview_decisionQueryParameterType[] ReviewDecisionAsGetReviewDecisionQueryParameterType { get; set; }
#endif
            /// <summary>Search for a transaction using your transaction identifier. Partial Match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            /// <summary>Sorting criteria. Allowed fields: `occurred_at`, `received_at` (default), `base_value.amount`, `base_value.currency`, `direction`. Each criterion should be a string in the format: `property_name` for ascending order, or `-property_name` for descending order. For example, to sort by occurred date descending: `-occurred_at`. Multiple sort criteria are supported. Provide each as a separate &apos;sort&apos; query parameter (e.g., `?sort=-occurred_at&amp;sort=base_value.amount`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string[]? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string[] Sort { get; set; }
#endif
            /// <summary>Filter by transaction type.</summary>
            [Obsolete("This property is deprecated, use TypeAsGetTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string[]? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string[] Type { get; set; }
#endif
            /// <summary>Filter by transaction type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetTypeQueryParameterType[]? TypeAsGetTypeQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.GetTypeQueryParameterType[] TypeAsGetTypeQueryParameterType { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TransactionsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V3.Transactions.TransactionsRequestBuilder.TransactionsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
