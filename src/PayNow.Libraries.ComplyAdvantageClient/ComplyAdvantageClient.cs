//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace MyNamespace
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Create an access token
        /// </summary>
        /// <remarks>
        /// Mesh is authenticated via OAuth2. An initial request must be made to collect the token. This token can then be used to authenticate all requests for the following 24 hours, after which the token must be refreshed.
        /// <br/>
        /// <br/>The username and password should be one of the users already created in your account. We recommend creating a dedicated API user for your integration.  The value `realm` is provided by ComplyAdvantage.
        /// <br/>
        /// <br/>The access token returned by the initial request can then be used within the authorization header.
        /// <br/>
        /// <br/>```
        /// <br/>"Authorization":"Bearer {access_token}"
        /// <br/>```
        /// <br/>
        /// <br/>The bearer token has a validity period of 24 hours (86,400 seconds), after which any authentication attempts will fail.  To refresh a token, use the same method as that used to generate it.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenCreateResponseData> CreateTokenAsync(TokenCreateRequestBody body)
        {
            return CreateTokenAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an access token
        /// </summary>
        /// <remarks>
        /// Mesh is authenticated via OAuth2. An initial request must be made to collect the token. This token can then be used to authenticate all requests for the following 24 hours, after which the token must be refreshed.
        /// <br/>
        /// <br/>The username and password should be one of the users already created in your account. We recommend creating a dedicated API user for your integration.  The value `realm` is provided by ComplyAdvantage.
        /// <br/>
        /// <br/>The access token returned by the initial request can then be used within the authorization header.
        /// <br/>
        /// <br/>```
        /// <br/>"Authorization":"Bearer {access_token}"
        /// <br/>```
        /// <br/>
        /// <br/>The bearer token has a validity period of 24 hours (86,400 seconds), after which any authentication attempts will fail.  To refresh a token, use the same method as that used to generate it.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenCreateResponseData> CreateTokenAsync(TokenCreateRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/token"
                    urlBuilder_.Append("v2/token");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenCreateResponseData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create and Screen a Customer asynchronously
        /// </summary>
        /// <remarks>
        /// This endpoint initiates the 'create and screen' workflow for your customer in **asynchronous mode**. The workflow consists of five steps:
        /// <br/>1. **Customer Record Creation:** The Customer Record is created in Mesh.
        /// <br/>2. **Risk Scoring:** An initial Risk Score is calculated for the Customer.
        /// <br/>3. **Customer Screening:** The Customer is screened using settings based on the Calculated Risk Score.
        /// <br/>4. **Alerts:** Alerts associated with the screened customer are generated based on the risk analysis.
        /// <br/>5. **Case Creation:** Create cases based on the result of customer screening and alerts, for an analyst to review.
        /// <br/>
        /// <br/>Each customer must have a unique customer external identifier specified as part of the request. This identifier is used to find the customer within Mesh and link back to your own internal systems.
        /// <br/>
        /// <br/>The customer can be one of: `PERSON`, `COMPANY` or `UNDEFINED` and can optionally have multiple `products`.
        /// <br/>
        /// <br/>Following risk scoring, the customer will be screened using ComplyAdvantage's AML database.  You can specify the screening profile used for initial screening and subsequent ongoing monitoring within the `configuration` object.  The value for `screening_profile_identifier` can be found in the settings section of the Mesh application.
        /// <br/>
        /// <br/>The workflow will execute asynchronously. The initial POST returns a 'workflow-instance-identifier' and you can be notified of completion by:
        /// <br/>
        /// <br/>* either polling the GET `/workflows/` endpoint with the `workflow_identifier` returned when starting the workflow
        /// <br/>
        /// <br/>* or, setting up a `WORKFLOW_COMPLETED` webhook that will fire when your workflow completes.
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and screen customers" and "Access to base customer screening functionality" permissions to use this endpoint.
        /// </remarks>
        /// <returns>Workflow executed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ol_AsyncWorkflowResponse> OrchestrationLayerAPIPostV2WorkflowsAsync(Ol_CreateAndScreenCustomerRequest body)
        {
            return OrchestrationLayerAPIPostV2WorkflowsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create and Screen a Customer asynchronously
        /// </summary>
        /// <remarks>
        /// This endpoint initiates the 'create and screen' workflow for your customer in **asynchronous mode**. The workflow consists of five steps:
        /// <br/>1. **Customer Record Creation:** The Customer Record is created in Mesh.
        /// <br/>2. **Risk Scoring:** An initial Risk Score is calculated for the Customer.
        /// <br/>3. **Customer Screening:** The Customer is screened using settings based on the Calculated Risk Score.
        /// <br/>4. **Alerts:** Alerts associated with the screened customer are generated based on the risk analysis.
        /// <br/>5. **Case Creation:** Create cases based on the result of customer screening and alerts, for an analyst to review.
        /// <br/>
        /// <br/>Each customer must have a unique customer external identifier specified as part of the request. This identifier is used to find the customer within Mesh and link back to your own internal systems.
        /// <br/>
        /// <br/>The customer can be one of: `PERSON`, `COMPANY` or `UNDEFINED` and can optionally have multiple `products`.
        /// <br/>
        /// <br/>Following risk scoring, the customer will be screened using ComplyAdvantage's AML database.  You can specify the screening profile used for initial screening and subsequent ongoing monitoring within the `configuration` object.  The value for `screening_profile_identifier` can be found in the settings section of the Mesh application.
        /// <br/>
        /// <br/>The workflow will execute asynchronously. The initial POST returns a 'workflow-instance-identifier' and you can be notified of completion by:
        /// <br/>
        /// <br/>* either polling the GET `/workflows/` endpoint with the `workflow_identifier` returned when starting the workflow
        /// <br/>
        /// <br/>* or, setting up a `WORKFLOW_COMPLETED` webhook that will fire when your workflow completes.
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and screen customers" and "Access to base customer screening functionality" permissions to use this endpoint.
        /// </remarks>
        /// <returns>Workflow executed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ol_AsyncWorkflowResponse> OrchestrationLayerAPIPostV2WorkflowsAsync(Ol_CreateAndScreenCustomerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/workflows/create-and-screen"
                    urlBuilder_.Append("v2/workflows/create-and-screen");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_AsyncWorkflowResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ol_ProblemDetailErrorResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create and Screen a Customer synchronously
        /// </summary>
        /// <remarks>
        /// This endpoint initiates the 'create and screen' workflow for your customer in **synchronous mode**. The workflow consists of five steps:
        /// <br/>1. **Customer Record Creation:** The Customer Record is created in Mesh.
        /// <br/>2. **Risk Scoring:** An initial Risk Score is calculated for the Customer.
        /// <br/>3. **Customer Screening:** The Customer is screened using settings based on the Calculated Risk Score.
        /// <br/>4. **Alerts:** Alerts associated with the screened customer are generated based on the risk analysis.
        /// <br/>5. **Case Creation:** Create cases based on the result of customer screening and alerts, for an analyst to review.
        /// <br/>
        /// <br/>Each customer must have a unique customer external identifier specified as part of the request. This identifier is used to find the customer within Mesh and link back to your own internal systems.
        /// <br/>
        /// <br/>The customer can be one of: `PERSON`, `COMPANY` or `UNDEFINED` and can optionally have multiple `products`.
        /// <br/>
        /// <br/>Following risk scoring, the customer will be screened using ComplyAdvantage's AML database.  You can specify the screening profile used for initial screening and subsequent ongoing monitoring within the `configuration` object.  The value for `screening_profile_identifier` can be found in the settings section of the Mesh application.
        /// <br/>
        /// <br/>The workflow executes synchronously up to customer screening, returning the workflow status. This end-point is currently idempotent: in case of downstream error you can re-send the exact same request, and the workflow will be retried.
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and screen customers" and "Access to base customer screening functionality" permissions to use this endpoint.
        /// </remarks>
        /// <param name="last_sync_step">Optional stage until which the sync workflow should continue before switching to async</param>
        /// <returns>Sync workflow executed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ol_WorkflowState> OrchestrationLayerAPIPostV2WorkflowsSyncAsync(string last_sync_step, Ol_CreateAndScreenCustomerRequest body)
        {
            return OrchestrationLayerAPIPostV2WorkflowsSyncAsync(last_sync_step, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create and Screen a Customer synchronously
        /// </summary>
        /// <remarks>
        /// This endpoint initiates the 'create and screen' workflow for your customer in **synchronous mode**. The workflow consists of five steps:
        /// <br/>1. **Customer Record Creation:** The Customer Record is created in Mesh.
        /// <br/>2. **Risk Scoring:** An initial Risk Score is calculated for the Customer.
        /// <br/>3. **Customer Screening:** The Customer is screened using settings based on the Calculated Risk Score.
        /// <br/>4. **Alerts:** Alerts associated with the screened customer are generated based on the risk analysis.
        /// <br/>5. **Case Creation:** Create cases based on the result of customer screening and alerts, for an analyst to review.
        /// <br/>
        /// <br/>Each customer must have a unique customer external identifier specified as part of the request. This identifier is used to find the customer within Mesh and link back to your own internal systems.
        /// <br/>
        /// <br/>The customer can be one of: `PERSON`, `COMPANY` or `UNDEFINED` and can optionally have multiple `products`.
        /// <br/>
        /// <br/>Following risk scoring, the customer will be screened using ComplyAdvantage's AML database.  You can specify the screening profile used for initial screening and subsequent ongoing monitoring within the `configuration` object.  The value for `screening_profile_identifier` can be found in the settings section of the Mesh application.
        /// <br/>
        /// <br/>The workflow executes synchronously up to customer screening, returning the workflow status. This end-point is currently idempotent: in case of downstream error you can re-send the exact same request, and the workflow will be retried.
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and screen customers" and "Access to base customer screening functionality" permissions to use this endpoint.
        /// </remarks>
        /// <param name="last_sync_step">Optional stage until which the sync workflow should continue before switching to async</param>
        /// <returns>Sync workflow executed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ol_WorkflowState> OrchestrationLayerAPIPostV2WorkflowsSyncAsync(string last_sync_step, Ol_CreateAndScreenCustomerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/workflows/sync/create-and-screen"
                    urlBuilder_.Append("v2/workflows/sync/create-and-screen");
                    urlBuilder_.Append('?');
                    if (last_sync_step != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_sync_step")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(last_sync_step, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_WorkflowState>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ol_ProblemDetailErrorResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ol_ProblemDetailErrorResponse>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get status and result of onboarding
        /// </summary>
        /// <remarks>
        /// ## Overall workflow status
        /// <br/>
        /// <br/>This endpoint will return the status and eventual end result of the specified workflow.  Once a workflow has been initiated, it can be periodically polled to receive the status using the workflow-instance-identifier provided in the response of the POST `v2/workflows/create-and-screen`  
        /// <br/>
        /// <br/>The response comprises the status of the overall workflow.  One of
        /// <br/>- `NOT-STARTED` - The workflow is queued but has not yet begun
        /// <br/>- `IN-PROGRESS` - The workflow is executing but not yet completed.  The step details should be checked to ascertain progress
        /// <br/>- `COMPLETED` - The workflow has completed execution without errors.  The step details should be checked to ascertain the end results
        /// <br/>- `ERRORED` - The workflow has completed with errors.
        /// <br/>
        /// <br/>In addition to the status, the workflow endpoint returns:
        /// <br/>
        /// <br/>- `steps` - an array of the step keys within the workflow
        /// <br/>- `step_details` - an object containing the status and return values for each of steps within the workflow (see following section)
        /// <br/>
        /// <br/>## Workflow steps
        /// <br/>
        /// <br/>The workflow response contains a `step_details` object, which contains the status and returned values from each step in the workflow. Each step object within the step_details contains a status field that can be one of the following values:
        /// <br/>
        /// <br/>- `NOT-STARTED` - The step has not yet been executed
        /// <br/>- `IN-PROGRESS` - The step is executing
        /// <br/>- `COMPLETED` - The step has completed and the step_output object can be checked for output
        /// <br/>- `SKIPPED` - The step has been skipped because it did not meet the criteria for execution.  In the case of the “create and screen" workflow, this applies to the screening step when the customer risk is prohibited
        /// <br/>- `ERRORED` - The step has completed but returned errors
        /// <br/>
        /// <br/>In addition to the status, the step detail contains:
        /// <br/>
        /// <br/>- `identifier` - a unique identifier for the step
        /// <br/>- `step_output` - an object containing the return values for the step
        /// </remarks>
        /// <returns>Workflow state</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ol_WorkflowState> OrchestrationLayerAPIGetV2WorkflowsIdentifierAsync(System.Guid workflow_instance_identifier)
        {
            return OrchestrationLayerAPIGetV2WorkflowsIdentifierAsync(workflow_instance_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status and result of onboarding
        /// </summary>
        /// <remarks>
        /// ## Overall workflow status
        /// <br/>
        /// <br/>This endpoint will return the status and eventual end result of the specified workflow.  Once a workflow has been initiated, it can be periodically polled to receive the status using the workflow-instance-identifier provided in the response of the POST `v2/workflows/create-and-screen`  
        /// <br/>
        /// <br/>The response comprises the status of the overall workflow.  One of
        /// <br/>- `NOT-STARTED` - The workflow is queued but has not yet begun
        /// <br/>- `IN-PROGRESS` - The workflow is executing but not yet completed.  The step details should be checked to ascertain progress
        /// <br/>- `COMPLETED` - The workflow has completed execution without errors.  The step details should be checked to ascertain the end results
        /// <br/>- `ERRORED` - The workflow has completed with errors.
        /// <br/>
        /// <br/>In addition to the status, the workflow endpoint returns:
        /// <br/>
        /// <br/>- `steps` - an array of the step keys within the workflow
        /// <br/>- `step_details` - an object containing the status and return values for each of steps within the workflow (see following section)
        /// <br/>
        /// <br/>## Workflow steps
        /// <br/>
        /// <br/>The workflow response contains a `step_details` object, which contains the status and returned values from each step in the workflow. Each step object within the step_details contains a status field that can be one of the following values:
        /// <br/>
        /// <br/>- `NOT-STARTED` - The step has not yet been executed
        /// <br/>- `IN-PROGRESS` - The step is executing
        /// <br/>- `COMPLETED` - The step has completed and the step_output object can be checked for output
        /// <br/>- `SKIPPED` - The step has been skipped because it did not meet the criteria for execution.  In the case of the “create and screen" workflow, this applies to the screening step when the customer risk is prohibited
        /// <br/>- `ERRORED` - The step has completed but returned errors
        /// <br/>
        /// <br/>In addition to the status, the step detail contains:
        /// <br/>
        /// <br/>- `identifier` - a unique identifier for the step
        /// <br/>- `step_output` - an object containing the return values for the step
        /// </remarks>
        /// <returns>Workflow state</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ol_WorkflowState> OrchestrationLayerAPIGetV2WorkflowsIdentifierAsync(System.Guid workflow_instance_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (workflow_instance_identifier == null)
                throw new System.ArgumentNullException("workflow_instance_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/workflows/{workflow_instance_identifier}"
                    urlBuilder_.Append("v2/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(workflow_instance_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_WorkflowState>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ol_ProblemDetailErrorResponse>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of customers
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of customers that match the specified search criteria.
        /// <br/>
        /// <br/>The response includes partial information for each customer, including essential fields from the customer profile, risk level, and status objects.
        /// <br/>
        /// <br/>Complete details for each customer can be retrieved by calling the relevant endpoint with a specific customer identifier.
        /// <br/>
        /// <br/>This endpoint can return up to 10,000 customers. For larger datasets, use the 'exports' endpoint, which is designed for exporting large volumes of data.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get the list of customers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_CustomersList> CustomerGetCustomersListAsync(string search, System.DateTimeOffset? createdAtFrom, System.DateTimeOffset? createdAtTo, System.DateTimeOffset? updatedAtFrom, System.DateTimeOffset? updatedAtTo, string type, string riskLevel, string status, bool? monitoringEnabled, System.Collections.Generic.IEnumerable<string> acquisitionSource, System.Collections.Generic.IEnumerable<string> segments, string sort, int? page_number, int? page_size)
        {
            return CustomerGetCustomersListAsync(search, createdAtFrom, createdAtTo, updatedAtFrom, updatedAtTo, type, riskLevel, status, monitoringEnabled, acquisitionSource, segments, sort, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of customers
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of customers that match the specified search criteria.
        /// <br/>
        /// <br/>The response includes partial information for each customer, including essential fields from the customer profile, risk level, and status objects.
        /// <br/>
        /// <br/>Complete details for each customer can be retrieved by calling the relevant endpoint with a specific customer identifier.
        /// <br/>
        /// <br/>This endpoint can return up to 10,000 customers. For larger datasets, use the 'exports' endpoint, which is designed for exporting large volumes of data.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get the list of customers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_CustomersList> CustomerGetCustomersListAsync(string search, System.DateTimeOffset? createdAtFrom, System.DateTimeOffset? createdAtTo, System.DateTimeOffset? updatedAtFrom, System.DateTimeOffset? updatedAtTo, string type, string riskLevel, string status, bool? monitoringEnabled, System.Collections.Generic.IEnumerable<string> acquisitionSource, System.Collections.Generic.IEnumerable<string> segments, string sort, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers"
                    urlBuilder_.Append("v2/customers");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdAtFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAtFrom")).Append('=').Append(System.Uri.EscapeDataString(createdAtFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdAtTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAtTo")).Append('=').Append(System.Uri.EscapeDataString(createdAtTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAtFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAtFrom")).Append('=').Append(System.Uri.EscapeDataString(updatedAtFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAtTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAtTo")).Append('=').Append(System.Uri.EscapeDataString(updatedAtTo.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (riskLevel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("riskLevel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(riskLevel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (monitoringEnabled != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("monitoringEnabled")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(monitoringEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (acquisitionSource != null)
                    {
                            foreach (var item_ in acquisitionSource) { urlBuilder_.Append(System.Uri.EscapeDataString("acquisitionSource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (segments != null)
                    {
                            foreach (var item_ in segments) { urlBuilder_.Append(System.Uri.EscapeDataString("segments")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sort != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_CustomersList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get customer details
        /// </summary>
        /// <remarks>
        /// Once the workflow status returns as COMPLETED it is possible to collect the latest customer record, including the risk score.
        /// <br/>
        /// <br/>The response contains all the information submitted during the POST `/v2/customer` request as well as the customer risk score which is appended as an object to the response.
        /// <br/>
        /// <br/>This endpoint can also be used to get the latest risk score that is calculated once the screening results have been resolved through the Mesh application.
        /// <br/>
        /// <br/>The customer-identifier can be found within the GET `/v2/workflows/` response from within the `step_output` within the `customer-creation` step.
        /// <br/>
        /// <br/>There a number of customer statuses that can be returned from this endpoint:
        /// <br/>
        /// <br/>| Status name | Description |
        /// <br/>| ------ | ------ |
        /// <br/>|Processing| The customer has been created successfully but there are parts of the create-and-screen workflow that are still in progress|
        /// <br/>|Active|The customer is active - the initial risk level is not prohibited and there are no initial screening results, or screening results were returned and the case status is accepted|
        /// <br/>|Closed|The customer is closed - the initial risk level is prohibited, or there are screening results and the case status is rejected|
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>Get a customer.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_CustomerV2> CustomerGetCustomerV2Async(System.Guid customer_identifier)
        {
            return CustomerGetCustomerV2Async(customer_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get customer details
        /// </summary>
        /// <remarks>
        /// Once the workflow status returns as COMPLETED it is possible to collect the latest customer record, including the risk score.
        /// <br/>
        /// <br/>The response contains all the information submitted during the POST `/v2/customer` request as well as the customer risk score which is appended as an object to the response.
        /// <br/>
        /// <br/>This endpoint can also be used to get the latest risk score that is calculated once the screening results have been resolved through the Mesh application.
        /// <br/>
        /// <br/>The customer-identifier can be found within the GET `/v2/workflows/` response from within the `step_output` within the `customer-creation` step.
        /// <br/>
        /// <br/>There a number of customer statuses that can be returned from this endpoint:
        /// <br/>
        /// <br/>| Status name | Description |
        /// <br/>| ------ | ------ |
        /// <br/>|Processing| The customer has been created successfully but there are parts of the create-and-screen workflow that are still in progress|
        /// <br/>|Active|The customer is active - the initial risk level is not prohibited and there are no initial screening results, or screening results were returned and the case status is accepted|
        /// <br/>|Closed|The customer is closed - the initial risk level is prohibited, or there are screening results and the case status is rejected|
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>Get a customer.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_CustomerV2> CustomerGetCustomerV2Async(System.Guid customer_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_CustomerV2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("The customer doesn\'t exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get customer's products
        /// </summary>
        /// <remarks>
        /// This endpoint returns a page containing the latest product information for a single customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get a customers products.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_PaginatedProductsV2Response> CustomerGetProductsV2Async(System.Guid customer_identifier, int? page_number, int? page_size)
        {
            return CustomerGetProductsV2Async(customer_identifier, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get customer's products
        /// </summary>
        /// <remarks>
        /// This endpoint returns a page containing the latest product information for a single customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get a customers products.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_PaginatedProductsV2Response> CustomerGetProductsV2Async(System.Guid customer_identifier, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/products"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_PaginatedProductsV2Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("The customer doesn\'t exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get customer's risk score
        /// </summary>
        /// <remarks>
        /// This endpoint returns the latest risk score for a customer. It includes the overall score and level as well as a breakdown of the score by category.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <param name="sort">Optional field to sort risk models by.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RiskScoring_RiskScore> RiskScoringManagerServiceAPIGetRiskScoreAsync(System.Guid customer_identifier, string sort)
        {
            return RiskScoringManagerServiceAPIGetRiskScoreAsync(customer_identifier, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get customer's risk score
        /// </summary>
        /// <remarks>
        /// This endpoint returns the latest risk score for a customer. It includes the overall score and level as well as a breakdown of the score by category.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <param name="sort">Optional field to sort risk models by.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RiskScoring_RiskScore> RiskScoringManagerServiceAPIGetRiskScoreAsync(System.Guid customer_identifier, string sort, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/scores"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scores");
                    urlBuilder_.Append('?');
                    if (sort != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RiskScoring_RiskScore>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RiskScoring_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RiskScoring_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RiskScoring_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RiskScoring_ProblemDetailErrorResponse>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get monitoring configuration of a customer
        /// </summary>
        /// <remarks>
        /// This endpoint returns the monitor status for a single customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customer's monitoring status" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_CustomerMonitoringData> CustomerGetMonitoringConfigAsync(System.Guid customer_identifier)
        {
            return CustomerGetMonitoringConfigAsync(customer_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get monitoring configuration of a customer
        /// </summary>
        /// <remarks>
        /// This endpoint returns the monitor status for a single customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customer's monitoring status" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_CustomerMonitoringData> CustomerGetMonitoringConfigAsync(System.Guid customer_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/monitor"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/monitor");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_CustomerMonitoringData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update monitoring configuration for an existing customer
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to set the monitoring configuration for a single customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Monitor customers" and "Access to base customer monitoring functionality" permissions to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_CustomerMonitoringData> CustomerUpdateCustomerMonitorConfigurationAsync(System.Guid customer_identifier, CustomerManager_CustomerMonitoringDataApi body)
        {
            return CustomerUpdateCustomerMonitorConfigurationAsync(customer_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update monitoring configuration for an existing customer
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to set the monitoring configuration for a single customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Monitor customers" and "Access to base customer monitoring functionality" permissions to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_CustomerMonitoringData> CustomerUpdateCustomerMonitorConfigurationAsync(System.Guid customer_identifier, CustomerManager_CustomerMonitoringDataApi body, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/monitor"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/monitor");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_CustomerMonitoringData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve the labels for a customer
        /// </summary>
        /// <remarks>
        /// Provides the labels that have been set for the specified customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Label list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_PaginatedCustomerLabelsV2Response> CustomerGetLabelsV2Async(System.Guid customer_identifier, int? page_number, int? page_size)
        {
            return CustomerGetLabelsV2Async(customer_identifier, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the labels for a customer
        /// </summary>
        /// <remarks>
        /// Provides the labels that have been set for the specified customer.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Label list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_PaginatedCustomerLabelsV2Response> CustomerGetLabelsV2Async(System.Guid customer_identifier, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/labels"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/labels");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_PaginatedCustomerLabelsV2Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set labels for a customer
        /// </summary>
        /// <remarks>
        /// Sets the labels for a customer. The labels you specify replace what was there before.
        /// <br/>
        /// <br/>The payload you send is a JSON array of the label UUIDs you want to set for this customer. 
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>Success. The labels have been set for the customer.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_Unit> CustomerUpdateLabelsAsync(System.Guid customer_identifier, System.Collections.Generic.IEnumerable<System.Guid> body)
        {
            return CustomerUpdateLabelsAsync(customer_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set labels for a customer
        /// </summary>
        /// <remarks>
        /// Sets the labels for a customer. The labels you specify replace what was there before.
        /// <br/>
        /// <br/>The payload you send is a JSON array of the label UUIDs you want to set for this customer. 
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>Success. The labels have been set for the customer.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_Unit> CustomerUpdateLabelsAsync(System.Guid customer_identifier, System.Collections.Generic.IEnumerable<System.Guid> body, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/labels"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/labels");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_Unit>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Incorrect input parameters.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("The customer doesn\'t exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a screening certificate for a specific customer
        /// </summary>
        /// <remarks>
        /// Calling this endpoint will return a download URL to a screening certificate for a specific customer. The status field in the response is READY if the screening certificate is generated successfully. If the status field is NOT_READY, it indicates that data for the report is not yet available and you should try again shortly.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>The customer report is not ready, please try again later.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ScreeningCertificatesServiceAPIPostReportsV2Async(System.Guid customer_identifier, System.Collections.Generic.IEnumerable<Cert_ReportsRequest> body)
        {
            return ScreeningCertificatesServiceAPIPostReportsV2Async(customer_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a screening certificate for a specific customer
        /// </summary>
        /// <remarks>
        /// Calling this endpoint will return a download URL to a screening certificate for a specific customer. The status field in the response is READY if the screening certificate is generated successfully. If the status field is NOT_READY, it indicates that data for the report is not yet available and you should try again shortly.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier we provided when you created the customer.</param>
        /// <returns>The customer report is not ready, please try again later.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ScreeningCertificatesServiceAPIPostReportsV2Async(System.Guid customer_identifier, System.Collections.Generic.IEnumerable<Cert_ReportsRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/reports"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reports");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Cert_PaginatedResponseReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Cert_PaginatedResponseReport>("The customer report has been generated successfully.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Cert_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Cert_ProblemDetailErrorResponse>("Bad request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Cert_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Cert_ProblemDetailErrorResponse>("Invalid permissions.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Cert_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Cert_ProblemDetailErrorResponse>("The customer doesn\'t exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get customer using your identifier
        /// </summary>
        /// <remarks>
        /// This endpoint returns a 308 Permanent Redirect response, directing you to the get [customer](https://docs.mesh.complyadvantage.com/reference/getcustomer) endpoint based on the provided external identifier.
        /// <br/>Many API libraries follow the automatic redirect but, in some programming languages it may requires an additional API call.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="external_identifier">The unique identifier for your customer that you set when creating the customer.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CustomerGetCustomerV2WithExternalIdentifierAsync(string external_identifier)
        {
            return CustomerGetCustomerV2WithExternalIdentifierAsync(external_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get customer using your identifier
        /// </summary>
        /// <remarks>
        /// This endpoint returns a 308 Permanent Redirect response, directing you to the get [customer](https://docs.mesh.complyadvantage.com/reference/getcustomer) endpoint based on the provided external identifier.
        /// <br/>Many API libraries follow the automatic redirect but, in some programming languages it may requires an additional API call.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="external_identifier">The unique identifier for your customer that you set when creating the customer.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CustomerGetCustomerV2WithExternalIdentifierAsync(string external_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (external_identifier == null)
                throw new System.ArgumentNullException("external_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/external/{external_identifier}"
                    urlBuilder_.Append("v2/customers/external/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(external_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 308)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Permanent Redirect", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update and re-score a customer synchronously
        /// </summary>
        /// <remarks>
        /// This endpoint initiates the synchronous 'update and re-score' workflow for your customer in synchronous mode. The workflow consists of two steps:
        /// <br/>1. **Customer Record Update:** The customer record is updated.
        /// <br/>2. **Risk Scoring:** The risk score is re-calculated for the updated customer.
        /// <br/>The workflow executes synchronously returning the workflow status. This end-point is currently idempotent: in case of downstream error you can re-send the exact same request, and the workflow will be retried.
        /// </remarks>
        /// <param name="customer_identifier">Customer identifier of the customer to update</param>
        /// <returns>Sync update and re-score workflow executed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ol_WorkflowState> OrchestrationLayerAPIPostV2UpdateWorkflowsSyncAsync(System.Guid customer_identifier, Ol_UpdateAndRescoreCustomerRequest body)
        {
            return OrchestrationLayerAPIPostV2UpdateWorkflowsSyncAsync(customer_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update and re-score a customer synchronously
        /// </summary>
        /// <remarks>
        /// This endpoint initiates the synchronous 'update and re-score' workflow for your customer in synchronous mode. The workflow consists of two steps:
        /// <br/>1. **Customer Record Update:** The customer record is updated.
        /// <br/>2. **Risk Scoring:** The risk score is re-calculated for the updated customer.
        /// <br/>The workflow executes synchronously returning the workflow status. This end-point is currently idempotent: in case of downstream error you can re-send the exact same request, and the workflow will be retried.
        /// </remarks>
        /// <param name="customer_identifier">Customer identifier of the customer to update</param>
        /// <returns>Sync update and re-score workflow executed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ol_WorkflowState> OrchestrationLayerAPIPostV2UpdateWorkflowsSyncAsync(System.Guid customer_identifier, Ol_UpdateAndRescoreCustomerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/workflows/sync/update-and-rescore"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/workflows/sync/update-and-rescore");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_WorkflowState>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ol_ProblemDetailErrorResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ol_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ol_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of acquisition sources matching the search parameter.
        /// </summary>
        /// <remarks>
        /// You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get a list of acquisition sources matching the search parameter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerManager_PaginatedAcquisitionSourcesV2Response> CustomerGetAcquisitionSourcesAsync(string search, int? page_number, int? page_size)
        {
            return CustomerGetAcquisitionSourcesAsync(search, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of acquisition sources matching the search parameter.
        /// </summary>
        /// <remarks>
        /// You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get a list of acquisition sources matching the search parameter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerManager_PaginatedAcquisitionSourcesV2Response> CustomerGetAcquisitionSourcesAsync(string search, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/acquisition-sources"
                    urlBuilder_.Append("v2/customers/acquisition-sources");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_PaginatedAcquisitionSourcesV2Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerManager_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CustomerManager_ProblemDetailErrorResponse>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of cases
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of cases for the user's account. Accepts filter and sort query parameters.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="assignee">User identifier or null.</param>
        /// <param name="assignee_identifier">Provide an array of user identifiers or blank with which to filter the case list.
        /// <br/>
        /// <br/>* Includes all cases assigned to user matching user identifiers.
        /// <br/>
        /// <br/>* If array includes blank, also includes cases without an assignee (i.e. unassigned).</param>
        /// <param name="type">Filter cases by specific case types</param>
        /// <param name="created_at_from">Filter cases created on or after this date and time.</param>
        /// <param name="created_at_to">Filter cases created on or before this date and time.</param>
        /// <param name="customer_identifier">Filter cases by a list of customer identifiers</param>
        /// <param name="customer_risk_level">Filter cases by a list of customer risk levels.</param>
        /// <param name="customer_label">Provide an array of customer label identifiers or blank with which to filter the case list.
        /// <br/>
        /// <br/>* Includes all cases matching at least one customer label.
        /// <br/>
        /// <br/>* If array includes blank, also includes cases without a customer label.</param>
        /// <param name="customer_acquisition_source">Provide an array of customer acquisition sources or blank with which to filter the case list.
        /// <br/>
        /// <br/>* Includes all cases matching at least one customer acquisition source.
        /// <br/>
        /// <br/>* If array includes blank, also includes cases without a customer acquisition source.</param>
        /// <param name="search">Search for cases by customer name, customer external identifier, or external activity identifier (for payment screening cases only). Supports wildcard search.</param>
        /// <param name="state">The current state of the case.
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as USER_DEFINED</param>
        /// <param name="stage_identifier">Provide an array of stage identifiers with which to filter the case list.</param>
        /// <param name="risk_type">Filter cases by a list of risk types. You can retrieve the full list of available risk types from the `/v2/risk-types` endpoint.</param>
        /// <param name="alerts_title">Filter cases by alert title(s).
        /// <br/>
        /// <br/>Allows filtering for cases with alerts matching any of the provided titles.</param>
        /// <param name="alerts_highest_priority">Filter cases by the highest priority alert (1-9).
        /// <br/>
        /// <br/>Allows filtering for cases where the highest priority alert matches the provided value.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseResultResponse> CasesService_v2_cases_getAsync(System.Collections.Generic.IEnumerable<string> assignee, System.Collections.Generic.IEnumerable<System.Guid> assignee_identifier, System.Collections.Generic.IEnumerable<Anonymous3> type, System.DateTimeOffset? created_at_from, System.DateTimeOffset? created_at_to, System.Collections.Generic.IEnumerable<System.Guid> customer_identifier, System.Collections.Generic.IEnumerable<Anonymous4> customer_risk_level, System.Collections.Generic.IEnumerable<System.Guid> customer_label, System.Collections.Generic.IEnumerable<string> customer_acquisition_source, string search, System.Collections.Generic.IEnumerable<Anonymous5> state, System.Collections.Generic.IEnumerable<System.Guid> stage_identifier, System.Collections.Generic.IEnumerable<Anonymous6> risk_type, System.Collections.Generic.IEnumerable<string> alerts_title, System.Collections.Generic.IEnumerable<int> alerts_highest_priority, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return CasesService_v2_cases_getAsync(assignee, assignee_identifier, type, created_at_from, created_at_to, customer_identifier, customer_risk_level, customer_label, customer_acquisition_source, search, state, stage_identifier, risk_type, alerts_title, alerts_highest_priority, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of cases
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of cases for the user's account. Accepts filter and sort query parameters.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="assignee">User identifier or null.</param>
        /// <param name="assignee_identifier">Provide an array of user identifiers or blank with which to filter the case list.
        /// <br/>
        /// <br/>* Includes all cases assigned to user matching user identifiers.
        /// <br/>
        /// <br/>* If array includes blank, also includes cases without an assignee (i.e. unassigned).</param>
        /// <param name="type">Filter cases by specific case types</param>
        /// <param name="created_at_from">Filter cases created on or after this date and time.</param>
        /// <param name="created_at_to">Filter cases created on or before this date and time.</param>
        /// <param name="customer_identifier">Filter cases by a list of customer identifiers</param>
        /// <param name="customer_risk_level">Filter cases by a list of customer risk levels.</param>
        /// <param name="customer_label">Provide an array of customer label identifiers or blank with which to filter the case list.
        /// <br/>
        /// <br/>* Includes all cases matching at least one customer label.
        /// <br/>
        /// <br/>* If array includes blank, also includes cases without a customer label.</param>
        /// <param name="customer_acquisition_source">Provide an array of customer acquisition sources or blank with which to filter the case list.
        /// <br/>
        /// <br/>* Includes all cases matching at least one customer acquisition source.
        /// <br/>
        /// <br/>* If array includes blank, also includes cases without a customer acquisition source.</param>
        /// <param name="search">Search for cases by customer name, customer external identifier, or external activity identifier (for payment screening cases only). Supports wildcard search.</param>
        /// <param name="state">The current state of the case.
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as USER_DEFINED</param>
        /// <param name="stage_identifier">Provide an array of stage identifiers with which to filter the case list.</param>
        /// <param name="risk_type">Filter cases by a list of risk types. You can retrieve the full list of available risk types from the `/v2/risk-types` endpoint.</param>
        /// <param name="alerts_title">Filter cases by alert title(s).
        /// <br/>
        /// <br/>Allows filtering for cases with alerts matching any of the provided titles.</param>
        /// <param name="alerts_highest_priority">Filter cases by the highest priority alert (1-9).
        /// <br/>
        /// <br/>Allows filtering for cases where the highest priority alert matches the provided value.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseResultResponse> CasesService_v2_cases_getAsync(System.Collections.Generic.IEnumerable<string> assignee, System.Collections.Generic.IEnumerable<System.Guid> assignee_identifier, System.Collections.Generic.IEnumerable<Anonymous3> type, System.DateTimeOffset? created_at_from, System.DateTimeOffset? created_at_to, System.Collections.Generic.IEnumerable<System.Guid> customer_identifier, System.Collections.Generic.IEnumerable<Anonymous4> customer_risk_level, System.Collections.Generic.IEnumerable<System.Guid> customer_label, System.Collections.Generic.IEnumerable<string> customer_acquisition_source, string search, System.Collections.Generic.IEnumerable<Anonymous5> state, System.Collections.Generic.IEnumerable<System.Guid> stage_identifier, System.Collections.Generic.IEnumerable<Anonymous6> risk_type, System.Collections.Generic.IEnumerable<string> alerts_title, System.Collections.Generic.IEnumerable<int> alerts_highest_priority, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases"
                    urlBuilder_.Append("v2/cases");
                    urlBuilder_.Append('?');
                    if (assignee != null)
                    {
                            foreach (var item_ in assignee) { urlBuilder_.Append(System.Uri.EscapeDataString("assignee")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (assignee_identifier != null)
                    {
                            foreach (var item_ in assignee_identifier) { urlBuilder_.Append(System.Uri.EscapeDataString("assignee_identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (type != null)
                    {
                            foreach (var item_ in type) { urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (created_at_from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created_at_from")).Append('=').Append(System.Uri.EscapeDataString(created_at_from.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created_at_to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created_at_to")).Append('=').Append(System.Uri.EscapeDataString(created_at_to.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customer_identifier != null)
                    {
                            foreach (var item_ in customer_identifier) { urlBuilder_.Append(System.Uri.EscapeDataString("customer.identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (customer_risk_level != null)
                    {
                            foreach (var item_ in customer_risk_level) { urlBuilder_.Append(System.Uri.EscapeDataString("customer.risk_level")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (customer_label != null)
                    {
                            foreach (var item_ in customer_label) { urlBuilder_.Append(System.Uri.EscapeDataString("customer.label")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (customer_acquisition_source != null)
                    {
                            foreach (var item_ in customer_acquisition_source) { urlBuilder_.Append(System.Uri.EscapeDataString("customer.acquisition_source")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                            foreach (var item_ in state) { urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (stage_identifier != null)
                    {
                            foreach (var item_ in stage_identifier) { urlBuilder_.Append(System.Uri.EscapeDataString("stage.identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (risk_type != null)
                    {
                            foreach (var item_ in risk_type) { urlBuilder_.Append(System.Uri.EscapeDataString("risk_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (alerts_title != null)
                    {
                            foreach (var item_ in alerts_title) { urlBuilder_.Append(System.Uri.EscapeDataString("alerts.title")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (alerts_highest_priority != null)
                    {
                            foreach (var item_ in alerts_highest_priority) { urlBuilder_.Append(System.Uri.EscapeDataString("alerts.highest_priority")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_PaginatedResponseCaseResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Leave a note on multiple cases in bulk
        /// </summary>
        /// <remarks>
        /// This endpoint creates a note for multiple cases. Up to 100 cases.
        /// </remarks>
        /// <returns>Multi-Status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_BulkActionResponse> CasesService_v2_cases_notes_bulk_postAsync(CaseManagement_CreateCasesNoteRequest body)
        {
            return CasesService_v2_cases_notes_bulk_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Leave a note on multiple cases in bulk
        /// </summary>
        /// <remarks>
        /// This endpoint creates a note for multiple cases. Up to 100 cases.
        /// </remarks>
        /// <returns>Multi-Status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_BulkActionResponse> CasesService_v2_cases_notes_bulk_postAsync(CaseManagement_CreateCasesNoteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/notes/bulk"
                    urlBuilder_.Append("v2/cases/notes/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_BulkActionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CaseManagement_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign cases in bulk
        /// </summary>
        /// <remarks>
        /// This endpoint synchronously updates assignee for up to 100 cases.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <returns>Multi-Status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_BulkActionResponse> CasesService_v2_cases_assign_bulk_postAsync(CaseManagement_AssignCasesRequest body)
        {
            return CasesService_v2_cases_assign_bulk_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign cases in bulk
        /// </summary>
        /// <remarks>
        /// This endpoint synchronously updates assignee for up to 100 cases.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <returns>Multi-Status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_BulkActionResponse> CasesService_v2_cases_assign_bulk_postAsync(CaseManagement_AssignCasesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/assign/bulk"
                    urlBuilder_.Append("v2/cases/assign/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_BulkActionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CaseManagement_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Transition cases in bulk
        /// </summary>
        /// <remarks>
        /// This endpoint synchronously updates state (or stage) for up to 100 cases.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <returns>Multi-Status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_BulkActionResponse> CasesService_v2_cases_transition_bulk_postAsync(CaseManagement_TransitionCasesRequest body)
        {
            return CasesService_v2_cases_transition_bulk_postAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transition cases in bulk
        /// </summary>
        /// <remarks>
        /// This endpoint synchronously updates state (or stage) for up to 100 cases.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <returns>Multi-Status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_BulkActionResponse> CasesService_v2_cases_transition_bulk_postAsync(CaseManagement_TransitionCasesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/transition/bulk"
                    urlBuilder_.Append("v2/cases/transition/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_BulkActionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CaseManagement_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of available case states
        /// </summary>
        /// <remarks>
        /// This endpoint returns all possible states to which a case can be transitioned.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseStatesResponse> CasesService_v2_cases_states_getAsync(int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return CasesService_v2_cases_states_getAsync(page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of available case states
        /// </summary>
        /// <remarks>
        /// This endpoint returns all possible states to which a case can be transitioned.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseStatesResponse> CasesService_v2_cases_states_getAsync(int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/states"
                    urlBuilder_.Append("v2/cases/states");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_PaginatedResponseCaseStatesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of case workflows
        /// </summary>
        /// <remarks>
        /// This endpoint returns a page of workflows.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_PaginatedResponseWorkflowResponse> CasesService_v2_cases_workflows_getAsync(int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return CasesService_v2_cases_workflows_getAsync(page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of case workflows
        /// </summary>
        /// <remarks>
        /// This endpoint returns a page of workflows.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_PaginatedResponseWorkflowResponse> CasesService_v2_cases_workflows_getAsync(int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/workflows"
                    urlBuilder_.Append("v2/cases/workflows");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_PaginatedResponseWorkflowResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get risks within an alert
        /// </summary>
        /// <remarks>
        /// This endpoint will list all risks for a given alert.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View alerts" permission to use this endpoint.
        /// </remarks>
        /// <param name="alert_identifier">UUID identifier of the alert from which to get the risks</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Sra_ListRisksResponse> AlertServiceGetRisksAsync(System.Guid alert_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return AlertServiceGetRisksAsync(alert_identifier, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get risks within an alert
        /// </summary>
        /// <remarks>
        /// This endpoint will list all risks for a given alert.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View alerts" permission to use this endpoint.
        /// </remarks>
        /// <param name="alert_identifier">UUID identifier of the alert from which to get the risks</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Sra_ListRisksResponse> AlertServiceGetRisksAsync(System.Guid alert_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (alert_identifier == null)
                throw new System.ArgumentNullException("alert_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/alerts/{alert_identifier}/risks"
                    urlBuilder_.Append("v2/alerts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alert_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/risks");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ListRisksResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the status of a risk
        /// </summary>
        /// <remarks>
        /// Given an alert identifier, risk identifier, and new risk state, updates the state of the given risk signal.
        /// <br/>
        /// <br/>**Note**: A risk signal from a `TRANSACTION_MONITORING` alert cannot be updated and will result in a 400 response code
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update risks" permission to use this endpoint.
        /// </remarks>
        /// <returns>Decision state updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Am_RiskStatusUpdatePayload> AlertServiceChangeRiskStatusAsync(System.Guid alert_identifier, System.Guid risk_identifier, Am_RiskStatusUpdatePayload body)
        {
            return AlertServiceChangeRiskStatusAsync(alert_identifier, risk_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the status of a risk
        /// </summary>
        /// <remarks>
        /// Given an alert identifier, risk identifier, and new risk state, updates the state of the given risk signal.
        /// <br/>
        /// <br/>**Note**: A risk signal from a `TRANSACTION_MONITORING` alert cannot be updated and will result in a 400 response code
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update risks" permission to use this endpoint.
        /// </remarks>
        /// <returns>Decision state updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Am_RiskStatusUpdatePayload> AlertServiceChangeRiskStatusAsync(System.Guid alert_identifier, System.Guid risk_identifier, Am_RiskStatusUpdatePayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (alert_identifier == null)
                throw new System.ArgumentNullException("alert_identifier");

            if (risk_identifier == null)
                throw new System.ArgumentNullException("risk_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/alerts/{alert_identifier}/risks/{risk_identifier}/decision"
                    urlBuilder_.Append("v2/alerts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alert_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/risks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(risk_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/decision");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_RiskStatusUpdatePayload>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of alert mutes for account or customer
        /// </summary>
        /// <remarks>
        /// Get list of alert mutes for account or customer
        /// <br/>
        /// <br/>
        /// <br/>You need the "View alerts" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">Optional UUID identifier of the customer if you want to get alert mutes for a single customer</param>
        /// <returns>List of found alert mutes for customer or account</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Am_GetAlertMutesResponse> AlertServiceGetAlertMutesAsync(System.Guid? customer_identifier)
        {
            return AlertServiceGetAlertMutesAsync(customer_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of alert mutes for account or customer
        /// </summary>
        /// <remarks>
        /// Get list of alert mutes for account or customer
        /// <br/>
        /// <br/>
        /// <br/>You need the "View alerts" permission to use this endpoint.
        /// </remarks>
        /// <param name="customer_identifier">Optional UUID identifier of the customer if you want to get alert mutes for a single customer</param>
        /// <returns>List of found alert mutes for customer or account</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Am_GetAlertMutesResponse> AlertServiceGetAlertMutesAsync(System.Guid? customer_identifier, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/alerts/mutes"
                    urlBuilder_.Append("v2/alerts/mutes");
                    urlBuilder_.Append('?');
                    if (customer_identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("customer_identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_GetAlertMutesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("Invalid customer identifier", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create alert mutes for customer
        /// </summary>
        /// <remarks>
        /// Allows muting future alerts about the same risk,
        /// <br/>            currently only support for customer scoped muting is provided
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and delete mutes" permission to use this endpoint.
        /// </remarks>
        /// <returns>Alert mute created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Am_AlertMuteDTO> AlertServiceCreateAlertMuteAsync(Am_CreateAlertMuteRequest body)
        {
            return AlertServiceCreateAlertMuteAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create alert mutes for customer
        /// </summary>
        /// <remarks>
        /// Allows muting future alerts about the same risk,
        /// <br/>            currently only support for customer scoped muting is provided
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and delete mutes" permission to use this endpoint.
        /// </remarks>
        /// <returns>Alert mute created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Am_AlertMuteDTO> AlertServiceCreateAlertMuteAsync(Am_CreateAlertMuteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/alerts/mutes"
                    urlBuilder_.Append("v2/alerts/mutes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_AlertMuteDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("Customer identifier is not present", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("Profile is already muted for this customer", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete alert mute
        /// </summary>
        /// <remarks>
        /// Delete a muted alert for a risk, currently only support for customer scoped muting is provided
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and delete mutes" permission to use this endpoint.
        /// </remarks>
        /// <param name="alert_mute_key">The key of the risk item that has been muted, for example the Risk ID of a profile hit</param>
        /// <param name="customer_identifier">UUID Identifier for the Customer</param>
        /// <returns>Alert mute deleted successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AlertServiceDeleteAlertMuteAsync(string alert_mute_key, System.Guid customer_identifier)
        {
            return AlertServiceDeleteAlertMuteAsync(alert_mute_key, customer_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete alert mute
        /// </summary>
        /// <remarks>
        /// Delete a muted alert for a risk, currently only support for customer scoped muting is provided
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and delete mutes" permission to use this endpoint.
        /// </remarks>
        /// <param name="alert_mute_key">The key of the risk item that has been muted, for example the Risk ID of a profile hit</param>
        /// <param name="customer_identifier">UUID Identifier for the Customer</param>
        /// <returns>Alert mute deleted successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AlertServiceDeleteAlertMuteAsync(string alert_mute_key, System.Guid customer_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (alert_mute_key == null)
                throw new System.ArgumentNullException("alert_mute_key");

            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/alerts/mutes/{alert_mute_key}/customer/{customer_identifier}"
                    urlBuilder_.Append("v2/alerts/mutes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(alert_mute_key, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/customer/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("Invalid customer identifier", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Am_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Am_ProblemDetailErrorResponse>("No alert mute found to delete", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of all email notification configurations
        /// </summary>
        /// <remarks>
        /// Returns all the email notification configurations created for this account. Allows to filter by email notification type.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_PaginatedResponseEmailConfigurationLog> NotificationListEmailConfigurationsDocAsync(Type? type, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return NotificationListEmailConfigurationsDocAsync(type, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all email notification configurations
        /// </summary>
        /// <remarks>
        /// Returns all the email notification configurations created for this account. Allows to filter by email notification type.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_PaginatedResponseEmailConfigurationLog> NotificationListEmailConfigurationsDocAsync(Type? type, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/notifications/configurations/email"
                    urlBuilder_.Append("v2/notifications/configurations/email");
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_PaginatedResponseEmailConfigurationLog>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new email notification configuration
        /// </summary>
        /// <remarks>
        /// This endpoint enables you to create an email notification, by selecting a type of notification that should trigger the sending of this email and specify who the email should be sent to, when the conditions are met.
        /// <br/>
        /// <br/>At least one recipient should be specified.
        /// <br/>
        /// <br/>There is one event type which can trigger an email to be sent:
        /// <br/>
        /// <br/>### CASE_ASSIGNED
        /// <br/>
        /// <br/>Sends an email to the assignee, whenever a new case is assigned to that user.
        /// <br/>If that user is configured in the list of recipients and the person assigning the email is not the same user (so only sending an email notification when someone else assigns a case to this user).
        /// <br/>
        /// <br/>Example:
        /// <br/>```
        /// <br/>Hi Sophie,
        /// <br/>
        /// <br/>A case has been assigned to you by Julian
        /// <br/>Type: Customer Onboarding
        /// <br/>Created at: February 10, 2025 at 10:00am
        /// <br/>Stage: In Review
        /// <br/>Assignee: Sophie
        /// <br/>Note: Assigned to you because you are specialized on these scenarios
        /// <br/>Click here to view this case
        /// <br/>
        /// <br/>Please contact support@complyadvantage.com if you have any questions.
        /// <br/>
        /// <br/>```
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <returns>Email configuration created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_EmailConfigurationLog> NotificationCreateEmailConfigurationAsync(Ns_EmailConfigurationPayload body)
        {
            return NotificationCreateEmailConfigurationAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new email notification configuration
        /// </summary>
        /// <remarks>
        /// This endpoint enables you to create an email notification, by selecting a type of notification that should trigger the sending of this email and specify who the email should be sent to, when the conditions are met.
        /// <br/>
        /// <br/>At least one recipient should be specified.
        /// <br/>
        /// <br/>There is one event type which can trigger an email to be sent:
        /// <br/>
        /// <br/>### CASE_ASSIGNED
        /// <br/>
        /// <br/>Sends an email to the assignee, whenever a new case is assigned to that user.
        /// <br/>If that user is configured in the list of recipients and the person assigning the email is not the same user (so only sending an email notification when someone else assigns a case to this user).
        /// <br/>
        /// <br/>Example:
        /// <br/>```
        /// <br/>Hi Sophie,
        /// <br/>
        /// <br/>A case has been assigned to you by Julian
        /// <br/>Type: Customer Onboarding
        /// <br/>Created at: February 10, 2025 at 10:00am
        /// <br/>Stage: In Review
        /// <br/>Assignee: Sophie
        /// <br/>Note: Assigned to you because you are specialized on these scenarios
        /// <br/>Click here to view this case
        /// <br/>
        /// <br/>Please contact support@complyadvantage.com if you have any questions.
        /// <br/>
        /// <br/>```
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <returns>Email configuration created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_EmailConfigurationLog> NotificationCreateEmailConfigurationAsync(Ns_EmailConfigurationPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/notifications/configurations/email"
                    urlBuilder_.Append("v2/notifications/configurations/email");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_EmailConfigurationLog>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ns_ProblemDetailErrorResponse>("Bad request. Request cannot be processed due to input Email configuration payload error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test an email
        /// </summary>
        /// <remarks>
        /// This is an optional test that will send an example email to the email address you specify.
        /// <br/>
        /// <br/>Test Email content: 
        /// <br/>
        /// <br/>```"This is a test email from ComplyAdvantage with identifier=2032e328-c48b-4674-8229-576955df1a79 "```
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <returns>success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_TestEmailResponse> NotificationTestEmailAsync(Ns_EmailTestPayload body)
        {
            return NotificationTestEmailAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test an email
        /// </summary>
        /// <remarks>
        /// This is an optional test that will send an example email to the email address you specify.
        /// <br/>
        /// <br/>Test Email content: 
        /// <br/>
        /// <br/>```"This is a test email from ComplyAdvantage with identifier=2032e328-c48b-4674-8229-576955df1a79 "```
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <returns>success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_TestEmailResponse> NotificationTestEmailAsync(Ns_EmailTestPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/notifications/configurations/email/test"
                    urlBuilder_.Append("v2/notifications/configurations/email/test");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_TestEmailResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ns_ProblemDetailErrorResponse>("Bad request. Request cannot be processed due to input error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an email notification configuration
        /// </summary>
        /// <remarks>
        /// This endpoint allows updating who the email notification is configured to be sent to.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <param name="identifier">When you create an email configuration or run “Get list of email configurations”, you’ll receive a unique identifier for the configuration the specific email configuration. Supply that here for the email configuration you wish to make changes to.The previous value for `enabled_for` would be totally overwritten with what's passed in here.</param>
        /// <returns>Email configuration updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_EmailConfigurationLog> NotificationPatchEmailConfigurationDocAsync(string identifier, Ns_UpdateEmailConfigurationPayload body)
        {
            return NotificationPatchEmailConfigurationDocAsync(identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an email notification configuration
        /// </summary>
        /// <remarks>
        /// This endpoint allows updating who the email notification is configured to be sent to.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <param name="identifier">When you create an email configuration or run “Get list of email configurations”, you’ll receive a unique identifier for the configuration the specific email configuration. Supply that here for the email configuration you wish to make changes to.The previous value for `enabled_for` would be totally overwritten with what's passed in here.</param>
        /// <returns>Email configuration updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_EmailConfigurationLog> NotificationPatchEmailConfigurationDocAsync(string identifier, Ns_UpdateEmailConfigurationPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/notifications/configurations/email/{identifier}"
                    urlBuilder_.Append("v2/notifications/configurations/email/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_EmailConfigurationLog>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ns_ProblemDetailErrorResponse>("Bad request. Request cannot be processed due to input error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an email notification configuration
        /// </summary>
        /// <remarks>
        /// This endpoint allows deleting an email notification configuration.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <param name="identifier">When you create an email config or run “Get list of email configs”, you’ll receive a unique configuration identifier for each email config. Supply that here for the email you wish to delete.</param>
        /// <returns>Email configuration deleted successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_DeletedEmailConfigurationResponse> NotificationDeleteEmailConfigurationDocAsync(string identifier)
        {
            return NotificationDeleteEmailConfigurationDocAsync(identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an email notification configuration
        /// </summary>
        /// <remarks>
        /// This endpoint allows deleting an email notification configuration.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update email notification configurations" permission to use this endpoint.
        /// </remarks>
        /// <param name="identifier">When you create an email config or run “Get list of email configs”, you’ll receive a unique configuration identifier for each email config. Supply that here for the email you wish to delete.</param>
        /// <returns>Email configuration deleted successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_DeletedEmailConfigurationResponse> NotificationDeleteEmailConfigurationDocAsync(string identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/notifications/configurations/email/{identifier}"
                    urlBuilder_.Append("v2/notifications/configurations/email/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_DeletedEmailConfigurationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ns_ProblemDetailErrorResponse>("Bad request. Request cannot be processed due to input error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new webhook configuration
        /// </summary>
        /// <remarks>
        /// This endpoint enables you to create a webhook that will monitor an event type and send updates to the URL you specify.
        /// <br/>
        /// <br/>There are four event types you can listen to:
        /// <br/>
        /// <br/>### CASE_CREATED
        /// <br/>
        /// <br/>Receive an update whenever a new case is created.
        /// <br/>
        /// <br/>Note:
        /// <br/> - case_state is deprecated. Please use case_stage instead.
        /// <br/> - This webhook produces two responses v1 and v2 - please use v2 as it contains case_stage and also the customer external_identifier
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/> "api_version": "v2",
        /// <br/> "case_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/> "case_state": "ONBOARDING_NOT_STARTED",
        /// <br/> "case_type": "CUSTOMER_ONBOARDING",
        /// <br/> "customer": {
        /// <br/>  "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>  "external_identifier": "your unique customer identifier",
        /// <br/>  "version": 1
        /// <br/> },
        /// <br/> "case_stage": {
        /// <br/>   "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>   "display_name": "Not Started",
        /// <br/>   "display_order": 1,
        /// <br/>   "stage_type": "INITIAL",
        /// <br/>   "decision_type": null
        /// <br/> }
        /// <br/>}
        /// <br/>```
        /// <br/>### CASE_STAGE_UPDATED
        /// <br/>Receive an update whenever a case changes its stage, e.g. from "Not Started" to "In Progress".
        /// <br/>
        /// <br/>Note:
        /// <br/> - case_state is deprecated. Please use case_stage instead.
        /// <br/> - This webhook produces two responses v1 and v2 - please use v2 as it contains case_stage and also the customer external_identifier
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/> "api_version": "v2",
        /// <br/> "case_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/> "case_state": "CASE_STATE_POSITIVE_END_STATE",
        /// <br/> "case_type": "CUSTOMER_ONBOARDING",
        /// <br/> "customer": {
        /// <br/>  "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>  "external_identifier": "your unique customer identifier",
        /// <br/>  "version": 1
        /// <br/> },
        /// <br/> "note": {
        /// <br/>  "contents": "note left at the time the case state was updated"
        /// <br/> },
        /// <br/> "case_stage": {
        /// <br/>   "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>   "display_name": "False Positive",
        /// <br/>   "display_order": 4,
        /// <br/>   "stage_type": "DECISION",
        /// <br/>   "decision_type": "POSITIVE"
        /// <br/> }
        /// <br/>}
        /// <br/>
        /// <br/>```
        /// <br/>### CASE_ALERT_LIST_UPDATED
        /// <br/>
        /// <br/>Receive an update whenever the alert list associated with a case is updated, such as when new alerts are added to the case.
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/> "api_version": "v2",
        /// <br/> "account_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/> "case_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/> "customer": {
        /// <br/>  "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>  "external_identifier": "your unique customer identifier",
        /// <br/>  "version": 1
        /// <br/> },
        /// <br/> "alert_identifiers": [
        /// <br/>   "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>   "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/> ]
        /// <br/>}
        /// <br/>```
        /// <br/>### WORKFLOW_COMPLETED
        /// <br/>
        /// <br/>Receive an update when an onboarding workflow completes.
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/>    "api_version": "v2",
        /// <br/>    "workflow_instance_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>    "status": "COMPLETED",
        /// <br/>    "step_details": {
        /// <br/>    "alerting": {
        /// <br/>        "identifier": null,
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "alerts": [
        /// <br/>            {
        /// <br/>            "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/>            }
        /// <br/>        ]
        /// <br/>        }
        /// <br/>    },
        /// <br/>    "customer-creation": {
        /// <br/>        "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "customer_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/>        }
        /// <br/>    },
        /// <br/>    "customer-screening": {
        /// <br/>        "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "screening_result": "HAS_PROFILES",
        /// <br/>        "aml_types": [
        /// <br/>            "SANCTION",
        /// <br/>            "ADVERSE_MEDIA",
        /// <br/>            "ADVERSE_MEDIA_V2_CYBERCRIME",
        /// <br/>            "PEP_CLASS_1",
        /// <br/>            "PEP_CLASS_2",
        /// <br/>            "WARNING"
        /// <br/>        ]
        /// <br/>        }
        /// <br/>    },
        /// <br/>    "initial-risk-scoring": {
        /// <br/>        "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "overall_level": "LOW-RISK",
        /// <br/>        "overall_value": 0
        /// <br/>        }
        /// <br/>    }
        /// <br/>    },
        /// <br/>    "steps": [
        /// <br/>    "customer-creation",
        /// <br/>    "initial-risk-scoring",
        /// <br/>    "customer-screening",
        /// <br/>    "alerting"
        /// <br/>    ],
        /// <br/>    "workflow_type": "create-and-screen"
        /// <br/>}
        /// <br/>```
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update webhooks" permission to use this endpoint.
        /// </remarks>
        /// <returns>Webhook created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_WebhookConfigurationLog> NotificationPostV2WebhookAsync(Ns_WebhookConfigurationPayload body)
        {
            return NotificationPostV2WebhookAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new webhook configuration
        /// </summary>
        /// <remarks>
        /// This endpoint enables you to create a webhook that will monitor an event type and send updates to the URL you specify.
        /// <br/>
        /// <br/>There are four event types you can listen to:
        /// <br/>
        /// <br/>### CASE_CREATED
        /// <br/>
        /// <br/>Receive an update whenever a new case is created.
        /// <br/>
        /// <br/>Note:
        /// <br/> - case_state is deprecated. Please use case_stage instead.
        /// <br/> - This webhook produces two responses v1 and v2 - please use v2 as it contains case_stage and also the customer external_identifier
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/> "api_version": "v2",
        /// <br/> "case_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/> "case_state": "ONBOARDING_NOT_STARTED",
        /// <br/> "case_type": "CUSTOMER_ONBOARDING",
        /// <br/> "customer": {
        /// <br/>  "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>  "external_identifier": "your unique customer identifier",
        /// <br/>  "version": 1
        /// <br/> },
        /// <br/> "case_stage": {
        /// <br/>   "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>   "display_name": "Not Started",
        /// <br/>   "display_order": 1,
        /// <br/>   "stage_type": "INITIAL",
        /// <br/>   "decision_type": null
        /// <br/> }
        /// <br/>}
        /// <br/>```
        /// <br/>### CASE_STAGE_UPDATED
        /// <br/>Receive an update whenever a case changes its stage, e.g. from "Not Started" to "In Progress".
        /// <br/>
        /// <br/>Note:
        /// <br/> - case_state is deprecated. Please use case_stage instead.
        /// <br/> - This webhook produces two responses v1 and v2 - please use v2 as it contains case_stage and also the customer external_identifier
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/> "api_version": "v2",
        /// <br/> "case_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/> "case_state": "CASE_STATE_POSITIVE_END_STATE",
        /// <br/> "case_type": "CUSTOMER_ONBOARDING",
        /// <br/> "customer": {
        /// <br/>  "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>  "external_identifier": "your unique customer identifier",
        /// <br/>  "version": 1
        /// <br/> },
        /// <br/> "note": {
        /// <br/>  "contents": "note left at the time the case state was updated"
        /// <br/> },
        /// <br/> "case_stage": {
        /// <br/>   "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>   "display_name": "False Positive",
        /// <br/>   "display_order": 4,
        /// <br/>   "stage_type": "DECISION",
        /// <br/>   "decision_type": "POSITIVE"
        /// <br/> }
        /// <br/>}
        /// <br/>
        /// <br/>```
        /// <br/>### CASE_ALERT_LIST_UPDATED
        /// <br/>
        /// <br/>Receive an update whenever the alert list associated with a case is updated, such as when new alerts are added to the case.
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/> "api_version": "v2",
        /// <br/> "account_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/> "case_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/> "customer": {
        /// <br/>  "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>  "external_identifier": "your unique customer identifier",
        /// <br/>  "version": 1
        /// <br/> },
        /// <br/> "alert_identifiers": [
        /// <br/>   "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>   "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/> ]
        /// <br/>}
        /// <br/>```
        /// <br/>### WORKFLOW_COMPLETED
        /// <br/>
        /// <br/>Receive an update when an onboarding workflow completes.
        /// <br/>
        /// <br/>Example:
        /// <br/>```json
        /// <br/>{
        /// <br/>    "api_version": "v2",
        /// <br/>    "workflow_instance_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>    "status": "COMPLETED",
        /// <br/>    "step_details": {
        /// <br/>    "alerting": {
        /// <br/>        "identifier": null,
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "alerts": [
        /// <br/>            {
        /// <br/>            "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/>            }
        /// <br/>        ]
        /// <br/>        }
        /// <br/>    },
        /// <br/>    "customer-creation": {
        /// <br/>        "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "customer_identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        /// <br/>        }
        /// <br/>    },
        /// <br/>    "customer-screening": {
        /// <br/>        "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "screening_result": "HAS_PROFILES",
        /// <br/>        "aml_types": [
        /// <br/>            "SANCTION",
        /// <br/>            "ADVERSE_MEDIA",
        /// <br/>            "ADVERSE_MEDIA_V2_CYBERCRIME",
        /// <br/>            "PEP_CLASS_1",
        /// <br/>            "PEP_CLASS_2",
        /// <br/>            "WARNING"
        /// <br/>        ]
        /// <br/>        }
        /// <br/>    },
        /// <br/>    "initial-risk-scoring": {
        /// <br/>        "identifier": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        /// <br/>        "status": "COMPLETED",
        /// <br/>        "step_output": {
        /// <br/>        "overall_level": "LOW-RISK",
        /// <br/>        "overall_value": 0
        /// <br/>        }
        /// <br/>    }
        /// <br/>    },
        /// <br/>    "steps": [
        /// <br/>    "customer-creation",
        /// <br/>    "initial-risk-scoring",
        /// <br/>    "customer-screening",
        /// <br/>    "alerting"
        /// <br/>    ],
        /// <br/>    "workflow_type": "create-and-screen"
        /// <br/>}
        /// <br/>```
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update webhooks" permission to use this endpoint.
        /// </remarks>
        /// <returns>Webhook created successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_WebhookConfigurationLog> NotificationPostV2WebhookAsync(Ns_WebhookConfigurationPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/webhooks"
                    urlBuilder_.Append("v2/webhooks");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_WebhookConfigurationLog>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ns_ProblemDetailErrorResponse>("Bad request. Request cannot be processed due to input Webhook payload error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of webhooks
        /// </summary>
        /// <remarks>
        /// Returns all the webhooks created for this account. Allows to filter by webhook type and active status.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View webhooks" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>Webhooks for the account returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_PaginatedResponse> NotificationGetV2WebhooksAsync(Type2? type, bool? is_active, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return NotificationGetV2WebhooksAsync(type, is_active, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of webhooks
        /// </summary>
        /// <remarks>
        /// Returns all the webhooks created for this account. Allows to filter by webhook type and active status.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View webhooks" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>Webhooks for the account returned successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_PaginatedResponse> NotificationGetV2WebhooksAsync(Type2? type, bool? is_active, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/webhooks"
                    urlBuilder_.Append("v2/webhooks");
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (is_active != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("is_active")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(is_active, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_PaginatedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Change status of a webhook
        /// </summary>
        /// <remarks>
        /// Endpoint to update the configuration of a webhook, enabling to turn it on or off.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update webhooks" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">When you create a webhook or run “Get list of Webhooks”, you’ll receive a unique configuration_identifier for each webhook. Supply that here for the webhook you wish to change.</param>
        /// <returns>Webhook updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_WebhookConfigurationLog> NotificationPatchV2WebhooksConfigurationIdentifierAsync(string configuration_identifier, Ns_UpdateWebhookPayload body)
        {
            return NotificationPatchV2WebhooksConfigurationIdentifierAsync(configuration_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change status of a webhook
        /// </summary>
        /// <remarks>
        /// Endpoint to update the configuration of a webhook, enabling to turn it on or off.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update webhooks" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">When you create a webhook or run “Get list of Webhooks”, you’ll receive a unique configuration_identifier for each webhook. Supply that here for the webhook you wish to change.</param>
        /// <returns>Webhook updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_WebhookConfigurationLog> NotificationPatchV2WebhooksConfigurationIdentifierAsync(string configuration_identifier, Ns_UpdateWebhookPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/webhooks/{configuration_identifier}"
                    urlBuilder_.Append("v2/webhooks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_WebhookConfigurationLog>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ns_ProblemDetailErrorResponse>("Bad request. Request cannot be processed due to input error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test a webhook
        /// </summary>
        /// <remarks>
        /// This is an optional test that will send an example payload to the URL you specify.
        /// <br/>
        /// <br/>Test webhook payload: 
        /// <br/>
        /// <br/>```json 
        /// <br/>{
        /// <br/>    "message": "This is a test webhook from ComplyAdvantage"
        /// <br/>}
        /// <br/> ```
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update webhooks" permission to use this endpoint.
        /// </remarks>
        /// <returns>success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ns_TestWebhookResponseLegacy> NotificationGetV2WebhooksTestAsync(Ns_WebhookTestPayload body)
        {
            return NotificationGetV2WebhooksTestAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test a webhook
        /// </summary>
        /// <remarks>
        /// This is an optional test that will send an example payload to the URL you specify.
        /// <br/>
        /// <br/>Test webhook payload: 
        /// <br/>
        /// <br/>```json 
        /// <br/>{
        /// <br/>    "message": "This is a test webhook from ComplyAdvantage"
        /// <br/>}
        /// <br/> ```
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update webhooks" permission to use this endpoint.
        /// </remarks>
        /// <returns>success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ns_TestWebhookResponseLegacy> NotificationGetV2WebhooksTestAsync(Ns_WebhookTestPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/webhooks/test"
                    urlBuilder_.Append("v2/webhooks/test");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_TestWebhookResponseLegacy>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ns_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ns_ProblemDetailErrorResponse>("Bad request. Request cannot be processed due to input error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of all exports that the requesting user attempted to create.
        /// </summary>
        /// <remarks>
        /// Calling this endpoint will return a list of all the exports that the requesting user attempted to create. It will return exports that are pending, successful and failed.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>List of exports successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Exports_PaginatedResponseExportItem> ExportsServiceListExportsAsync(int? page_number, int? page_size)
        {
            return ExportsServiceListExportsAsync(page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all exports that the requesting user attempted to create.
        /// </summary>
        /// <remarks>
        /// Calling this endpoint will return a list of all the exports that the requesting user attempted to create. It will return exports that are pending, successful and failed.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>List of exports successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Exports_PaginatedResponseExportItem> ExportsServiceListExportsAsync(int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/exports"
                    urlBuilder_.Append("v2/exports");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_PaginatedResponseExportItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Exports_ProblemDetailErrorResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new export
        /// </summary>
        /// <remarks>
        /// Create a new export by selecting an export type and a start and end date. The available export names are CUSTOMER_SCREENING, CUSTOMER, SCREENING_AND_MONITORING_CASES, PROFILES, PAYMENT_SCREENING_CASES, TRANSACTION_MONITORING_CASES_AND_ALERTS, TRANSACTIONS.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <returns>Export successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Exports_ExportItem> ExportsServiceCreateExportAsync(Exports_CreateExportPayload body)
        {
            return ExportsServiceCreateExportAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new export
        /// </summary>
        /// <remarks>
        /// Create a new export by selecting an export type and a start and end date. The available export names are CUSTOMER_SCREENING, CUSTOMER, SCREENING_AND_MONITORING_CASES, PROFILES, PAYMENT_SCREENING_CASES, TRANSACTION_MONITORING_CASES_AND_ALERTS, TRANSACTIONS.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <returns>Export successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Exports_ExportItem> ExportsServiceCreateExportAsync(Exports_CreateExportPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/exports"
                    urlBuilder_.Append("v2/exports");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_ExportItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Exports_ProblemDetailErrorResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of export types
        /// </summary>
        /// <remarks>
        /// This endpoint will return a paginated list of available exports, along with details about the data contained within each and how it can be used for analytical and reporting purposes.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>List of exports successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Exports_PaginatedResponseExportTypeKeys> ExportsServiceGetExportTypesAsync(int? page_number, int? page_size)
        {
            return ExportsServiceGetExportTypesAsync(page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of export types
        /// </summary>
        /// <remarks>
        /// This endpoint will return a paginated list of available exports, along with details about the data contained within each and how it can be used for analytical and reporting purposes.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>List of exports successfully returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Exports_PaginatedResponseExportTypeKeys> ExportsServiceGetExportTypesAsync(int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/exports/export-types"
                    urlBuilder_.Append("v2/exports/export-types");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_PaginatedResponseExportTypeKeys>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a download url for a given export.
        /// </summary>
        /// <remarks>
        /// This endpoint will return the download url for the requested export.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <param name="export_identifier">The `uuid` of the `Export`.</param>
        /// <returns>Download url for the export successfully returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Exports_DownloadExportResponseBody> ExportsServiceGetExportDownloadUrlAsync(System.Guid export_identifier)
        {
            return ExportsServiceGetExportDownloadUrlAsync(export_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a download url for a given export.
        /// </summary>
        /// <remarks>
        /// This endpoint will return the download url for the requested export.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View and download insights" permission to use this endpoint.
        /// </remarks>
        /// <param name="export_identifier">The `uuid` of the `Export`.</param>
        /// <returns>Download url for the export successfully returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Exports_DownloadExportResponseBody> ExportsServiceGetExportDownloadUrlAsync(System.Guid export_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (export_identifier == null)
                throw new System.ArgumentNullException("export_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/exports/{export_identifier}/download"
                    urlBuilder_.Append("v2/exports/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(export_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/download");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_DownloadExportResponseBody>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Exports_ProblemDetailErrorResponse>("Export not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exports_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Exports_ProblemDetailErrorResponse>("Service unavailable due to problems encountered while generating the presigned url.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get screening configurations
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of configurations with its metadata
        /// </remarks>
        /// <returns>Configurations successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Sra_ListConfigurationsResponse> EntityScreeningGetConfigurationsAsync()
        {
            return EntityScreeningGetConfigurationsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get screening configurations
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of configurations with its metadata
        /// </remarks>
        /// <returns>Configurations successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Sra_ListConfigurationsResponse> EntityScreeningGetConfigurationsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/entity-screening/configurations"
                    urlBuilder_.Append("v2/entity-screening/configurations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ListConfigurationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Sra_ProblemDetailErrorResponse>("No configurations found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create screening configuration
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new screening configuration
        /// </remarks>
        /// <returns>Configuration successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Sra_ScreeningConfiguration> EntityScreeningCreateConfigurationAsync(Sra_CreateConfigurationRequest body)
        {
            return EntityScreeningCreateConfigurationAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create screening configuration
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new screening configuration
        /// </remarks>
        /// <returns>Configuration successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Sra_ScreeningConfiguration> EntityScreeningCreateConfigurationAsync(Sra_CreateConfigurationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/entity-screening/configurations"
                    urlBuilder_.Append("v2/entity-screening/configurations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ScreeningConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Sra_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update screening configuration
        /// </summary>
        /// <remarks>
        /// This endpoint updates a screening configuration details
        /// </remarks>
        /// <param name="configuration_identifier">The unique configuration identifier</param>
        /// <returns>Configuration successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Sra_ScreeningConfiguration> EntityScreeningUpdateConfigurationAsync(System.Guid configuration_identifier, Sra_UpdateConfigurationRequest body)
        {
            return EntityScreeningUpdateConfigurationAsync(configuration_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update screening configuration
        /// </summary>
        /// <remarks>
        /// This endpoint updates a screening configuration details
        /// </remarks>
        /// <param name="configuration_identifier">The unique configuration identifier</param>
        /// <returns>Configuration successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Sra_ScreeningConfiguration> EntityScreeningUpdateConfigurationAsync(System.Guid configuration_identifier, Sra_UpdateConfigurationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/entity-screening/configurations/{configuration_identifier}"
                    urlBuilder_.Append("v2/entity-screening/configurations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ScreeningConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Sra_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get screening configuration versions
        /// </summary>
        /// <remarks>
        /// This endpoint returns all versions of a screening configuration
        /// </remarks>
        /// <param name="configuration_identifier">The unique configuration identifier</param>
        /// <returns>Configuration versions successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Sra_ListConfigurationVersionsResponse> EntityScreeningGetConfigurationVersionsAsync(System.Guid configuration_identifier)
        {
            return EntityScreeningGetConfigurationVersionsAsync(configuration_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get screening configuration versions
        /// </summary>
        /// <remarks>
        /// This endpoint returns all versions of a screening configuration
        /// </remarks>
        /// <param name="configuration_identifier">The unique configuration identifier</param>
        /// <returns>Configuration versions successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Sra_ListConfigurationVersionsResponse> EntityScreeningGetConfigurationVersionsAsync(System.Guid configuration_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/entity-screening/configurations/{configuration_identifier}/versions"
                    urlBuilder_.Append("v2/entity-screening/configurations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ListConfigurationVersionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Sra_ProblemDetailErrorResponse>("No configuration versions found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a screening configuration version
        /// </summary>
        /// <remarks>
        /// This endpoint returns a version of a configuration with its metadata
        /// </remarks>
        /// <param name="configuration_identifier">The unique configuration identifier</param>
        /// <param name="version_identifier">Configuration version identifier. Setting configuration version to 0 returns the latest version</param>
        /// <returns>Configuration successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Sra_ScreeningConfiguration> EntityScreeningGetConfigurationVersionAsync(System.Guid configuration_identifier, int version_identifier)
        {
            return EntityScreeningGetConfigurationVersionAsync(configuration_identifier, version_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a screening configuration version
        /// </summary>
        /// <remarks>
        /// This endpoint returns a version of a configuration with its metadata
        /// </remarks>
        /// <param name="configuration_identifier">The unique configuration identifier</param>
        /// <param name="version_identifier">Configuration version identifier. Setting configuration version to 0 returns the latest version</param>
        /// <returns>Configuration successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Sra_ScreeningConfiguration> EntityScreeningGetConfigurationVersionAsync(System.Guid configuration_identifier, int version_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            if (version_identifier == null)
                throw new System.ArgumentNullException("version_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/entity-screening/configurations/{configuration_identifier}/versions/{version_identifier}"
                    urlBuilder_.Append("v2/entity-screening/configurations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ScreeningConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Sra_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Sra_ProblemDetailErrorResponse>("No configuration version found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the states for all batch processes
        /// </summary>
        /// <remarks>
        /// This endpoint will return a list of all batch processes that have been initiated, including their `identifiers`, status and errors.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <param name="workflow_type">The workflow type for the batch process</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Bulk_PaginatedResponseBatch> BulkUploaderGetAllV2BatchProcessingAsync(int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Collections.Generic.IEnumerable<Anonymous7> status, System.Collections.Generic.IEnumerable<System.Guid> created_by, Workflow_type workflow_type)
        {
            return BulkUploaderGetAllV2BatchProcessingAsync(page_number, page_size, sort, status, created_by, workflow_type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the states for all batch processes
        /// </summary>
        /// <remarks>
        /// This endpoint will return a list of all batch processes that have been initiated, including their `identifiers`, status and errors.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <param name="workflow_type">The workflow type for the batch process</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Bulk_PaginatedResponseBatch> BulkUploaderGetAllV2BatchProcessingAsync(int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Collections.Generic.IEnumerable<Anonymous7> status, System.Collections.Generic.IEnumerable<System.Guid> created_by, Workflow_type workflow_type, System.Threading.CancellationToken cancellationToken)
        {
            if (workflow_type == null)
                throw new System.ArgumentNullException("workflow_type");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/batch-processing"
                    urlBuilder_.Append("v2/batch-processing");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (status != null)
                    {
                            foreach (var item_ in status) { urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (created_by != null)
                    {
                            foreach (var item_ in created_by) { urlBuilder_.Append(System.Uri.EscapeDataString("created_by")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("workflow_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(workflow_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Bulk_PaginatedResponseBatch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Initiate a batch-process
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a batch process asynchronously for a given workflow type.
        /// <br/>
        /// <br/>The response will return an `identifier` that can be used to retrieve the file processing status by polling GET /v2/batch-processing/{identifier}.
        /// <br/>
        /// <br/>The workflow types available are:
        /// <br/>
        /// <br/>1. **Create and screen a batch of customers**
        /// <br/>
        /// <br/>This workflow will initiate all of the steps in the ['Create and screen customer asynchronously'](https://docs.mesh.complyadvantage.com/reference/createcustomerandscreenasync) for each of the customers in your file.
        /// <br/>
        /// <br/>The response will include an `identifier` that can be used to check the status of the batch process,as well as any validation errors that have caused the file to not be processed.
        /// <br/>
        /// <br/>To invoke 'create-and-screen' workflow, you need "Access to base customer screening functionality" enabled and the "Create and screen customers" permission.
        /// <br/>To invoke 'create-and-monitor' workflow, you need "Access to base transaction monitoring functionality" enabled.
        /// </remarks>
        /// <param name="workflow_type">The workflow type for the batch process</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Bulk_Batch> BulkUploaderPostV2BatchProcessingAsync(FileParameter file, Workflow_type2? workflow_type)
        {
            return BulkUploaderPostV2BatchProcessingAsync(file, workflow_type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Initiate a batch-process
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a batch process asynchronously for a given workflow type.
        /// <br/>
        /// <br/>The response will return an `identifier` that can be used to retrieve the file processing status by polling GET /v2/batch-processing/{identifier}.
        /// <br/>
        /// <br/>The workflow types available are:
        /// <br/>
        /// <br/>1. **Create and screen a batch of customers**
        /// <br/>
        /// <br/>This workflow will initiate all of the steps in the ['Create and screen customer asynchronously'](https://docs.mesh.complyadvantage.com/reference/createcustomerandscreenasync) for each of the customers in your file.
        /// <br/>
        /// <br/>The response will include an `identifier` that can be used to check the status of the batch process,as well as any validation errors that have caused the file to not be processed.
        /// <br/>
        /// <br/>To invoke 'create-and-screen' workflow, you need "Access to base customer screening functionality" enabled and the "Create and screen customers" permission.
        /// <br/>To invoke 'create-and-monitor' workflow, you need "Access to base transaction monitoring functionality" enabled.
        /// </remarks>
        /// <param name="workflow_type">The workflow type for the batch process</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Bulk_Batch> BulkUploaderPostV2BatchProcessingAsync(FileParameter file, Workflow_type2? workflow_type, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }

                    if (workflow_type == null)
                        throw new System.ArgumentNullException("workflow_type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(workflow_type, System.Globalization.CultureInfo.InvariantCulture)), "workflow_type");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/batch-processing"
                    urlBuilder_.Append("v2/batch-processing");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Bulk_Batch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a batch process
        /// </summary>
        /// <remarks>
        /// Given an `identifier`, this endpoint will delete a file that has failed validation. Files that were successful cannot be deleted using this endpoint.
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and screen customers" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Bulk_DeletedBatch> BulkUploaderDeleteV2BatchProcessingAsync(System.Guid identifier)
        {
            return BulkUploaderDeleteV2BatchProcessingAsync(identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a batch process
        /// </summary>
        /// <remarks>
        /// Given an `identifier`, this endpoint will delete a file that has failed validation. Files that were successful cannot be deleted using this endpoint.
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and screen customers" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Bulk_DeletedBatch> BulkUploaderDeleteV2BatchProcessingAsync(System.Guid identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/batch-processing/{identifier}"
                    urlBuilder_.Append("v2/batch-processing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Bulk_DeletedBatch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the state for a single batch process
        /// </summary>
        /// <remarks>
        /// Given an `identifier`, this endpoint will return the status for a single batch process.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Bulk_Batch> BulkUploaderGetV2BatchProcessingAsync(System.Guid identifier)
        {
            return BulkUploaderGetV2BatchProcessingAsync(identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the state for a single batch process
        /// </summary>
        /// <remarks>
        /// Given an `identifier`, this endpoint will return the status for a single batch process.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Bulk_Batch> BulkUploaderGetV2BatchProcessingAsync(System.Guid identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/batch-processing/{identifier}"
                    urlBuilder_.Append("v2/batch-processing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Bulk_Batch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download a summary report
        /// </summary>
        /// <remarks>
        /// This endpoint returns a URL to download a CSV report for batch upload processes where one or more customers failed to be processed.
        /// <br/>
        /// <br/> Use the batch process identifier in the request in order to access the report URL.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Bulk_BatchReport> BulkUploaderDownloadReportV2BatchProcessingAsync(System.Guid identifier)
        {
            return BulkUploaderDownloadReportV2BatchProcessingAsync(identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download a summary report
        /// </summary>
        /// <remarks>
        /// This endpoint returns a URL to download a CSV report for batch upload processes where one or more customers failed to be processed.
        /// <br/>
        /// <br/> Use the batch process identifier in the request in order to access the report URL.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Bulk_BatchReport> BulkUploaderDownloadReportV2BatchProcessingAsync(System.Guid identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/batch-processing/{identifier}/report"
                    urlBuilder_.Append("v2/batch-processing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/report");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Bulk_BatchReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get payment screening configurations
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all payment screening configurations with their metadata
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against and the fuzziness that should be applied to the search. You can create multiple configurations in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ps_ConfigurationSummariesResponse> PaymentScreeningFetchConfigurationSummariesAsync()
        {
            return PaymentScreeningFetchConfigurationSummariesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get payment screening configurations
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all payment screening configurations with their metadata
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against and the fuzziness that should be applied to the search. You can create multiple configurations in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ps_ConfigurationSummariesResponse> PaymentScreeningFetchConfigurationSummariesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/payment-screening/configurations"
                    urlBuilder_.Append("v2/payment-screening/configurations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ConfigurationSummariesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create payment screening configuration
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new payment screening configuration.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against and the settings to apply to the search. You can create multiple configurations in your account and each configuration can have multiple versions.
        /// <br/>
        /// <br/>Within the configuration are one or more source collections. A source collection contains:
        /// <br/>
        /// <br/>* The sanctions lists you wish to screen against 
        /// <br/>* A global fuzziness score (a spectrum with 0 as exact search, 100 as very broad search) 
        /// <br/>* Name search options:
        /// <br/>    * Name fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* Reference text search options:
        /// <br/>    * Reference text fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* BIC search strictness    
        /// <br/>    
        /// <br/>In addition, you can choose to omit your customer from the screening.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ps_CreateConfigurationResponse> PaymentScreeningCreateConfigurationAsync(Ps_CreateConfigurationRequest body)
        {
            return PaymentScreeningCreateConfigurationAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create payment screening configuration
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new payment screening configuration.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against and the settings to apply to the search. You can create multiple configurations in your account and each configuration can have multiple versions.
        /// <br/>
        /// <br/>Within the configuration are one or more source collections. A source collection contains:
        /// <br/>
        /// <br/>* The sanctions lists you wish to screen against 
        /// <br/>* A global fuzziness score (a spectrum with 0 as exact search, 100 as very broad search) 
        /// <br/>* Name search options:
        /// <br/>    * Name fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* Reference text search options:
        /// <br/>    * Reference text fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* BIC search strictness    
        /// <br/>    
        /// <br/>In addition, you can choose to omit your customer from the screening.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ps_CreateConfigurationResponse> PaymentScreeningCreateConfigurationAsync(Ps_CreateConfigurationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/payment-screening/configurations"
                    urlBuilder_.Append("v2/payment-screening/configurations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_CreateConfigurationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve latest payment screening configuration by id
        /// </summary>
        /// <remarks>
        /// This endpoint provides full details of the latest version of the payment screening configuration specified by the configuration ID.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against, and the fuzziness that should be applied to the search. You can create multiple of these in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ps_ConfigurationDetail> PaymentScreeningFetchLatestConfigurationAsync(System.Guid configuration_identifier)
        {
            return PaymentScreeningFetchLatestConfigurationAsync(configuration_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve latest payment screening configuration by id
        /// </summary>
        /// <remarks>
        /// This endpoint provides full details of the latest version of the payment screening configuration specified by the configuration ID.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against, and the fuzziness that should be applied to the search. You can create multiple of these in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ps_ConfigurationDetail> PaymentScreeningFetchLatestConfigurationAsync(System.Guid configuration_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/payment-screening/configurations/{configuration_identifier}"
                    urlBuilder_.Append("v2/payment-screening/configurations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ConfigurationDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ps_ProblemDetailErrorResponse>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new version of a configuration
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new version of a payment screening configuration.
        /// <br/>
        /// <br/>Specify the details of the new version, as you would when creating a new configuration. The new version will be created with an incremented version number.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against and the settings to apply to the search. You can create multiple configurations in your account and each configuration can have multiple versions.
        /// <br/>
        /// <br/>Within the configuration are one or more source collections. A source collection contains:
        /// <br/>
        /// <br/>* The sanctions lists you wish to screen against
        /// <br/>* A global fuzziness score (a spectrum with 0 as exact search, 100 as very broad search) 
        /// <br/>* Name search options:
        /// <br/>    * Name fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* Reference text search options:
        /// <br/>    * Reference text fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* BIC search strictness
        /// <br/>
        /// <br/>In addition, you can choose to omit your customer from the screening.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ps_UpdateConfigurationResponse> PaymentScreeningUpdateConfigurationAsync(System.Guid configuration_identifier, Ps_UpdateConfigurationRequest body)
        {
            return PaymentScreeningUpdateConfigurationAsync(configuration_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new version of a configuration
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new version of a payment screening configuration.
        /// <br/>
        /// <br/>Specify the details of the new version, as you would when creating a new configuration. The new version will be created with an incremented version number.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against and the settings to apply to the search. You can create multiple configurations in your account and each configuration can have multiple versions.
        /// <br/>
        /// <br/>Within the configuration are one or more source collections. A source collection contains:
        /// <br/>
        /// <br/>* The sanctions lists you wish to screen against
        /// <br/>* A global fuzziness score (a spectrum with 0 as exact search, 100 as very broad search) 
        /// <br/>* Name search options:
        /// <br/>    * Name fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* Reference text search options:
        /// <br/>    * Reference text fuzziness score that, if present, overrides the global fuzziness
        /// <br/>    * Search options
        /// <br/>* BIC search strictness
        /// <br/>
        /// <br/>In addition, you can choose to omit your customer from the screening.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ps_UpdateConfigurationResponse> PaymentScreeningUpdateConfigurationAsync(System.Guid configuration_identifier, Ps_UpdateConfigurationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/payment-screening/configurations/{configuration_identifier}"
                    urlBuilder_.Append("v2/payment-screening/configurations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_UpdateConfigurationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ps_ProblemDetailErrorResponse>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get payment screening configuration versions
        /// </summary>
        /// <remarks>
        /// This endpoint returns all versions of a screening configuration.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against, and the fuzziness that should be applied to the search. You can create multiple of these in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ps_ConfigurationVersions> PaymentScreeningFetchConfigurationVersionsAsync(System.Guid configuration_identifier)
        {
            return PaymentScreeningFetchConfigurationVersionsAsync(configuration_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get payment screening configuration versions
        /// </summary>
        /// <remarks>
        /// This endpoint returns all versions of a screening configuration.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against, and the fuzziness that should be applied to the search. You can create multiple of these in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ps_ConfigurationVersions> PaymentScreeningFetchConfigurationVersionsAsync(System.Guid configuration_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/payment-screening/configurations/{configuration_identifier}/versions"
                    urlBuilder_.Append("v2/payment-screening/configurations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ConfigurationVersions>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ps_ProblemDetailErrorResponse>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a payment screening configuration version
        /// </summary>
        /// <remarks>
        /// This endpoint returns a version of a payment screening configuration with its metadata.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against, and the fuzziness that should be applied to the search. You can create multiple of these in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <param name="version_identifier">configuration version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ps_ConfigurationDetail> PaymentScreeningFetchConfigurationByVersionAsync(System.Guid configuration_identifier, int version_identifier)
        {
            return PaymentScreeningFetchConfigurationByVersionAsync(configuration_identifier, version_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a payment screening configuration version
        /// </summary>
        /// <remarks>
        /// This endpoint returns a version of a payment screening configuration with its metadata.
        /// <br/>
        /// <br/>Payment screening configurations define which lists a transaction will be screened against, and the fuzziness that should be applied to the search. You can create multiple of these in your account. Each payment screening configuration can have multiple versions.
        /// <br/>        
        /// <br/>
        /// <br/>
        /// <br/>You need the "Access to base payment screening functionality" permission to use this endpoint.
        /// </remarks>
        /// <param name="configuration_identifier">configuration ID</param>
        /// <param name="version_identifier">configuration version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ps_ConfigurationDetail> PaymentScreeningFetchConfigurationByVersionAsync(System.Guid configuration_identifier, int version_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (configuration_identifier == null)
                throw new System.ArgumentNullException("configuration_identifier");

            if (version_identifier == null)
                throw new System.ArgumentNullException("version_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/payment-screening/configurations/{configuration_identifier}/versions/{version_identifier}"
                    urlBuilder_.Append("v2/payment-screening/configurations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(configuration_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ConfigurationDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ps_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Ps_ProblemDetailErrorResponse>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of labels
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve all the labels in an account. It can also be used to perform a direct search on a label identifier or name, and can be sorted by name or created at of the labels.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="name">The unique name you provided when you created the label.</param>
        /// <param name="identifier">The unique identifier we provided when you created the label.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get a list of labels</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Label_GetLabelsPaginatedResponse> LabelManagerGetLabelsListAsync(string name, string identifier, string search, int? page_number, int? page_size)
        {
            return LabelManagerGetLabelsListAsync(name, identifier, search, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of labels
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve all the labels in an account. It can also be used to perform a direct search on a label identifier or name, and can be sorted by name or created at of the labels.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View customers" permission to use this endpoint.
        /// </remarks>
        /// <param name="name">The unique name you provided when you created the label.</param>
        /// <param name="identifier">The unique identifier we provided when you created the label.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <returns>Get a list of labels</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Label_GetLabelsPaginatedResponse> LabelManagerGetLabelsListAsync(string name, string identifier, string search, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/labels"
                    urlBuilder_.Append("v2/labels");
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_GetLabelsPaginatedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Label_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Label_ProblemDetailErrorResponse>("You do not have the permissions needed to access the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create new labels
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create labels by submitting an array of label names.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update labels" permission to use this endpoint.
        /// </remarks>
        /// <returns>New labels created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Label_CreateLabelsResponse> LabelManagerCreateLabelsAsync(Label_CreateLabelsPayload body)
        {
            return LabelManagerCreateLabelsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create new labels
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create labels by submitting an array of label names.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update labels" permission to use this endpoint.
        /// </remarks>
        /// <returns>New labels created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Label_CreateLabelsResponse> LabelManagerCreateLabelsAsync(Label_CreateLabelsPayload body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/labels"
                    urlBuilder_.Append("v2/labels");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_CreateLabelsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Label_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Label_ProblemDetailErrorResponse>("You do not have the permissions needed to access the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Rename label
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to rename a label
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update labels" permission to use this endpoint.
        /// </remarks>
        /// <param name="label_identifier">The unique identifier we provided when you created the label.</param>
        /// <returns>Rename label</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Label_Label> LabelManagerRenameLabelAsync(string label_identifier, Label_UpdateLabelRequest body)
        {
            return LabelManagerRenameLabelAsync(label_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rename label
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to rename a label
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update labels" permission to use this endpoint.
        /// </remarks>
        /// <param name="label_identifier">The unique identifier we provided when you created the label.</param>
        /// <returns>Rename label</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Label_Label> LabelManagerRenameLabelAsync(string label_identifier, Label_UpdateLabelRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (label_identifier == null)
                throw new System.ArgumentNullException("label_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/labels/{label_identifier}"
                    urlBuilder_.Append("v2/labels/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(label_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_Label>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Label_ProblemDetailErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Label_ProblemDetailErrorResponse>("You do not have the permissions needed to access the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Label_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Label_ProblemDetailErrorResponse>("Label Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public MeClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get your client details
        /// </summary>
        /// <remarks>
        /// Returns your client details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_ClientData> GetMyClientAsync()
        {
            return GetMyClientAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get your client details
        /// </summary>
        /// <remarks>
        /// Returns your client details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_ClientData> GetMyClientAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/clients/me"
                    urlBuilder_.Append("v2/clients/me");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_ClientData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get details about your account
        /// </summary>
        /// <remarks>
        /// Returns details about your account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_AccountData> GetMyAccountAsync()
        {
            return GetMyAccountAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about your account
        /// </summary>
        /// <remarks>
        /// Returns details about your account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_AccountData> GetMyAccountAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/accounts/me"
                    urlBuilder_.Append("v2/accounts/me");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_AccountData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Switch logged in account
        /// </summary>
        /// <remarks>
        /// Changes the active logged in account for your user. A new token will need to be generated to authenticate subsequent requests.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateUserAccountMetadataAsync(Identity_AccountSwitchRequestBody body)
        {
            return UpdateUserAccountMetadataAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Switch logged in account
        /// </summary>
        /// <remarks>
        /// Changes the active logged in account for your user. A new token will need to be generated to authenticate subsequent requests.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateUserAccountMetadataAsync(Identity_AccountSwitchRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/accounts/me"
                    urlBuilder_.Append("v2/accounts/me");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get details about your user
        /// </summary>
        /// <remarks>
        /// Returns details about your user.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_OwnUserResponse> GetMyUserAsync()
        {
            return GetMyUserAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about your user
        /// </summary>
        /// <remarks>
        /// Returns details about your user.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_OwnUserResponse> GetMyUserAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/me"
                    urlBuilder_.Append("v2/users/me");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_OwnUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AccountsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get list of accounts within your client
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts within your client.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View all accounts" permission to use this endpoint.
        /// </remarks>
        /// <param name="name_contains">Filter the resource by name.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_AccountsResponse> GetMyClientsAccountsAsync(string name_contains, int? page_number, int? page_size)
        {
            return GetMyClientsAccountsAsync(name_contains, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of accounts within your client
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts within your client.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View all accounts" permission to use this endpoint.
        /// </remarks>
        /// <param name="name_contains">Filter the resource by name.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_AccountsResponse> GetMyClientsAccountsAsync(string name_contains, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/clients/me/accounts"
                    urlBuilder_.Append("v2/clients/me/accounts");
                    urlBuilder_.Append('?');
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name_contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_AccountsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get accounts for your user
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for your user.
        /// </remarks>
        /// <param name="name_contains">Filter accounts by name.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_UserAccountRolesResponse> GetMyAccountsAsync(string name_contains, int? page_number, int? page_size)
        {
            return GetMyAccountsAsync(name_contains, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get accounts for your user
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for your user.
        /// </remarks>
        /// <param name="name_contains">Filter accounts by name.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_UserAccountRolesResponse> GetMyAccountsAsync(string name_contains, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/me/accounts"
                    urlBuilder_.Append("v2/users/me/accounts");
                    urlBuilder_.Append('?');
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name_contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_UserAccountRolesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get accounts for a user
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for a given user.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View users" permission to use this endpoint.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user whose accounts you'd like to retrieve.</param>
        /// <param name="name_contains">Filter user by name.</param>
        /// <param name="client_identifier">The identifier of the client whose accounts you'd like to retrieve.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_ExtendedUserAccountRolesResponse> GetSpecificUsersAccountsAsync(System.Guid user_identifier, string name_contains, System.Guid? client_identifier, int? page_number, int? page_size)
        {
            return GetSpecificUsersAccountsAsync(user_identifier, name_contains, client_identifier, page_number, page_size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get accounts for a user
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for a given user.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View users" permission to use this endpoint.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user whose accounts you'd like to retrieve.</param>
        /// <param name="name_contains">Filter user by name.</param>
        /// <param name="client_identifier">The identifier of the client whose accounts you'd like to retrieve.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_ExtendedUserAccountRolesResponse> GetSpecificUsersAccountsAsync(System.Guid user_identifier, string name_contains, System.Guid? client_identifier, int? page_number, int? page_size, System.Threading.CancellationToken cancellationToken)
        {
            if (user_identifier == null)
                throw new System.ArgumentNullException("user_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/{user_identifier}/accounts"
                    urlBuilder_.Append("v2/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts");
                    urlBuilder_.Append('?');
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name_contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (client_identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_ExtendedUserAccountRolesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsersClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public UsersClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get list of users in your account
        /// </summary>
        /// <remarks>
        /// Returns all users that belong to your account.
        /// </remarks>
        /// <param name="name_contains">Filter user by name.</param>
        /// <param name="search">Search users.</param>
        /// <param name="active">Exclude deactivated users.</param>
        /// <param name="assigned_at_from">Filter by roles assigned after the date.</param>
        /// <param name="assigned_at_to">Filter by roles assigned before the date.</param>
        /// <param name="role">Filter roles.</param>
        /// <param name="exclude_support_users">Do not include support users in the response.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_UsersResponse> GetMyAccountsUsersAsync(string name_contains, string search, bool? active, System.DateTimeOffset? assigned_at_from, System.DateTimeOffset? assigned_at_to, System.Collections.Generic.IEnumerable<string> role, bool? exclude_support_users, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<Anonymous> sort)
        {
            return GetMyAccountsUsersAsync(name_contains, search, active, assigned_at_from, assigned_at_to, role, exclude_support_users, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of users in your account
        /// </summary>
        /// <remarks>
        /// Returns all users that belong to your account.
        /// </remarks>
        /// <param name="name_contains">Filter user by name.</param>
        /// <param name="search">Search users.</param>
        /// <param name="active">Exclude deactivated users.</param>
        /// <param name="assigned_at_from">Filter by roles assigned after the date.</param>
        /// <param name="assigned_at_to">Filter by roles assigned before the date.</param>
        /// <param name="role">Filter roles.</param>
        /// <param name="exclude_support_users">Do not include support users in the response.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_UsersResponse> GetMyAccountsUsersAsync(string name_contains, string search, bool? active, System.DateTimeOffset? assigned_at_from, System.DateTimeOffset? assigned_at_to, System.Collections.Generic.IEnumerable<string> role, bool? exclude_support_users, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<Anonymous> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/accounts/me/users"
                    urlBuilder_.Append("v2/accounts/me/users");
                    urlBuilder_.Append('?');
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name_contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (active != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("active")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (assigned_at_from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("assigned_at_from")).Append('=').Append(System.Uri.EscapeDataString(assigned_at_from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (assigned_at_to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("assigned_at_to")).Append('=').Append(System.Uri.EscapeDataString(assigned_at_to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                            foreach (var item_ in role) { urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (exclude_support_users != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("exclude_support_users")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(exclude_support_users, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_UsersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user.
        /// <br/>
        /// <br/>To enable the user to access an account, they must be assigned at least one role. A user will not be sent an email invite until assigned at least one role.
        /// <br/>
        /// <br/>Follow these steps to create and configure a user: 
        /// <br/>
        /// <br/>1. **Create user:** Create the user by calling  `POST /users`.
        /// <br/>
        /// <br/>2. **Get role(s):** Use `GET /roles` to fetch the role_identifier(s) you wish to assign to the user.
        /// <br/>
        /// <br/>3. **(Optional) Get account**: If you need to assign roles for an account you're not currently logged into but within the same organization, retrieve the relevant `account_identifier` using `GET clients/me/accounts`.
        /// <br/>
        /// <br/>4. **Assign user role**: Use `POST /users/{user_identifier}/roles` to assign the user to an account with a list of `role_identifier(s)` and optionally the `account_identifier` if applicable.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update users" permission to use this endpoint.
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_AnyUserResponse> CreateUserAsync(Identity_UserRequestBody body)
        {
            return CreateUserAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user.
        /// <br/>
        /// <br/>To enable the user to access an account, they must be assigned at least one role. A user will not be sent an email invite until assigned at least one role.
        /// <br/>
        /// <br/>Follow these steps to create and configure a user: 
        /// <br/>
        /// <br/>1. **Create user:** Create the user by calling  `POST /users`.
        /// <br/>
        /// <br/>2. **Get role(s):** Use `GET /roles` to fetch the role_identifier(s) you wish to assign to the user.
        /// <br/>
        /// <br/>3. **(Optional) Get account**: If you need to assign roles for an account you're not currently logged into but within the same organization, retrieve the relevant `account_identifier` using `GET clients/me/accounts`.
        /// <br/>
        /// <br/>4. **Assign user role**: Use `POST /users/{user_identifier}/roles` to assign the user to an account with a list of `role_identifier(s)` and optionally the `account_identifier` if applicable.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update users" permission to use this endpoint.
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_AnyUserResponse> CreateUserAsync(Identity_UserRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users"
                    urlBuilder_.Append("v2/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_AnyUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Identity_ProblemDetailErrorResponse>("Invalid input", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RolesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public RolesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get list of roles
        /// </summary>
        /// <remarks>
        /// Returns a list of roles. You need the View roles in organization permission to use the account_identifier parameter.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="name_contains">Filter roles by name.</param>
        /// <param name="permissions">Filter only roles that have all of at least one set of permissions.</param>
        /// <param name="account_identifier">The identifier of the account whose roles you'd like to retrieve.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_PaginatedResponseRoleResponse> GetRolesAsync(string name_contains, System.Collections.Generic.IEnumerable<string> permissions, System.Guid? account_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<Anonymous2> sort)
        {
            return GetRolesAsync(name_contains, permissions, account_identifier, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of roles
        /// </summary>
        /// <remarks>
        /// Returns a list of roles. You need the View roles in organization permission to use the account_identifier parameter.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="name_contains">Filter roles by name.</param>
        /// <param name="permissions">Filter only roles that have all of at least one set of permissions.</param>
        /// <param name="account_identifier">The identifier of the account whose roles you'd like to retrieve.</param>
        /// <param name="page_number">The page of results returned within the response.</param>
        /// <param name="page_size">The amount of results returned within the response.</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_PaginatedResponseRoleResponse> GetRolesAsync(string name_contains, System.Collections.Generic.IEnumerable<string> permissions, System.Guid? account_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<Anonymous2> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/iam/roles"
                    urlBuilder_.Append("v2/iam/roles");
                    urlBuilder_.Append('?');
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name_contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (permissions != null)
                    {
                            foreach (var item_ in permissions) { urlBuilder_.Append(System.Uri.EscapeDataString("permissions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (account_identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("account_identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account_identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_PaginatedResponseRoleResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// You need the "Create, update, and delete roles in account" permission to use this endpoint.
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_CustomRoleWithPermissionsResponse> CreateRoleAsync(Identity_RoleRequestBody body)
        {
            return CreateRoleAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// You need the "Create, update, and delete roles in account" permission to use this endpoint.
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_CustomRoleWithPermissionsResponse> CreateRoleAsync(Identity_RoleRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/iam/roles"
                    urlBuilder_.Append("v2/iam/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_CustomRoleWithPermissionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Identity_ProblemDetailErrorResponse>("Invalid input", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign user roles
        /// </summary>
        /// <remarks>
        /// Set the roles of a user in an account.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Assign roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user who the roles will be assigned to.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_AccountUserRolesResponse> UpdateUserAccountRolesAsync(System.Guid user_identifier, Identity_AccountUserRolesRequestBody body)
        {
            return UpdateUserAccountRolesAsync(user_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign user roles
        /// </summary>
        /// <remarks>
        /// Set the roles of a user in an account.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Assign roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user who the roles will be assigned to.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_AccountUserRolesResponse> UpdateUserAccountRolesAsync(System.Guid user_identifier, Identity_AccountUserRolesRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (user_identifier == null)
                throw new System.ArgumentNullException("user_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/{user_identifier}/roles"
                    urlBuilder_.Append("v2/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_AccountUserRolesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Identity_ProblemDetailErrorResponse>("Invalid input", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentifierClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public IdentifierClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// You need the "Create, update, and delete roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="role_identifier">The identifier of the Role that you want to delete.</param>
        /// <returns>Role deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteSpecificRoleAsync(System.Guid role_identifier)
        {
            return DeleteSpecificRoleAsync(role_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// You need the "Create, update, and delete roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="role_identifier">The identifier of the Role that you want to delete.</param>
        /// <returns>Role deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSpecificRoleAsync(System.Guid role_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (role_identifier == null)
                throw new System.ArgumentNullException("role_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/iam/roles/{role_identifier}"
                    urlBuilder_.Append("v2/iam/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get details about a role
        /// </summary>
        /// <remarks>
        /// Returns details for a given role.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="role_identifier">The identifier of the role that you want to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_CustomRoleWithPermissionsResponse> GetSpecificRoleAsync(System.Guid role_identifier)
        {
            return GetSpecificRoleAsync(role_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a role
        /// </summary>
        /// <remarks>
        /// Returns details for a given role.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="role_identifier">The identifier of the role that you want to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_CustomRoleWithPermissionsResponse> GetSpecificRoleAsync(System.Guid role_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (role_identifier == null)
                throw new System.ArgumentNullException("role_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/iam/roles/{role_identifier}"
                    urlBuilder_.Append("v2/iam/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_CustomRoleWithPermissionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Partial update an existing role
        /// </summary>
        /// <remarks>
        /// You need the "Create, update, and delete roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="role_identifier">The identifier of the role that you want to update.</param>
        /// <returns>UPDATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_CustomRoleWithPermissionsResponse> UpdateAccountRoleAsync(System.Guid role_identifier, Identity_PartialUpdateRoleRequestBody body)
        {
            return UpdateAccountRoleAsync(role_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partial update an existing role
        /// </summary>
        /// <remarks>
        /// You need the "Create, update, and delete roles in account" permission to use this endpoint.
        /// </remarks>
        /// <param name="role_identifier">The identifier of the role that you want to update.</param>
        /// <returns>UPDATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_CustomRoleWithPermissionsResponse> UpdateAccountRoleAsync(System.Guid role_identifier, Identity_PartialUpdateRoleRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (role_identifier == null)
                throw new System.ArgumentNullException("role_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/iam/roles/{role_identifier}"
                    urlBuilder_.Append("v2/iam/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_CustomRoleWithPermissionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Identity_ProblemDetailErrorResponse>("Invalid input", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get details about a user
        /// </summary>
        /// <remarks>
        /// Returns details for a given user.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user that you want to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_AnyUserResponse> GetSpecificUserAsync(System.Guid user_identifier)
        {
            return GetSpecificUserAsync(user_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a user
        /// </summary>
        /// <remarks>
        /// Returns details for a given user.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user that you want to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_AnyUserResponse> GetSpecificUserAsync(System.Guid user_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (user_identifier == null)
                throw new System.ArgumentNullException("user_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/{user_identifier}"
                    urlBuilder_.Append("v2/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_AnyUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Updates details for a given user.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update users" permission to use this endpoint.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user that you want to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_AnyUserResponse> PartialUpdateUserAsync(System.Guid user_identifier, Identity_UserPartialUpdateRequestBody body)
        {
            return PartialUpdateUserAsync(user_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Updates details for a given user.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Create and update users" permission to use this endpoint.
        /// </remarks>
        /// <param name="user_identifier">The identifier of the user that you want to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_AnyUserResponse> PartialUpdateUserAsync(System.Guid user_identifier, Identity_UserPartialUpdateRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (user_identifier == null)
                throw new System.ArgumentNullException("user_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/{user_identifier}"
                    urlBuilder_.Append("v2/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_AnyUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PermissionsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get permissions for your user
        /// </summary>
        /// <remarks>
        /// Returns your permissions.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_PermissionListResponse> GetMyPermissionsAsync()
        {
            return GetMyPermissionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permissions for your user
        /// </summary>
        /// <remarks>
        /// Returns your permissions.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_PermissionListResponse> GetMyPermissionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/me/permissions"
                    urlBuilder_.Append("v2/users/me/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_PermissionListResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public BulkClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Bulk assign user roles
        /// </summary>
        /// <remarks>
        /// Set the roles for a list of users in an account.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Assign roles in account" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity_BulkAccountUserRolesResponse> BulkUpdateUserAccountRolesAsync(Identity_BulkAccountUserRolesRequestBody body)
        {
            return BulkUpdateUserAccountRolesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk assign user roles
        /// </summary>
        /// <remarks>
        /// Set the roles for a list of users in an account.
        /// <br/>
        /// <br/>
        /// <br/>You need the "Assign roles in account" permission to use this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity_BulkAccountUserRolesResponse> BulkUpdateUserAccountRolesAsync(Identity_BulkAccountUserRolesRequestBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/users/roles/bulk"
                    urlBuilder_.Append("v2/users/roles/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity_BulkAccountUserRolesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CasesService_v2_customers_customerClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CasesService_v2_customers_customerClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Retrieve cases for a customer
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of cases associated with a customer.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier of the customer.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseResponse> Identifier_cases_getAsync(System.Guid customer_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return Identifier_cases_getAsync(customer_identifier, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve cases for a customer
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of cases associated with a customer.
        /// </remarks>
        /// <param name="customer_identifier">The unique identifier of the customer.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseResponse> Identifier_cases_getAsync(System.Guid customer_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (customer_identifier == null)
                throw new System.ArgumentNullException("customer_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/customers/{customer_identifier}/cases"
                    urlBuilder_.Append("v2/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customer_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cases");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_PaginatedResponseCaseResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CasesService_v2_cases_caseClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CasesService_v2_cases_caseClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get a specific case
        /// </summary>
        /// <remarks>
        /// This endpoint returns a single case by ID.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_CaseResponse> Identifier_getAsync(System.Guid case_identifier)
        {
            return Identifier_getAsync(case_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific case
        /// </summary>
        /// <remarks>
        /// This endpoint returns a single case by ID.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_CaseResponse> Identifier_getAsync(System.Guid case_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (case_identifier == null)
                throw new System.ArgumentNullException("case_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/{case_identifier}"
                    urlBuilder_.Append("v2/cases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(case_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_CaseResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve the alerts for a case
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of alerts associated with a case.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseAlertResponseV2> Identifier_alerts_getAsync(System.Guid case_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return Identifier_alerts_getAsync(case_identifier, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve the alerts for a case
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of alerts associated with a case.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_PaginatedResponseCaseAlertResponseV2> Identifier_alerts_getAsync(System.Guid case_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (case_identifier == null)
                throw new System.ArgumentNullException("case_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/{case_identifier}/alerts"
                    urlBuilder_.Append("v2/cases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(case_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/alerts");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_PaginatedResponseCaseAlertResponseV2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign a case to a user
        /// </summary>
        /// <remarks>
        /// This endpoint updates the assignee for a single case (to a new value or to null).
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_AssignedCaseResponse> Identifier_assign_postAsync(System.Guid case_identifier, CaseManagement_CaseAssignment body)
        {
            return Identifier_assign_postAsync(case_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign a case to a user
        /// </summary>
        /// <remarks>
        /// This endpoint updates the assignee for a single case (to a new value or to null).
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_AssignedCaseResponse> Identifier_assign_postAsync(System.Guid case_identifier, CaseManagement_CaseAssignment body, System.Threading.CancellationToken cancellationToken)
        {
            if (case_identifier == null)
                throw new System.ArgumentNullException("case_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/{case_identifier}/assign"
                    urlBuilder_.Append("v2/cases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(case_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_AssignedCaseResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Transition a case to a state
        /// </summary>
        /// <remarks>
        /// This endpoint transitions a case to a new stage.
        /// <br/>
        /// <br/>Note: 
        /// <br/>
        /// <br/> - case_state is deprecated. Please use case_stage instead.
        /// <br/>
        /// <br/> - For those already integrated using case_state, if any new case stages are added the case state response for these will be returned as USER_DEFINED
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_CaseTransitionResponse> Identifier_transition_postAsync(System.Guid case_identifier, CaseManagement_CaseStateTransitionRequest body)
        {
            return Identifier_transition_postAsync(case_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transition a case to a state
        /// </summary>
        /// <remarks>
        /// This endpoint transitions a case to a new stage.
        /// <br/>
        /// <br/>Note: 
        /// <br/>
        /// <br/> - case_state is deprecated. Please use case_stage instead.
        /// <br/>
        /// <br/> - For those already integrated using case_state, if any new case stages are added the case state response for these will be returned as USER_DEFINED
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_CaseTransitionResponse> Identifier_transition_postAsync(System.Guid case_identifier, CaseManagement_CaseStateTransitionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (case_identifier == null)
                throw new System.ArgumentNullException("case_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/{case_identifier}/transition"
                    urlBuilder_.Append("v2/cases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(case_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transition");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_CaseTransitionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_ProblemDetailErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CaseManagement_ProblemDetailErrorResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the notes on a case
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of notes associated with a case.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_PaginatedResponseNoteResponse> Identifier_notes_getAsync(System.Guid case_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return Identifier_notes_getAsync(case_identifier, page_number, page_size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the notes on a case
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of notes associated with a case.
        /// <br/>
        /// <br/>
        /// <br/>You need the "View cases" permission to use this endpoint.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <param name="page_number">One-based page index (1..N)</param>
        /// <param name="page_size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format of: `[-]property` (`-` descending modifier).
        /// <br/>
        /// <br/>* Default sort order is ascending (without `-`).
        /// <br/>
        /// <br/>* Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_PaginatedResponseNoteResponse> Identifier_notes_getAsync(System.Guid case_identifier, int? page_number, int? page_size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (case_identifier == null)
                throw new System.ArgumentNullException("case_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/{case_identifier}/notes"
                    urlBuilder_.Append("v2/cases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(case_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notes");
                    urlBuilder_.Append('?');
                    if (page_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                            foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_PaginatedResponseNoteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Leave a note on a case
        /// </summary>
        /// <remarks>
        /// Creates a note linked to a specific case.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_CaseNoteResponse> Identifier_notes_postAsync(System.Guid case_identifier, CaseManagement_CreateCaseNoteRequest body)
        {
            return Identifier_notes_postAsync(case_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Leave a note on a case
        /// </summary>
        /// <remarks>
        /// Creates a note linked to a specific case.
        /// </remarks>
        /// <param name="case_identifier">The unique identifier of the case.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_CaseNoteResponse> Identifier_notes_postAsync(System.Guid case_identifier, CaseManagement_CreateCaseNoteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (case_identifier == null)
                throw new System.ArgumentNullException("case_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/{case_identifier}/notes"
                    urlBuilder_.Append("v2/cases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(case_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_CaseNoteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CasesService_v2_cases_workflows_workflowClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CasesService_v2_cases_workflows_workflowClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.eu.mesh.complyadvantage.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get a specific case workflow
        /// </summary>
        /// <remarks>
        /// This endpoint returns the latest version of a single workflow by ID.
        /// </remarks>
        /// <param name="workflow_identifier">The unique identifier of the workflow.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_WorkflowResponse> Identifier_getAsync(System.Guid workflow_identifier)
        {
            return Identifier_getAsync(workflow_identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific case workflow
        /// </summary>
        /// <remarks>
        /// This endpoint returns the latest version of a single workflow by ID.
        /// </remarks>
        /// <param name="workflow_identifier">The unique identifier of the workflow.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_WorkflowResponse> Identifier_getAsync(System.Guid workflow_identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (workflow_identifier == null)
                throw new System.ArgumentNullException("workflow_identifier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/workflows/{workflow_identifier}"
                    urlBuilder_.Append("v2/cases/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(workflow_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_WorkflowResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a specific case workflow
        /// </summary>
        /// <remarks>
        /// This endpoint updates a single workflow by ID.
        /// <br/>
        /// <br/>Supported Operations:
        /// <br/>- Rename Stages:
        /// <br/>   - You can change the name of existing stages
        /// <br/>   - Any change in name will apply to all cases, including closed cases. Ensure the new stage name preserves the original meaning to maintain integrity in audit logs, insights, and reports
        /// <br/>   - Renaming decisions does not change their decision type
        /// <br/>- Reorder Stages:
        /// <br/>   - Stages of types Reviews and Decision can be reordered across the new display order
        /// <br/>   - Stages can only be reordered within their types
        /// <br/>
        /// <br/>- Add Stages:
        /// <br/>   - Review stage:
        /// <br/>      - a minimum of 1 review stage is needed
        /// <br/>      - a maximum of 8 review stages are allowed
        /// <br/>   - Decisions:
        /// <br/>      - a minimum of 2 decisions are needed and this should include one of each:
        /// <br/>         - positive
        /// <br/>         - negative
        /// <br/>      - a maximum of 8 decisions are allowed
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update case workflows" permission to use this endpoint.
        /// </remarks>
        /// <param name="workflow_identifier">The unique identifier of the workflow.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_WorkflowResponse> Identifier_putAsync(System.Guid workflow_identifier, CaseManagement_UpdateWorkflowRequest body)
        {
            return Identifier_putAsync(workflow_identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a specific case workflow
        /// </summary>
        /// <remarks>
        /// This endpoint updates a single workflow by ID.
        /// <br/>
        /// <br/>Supported Operations:
        /// <br/>- Rename Stages:
        /// <br/>   - You can change the name of existing stages
        /// <br/>   - Any change in name will apply to all cases, including closed cases. Ensure the new stage name preserves the original meaning to maintain integrity in audit logs, insights, and reports
        /// <br/>   - Renaming decisions does not change their decision type
        /// <br/>- Reorder Stages:
        /// <br/>   - Stages of types Reviews and Decision can be reordered across the new display order
        /// <br/>   - Stages can only be reordered within their types
        /// <br/>
        /// <br/>- Add Stages:
        /// <br/>   - Review stage:
        /// <br/>      - a minimum of 1 review stage is needed
        /// <br/>      - a maximum of 8 review stages are allowed
        /// <br/>   - Decisions:
        /// <br/>      - a minimum of 2 decisions are needed and this should include one of each:
        /// <br/>         - positive
        /// <br/>         - negative
        /// <br/>      - a maximum of 8 decisions are allowed
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/>You need the "Update case workflows" permission to use this endpoint.
        /// </remarks>
        /// <param name="workflow_identifier">The unique identifier of the workflow.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_WorkflowResponse> Identifier_putAsync(System.Guid workflow_identifier, CaseManagement_UpdateWorkflowRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (workflow_identifier == null)
                throw new System.ArgumentNullException("workflow_identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/workflows/{workflow_identifier}"
                    urlBuilder_.Append("v2/cases/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(workflow_identifier, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_WorkflowResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a specific version of a case workflow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a specific version of a single workflow by ID.
        /// </remarks>
        /// <param name="workflow_identifier">The unique identifier of the workflow.</param>
        /// <param name="version">The version of the workflow.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CaseManagement_WorkflowResponse> Identifier_versions_version_getAsync(System.Guid workflow_identifier, int version)
        {
            return Identifier_versions_version_getAsync(workflow_identifier, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific version of a case workflow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a specific version of a single workflow by ID.
        /// </remarks>
        /// <param name="workflow_identifier">The unique identifier of the workflow.</param>
        /// <param name="version">The version of the workflow.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaseManagement_WorkflowResponse> Identifier_versions_version_getAsync(System.Guid workflow_identifier, int version, System.Threading.CancellationToken cancellationToken)
        {
            if (workflow_identifier == null)
                throw new System.ArgumentNullException("workflow_identifier");

            if (version == null)
                throw new System.ArgumentNullException("version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/cases/workflows/{workflow_identifier}/versions/{version}"
                    urlBuilder_.Append("v2/cases/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(workflow_identifier, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseManagement_WorkflowResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenCreateRequestBody
    {

        /// <summary>
        /// The username (email address) of the API user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// The password of the API user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>
        /// This will have been provided by ComplyAdvantage at onboarding.  Note this is case sensitive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realm", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Realm { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenCreateResponseData
    {

        /// <summary>
        /// The generated token that should be included in the authorization header of each call (`Authorization: Bearer {access_token}`)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Access_token { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TokenCreateResponseDataScope Scope { get; set; }

        /// <summary>
        /// The number of seconds until the token expires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires_in", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Expires_in { get; set; }

        [Newtonsoft.Json.JsonProperty("token_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TokenCreateResponseDataToken_type Token_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_Address
    {

        [Newtonsoft.Json.JsonProperty("address_line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Address_line1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address_line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Address_line2 { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_AddressCountry? Country { get; set; }

        [Newtonsoft.Json.JsonProperty("country_subdivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Country_subdivision { get; set; }

        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Postal_code { get; set; }

        [Newtonsoft.Json.JsonProperty("town_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Town_name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_AddressType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_AlertStep
    {

        [Newtonsoft.Json.JsonProperty("alert_skipped_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_AlertStepAlert_skipped_code? Alert_skipped_code { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_AlertingStepOutput
    {

        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Ol_AlertStep> Alerts { get; set; } = new System.Collections.ObjectModel.Collection<Ol_AlertStep>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_AsyncWorkflowResponse
    {

        [Newtonsoft.Json.JsonProperty("workflow_instance_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Workflow_instance_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_Bank
    {

        [Newtonsoft.Json.JsonProperty("bic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string Bic { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_BankAccount
    {

        [Newtonsoft.Json.JsonProperty("account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string Account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("bank", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Bank Bank { get; set; }

        [Newtonsoft.Json.JsonProperty("bban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Bban { get; set; }

        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }

        [Newtonsoft.Json.JsonProperty("sort_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string Sort_code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CaseCreationStepOutput
    {

        [Newtonsoft.Json.JsonProperty("case_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Case_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_Company
    {

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ol_Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("company_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Company_type { get; set; }

        [Newtonsoft.Json.JsonProperty("incorporation_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Date Incorporation_date { get; set; }

        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Industry { get; set; }

        [Newtonsoft.Json.JsonProperty("legal_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Legal_name { get; set; }

        [Newtonsoft.Json.JsonProperty("place_of_registration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 2)]
        public string Place_of_registration { get; set; }

        [Newtonsoft.Json.JsonProperty("registration_authority_identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Registration_authority_identification { get; set; }

        [Newtonsoft.Json.JsonProperty("source_of_income", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Source_of_income { get; set; }

        [Newtonsoft.Json.JsonProperty("status_summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_CompanyStatus_summary? Status_summary { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_ContactInformation
    {

        [Newtonsoft.Json.JsonProperty("email_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Email_address { get; set; }

        [Newtonsoft.Json.JsonProperty("fax_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fax_number { get; set; }

        [Newtonsoft.Json.JsonProperty("phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Phone_number { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Create and screen customer synchronously
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CreateAndScreenCustomerRequest
    {

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ol_CustomerConfigData Configuration { get; set; } = new Ol_CustomerConfigData();

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ol_CustomerApi Customer { get; set; } = new Ol_CustomerApi();

        [Newtonsoft.Json.JsonProperty("monitoring", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_CustomerMonitoringData Monitoring { get; set; }

        /// <summary>
        /// Represents a list of products. They can be either a bank account or a crypto wallet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ol_ProductApi> Product { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CryptoWallet
    {

        [Newtonsoft.Json.JsonProperty("managing_exchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Managing_exchange { get; set; }

        [Newtonsoft.Json.JsonProperty("wallet_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Wallet_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer to be created and screened. It can be either a person, a company or undefined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerApi
    {

        [Newtonsoft.Json.JsonProperty("acquisition_source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Acquisition_source { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Company Company { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_since", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Date Customer_since { get; set; }

        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Person Person { get; set; }

        [Newtonsoft.Json.JsonProperty("undefined", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_CustomerTypeUndefined Undefined { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Represents monitoring and screening configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerConfigData
    {

        /// <summary>
        /// The identifier of the monitoring configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monitoring_configuration_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public System.Guid? Monitoring_configuration_identifier { get; set; }

        /// <summary>
        /// The identifier of the screening configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screening_configuration_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Screening_configuration_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerCreationStepOutput
    {

        [Newtonsoft.Json.JsonProperty("customer_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Customer_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerEntityScreeningMonitoring
    {

        /// <summary>
        /// The identifier of the screening monitor configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Represents monitoring configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerMonitoringData
    {

        [Newtonsoft.Json.JsonProperty("entity_screening", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_CustomerEntityScreeningMonitoring Entity_screening { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerScreeningStepOutput
    {

        [Newtonsoft.Json.JsonProperty("aml_types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Aml_types> Aml_types { get; set; }

        [Newtonsoft.Json.JsonProperty("screening_result", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Screening_result Screening_result { get; set; } = new Screening_result();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerTypeUndefined
    {

        [Newtonsoft.Json.JsonProperty("birth_year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Birth_year { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Country> Country { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_CustomerUpdateStepOutput
    {

        [Newtonsoft.Json.JsonProperty("customer_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Customer_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_version", Required = Newtonsoft.Json.Required.Always)]
        public int Customer_version { get; set; }

        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_Date
    {

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Day { get; set; }

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month { get; set; }

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_DecisionStepOutput
    {

        [Newtonsoft.Json.JsonProperty("decision", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_DecisionStepOutputDecision Decision { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_EmptyStepOutput
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_FullRiskScoringStepOutput
    {

        [Newtonsoft.Json.JsonProperty("overall_level", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_FullRiskScoringStepOutputOverall_level Overall_level { get; set; }

        [Newtonsoft.Json.JsonProperty("overall_value", Required = Newtonsoft.Json.Required.Always)]
        public double Overall_value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_InBranch
    {

        [Newtonsoft.Json.JsonProperty("branch_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Branch_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_InitialRiskScoringStepOutput
    {

        [Newtonsoft.Json.JsonProperty("overall_level", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_InitialRiskScoringStepOutputOverall_level Overall_level { get; set; }

        [Newtonsoft.Json.JsonProperty("overall_value", Required = Newtonsoft.Json.Required.Always)]
        public double Overall_value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_LongRange
    {

        [Newtonsoft.Json.JsonProperty("high", Required = Newtonsoft.Json.Required.Always)]
        public long High { get; set; }

        [Newtonsoft.Json.JsonProperty("low", Required = Newtonsoft.Json.Required.Always)]
        public long Low { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_NetWorth
    {

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_NetWorthCurrency? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_OnboardingChannelApi
    {

        [Newtonsoft.Json.JsonProperty("in_branch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_InBranch In_branch { get; set; }

        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Online Online { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_Online
    {

        [Newtonsoft.Json.JsonProperty("device_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Device_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("device_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Device_type { get; set; }

        [Newtonsoft.Json.JsonProperty("ip_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip_address { get; set; }

        [Newtonsoft.Json.JsonProperty("ip_format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_OnlineIp_format? Ip_format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_Person
    {

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ol_Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact_information", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_ContactInformation Contact_information { get; set; }

        [Newtonsoft.Json.JsonProperty("country_of_birth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_PersonCountry_of_birth? Country_of_birth { get; set; }

        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Date Date_of_birth { get; set; }

        [Newtonsoft.Json.JsonProperty("fathers_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Fathers_name { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Full_name { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_PersonGender? Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Industry { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("middle_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Middle_name { get; set; }

        [Newtonsoft.Json.JsonProperty("mothers_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Mothers_name { get; set; }

        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Nationality> Nationality { get; set; }

        [Newtonsoft.Json.JsonProperty("net_worth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_NetWorth Net_worth { get; set; }

        [Newtonsoft.Json.JsonProperty("personal_identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ol_PersonalIdentification> Personal_identification { get; set; }

        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Profession { get; set; }

        [Newtonsoft.Json.JsonProperty("residential_information", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ol_ResidentialInformation> Residential_information { get; set; }

        [Newtonsoft.Json.JsonProperty("salary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Salary Salary { get; set; }

        [Newtonsoft.Json.JsonProperty("source_of_income", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Source_of_income { get; set; }

        [Newtonsoft.Json.JsonProperty("source_of_wealth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Source_of_wealth { get; set; }

        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Suffix { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_PersonalIdentification
    {

        [Newtonsoft.Json.JsonProperty("date_of_expiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Date Date_of_expiry { get; set; }

        [Newtonsoft.Json.JsonProperty("date_of_issue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Date Date_of_issue { get; set; }

        [Newtonsoft.Json.JsonProperty("issuing_country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_PersonalIdentificationIssuing_country? Issuing_country { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_PersonalIdentificationType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Represents a list of products. They can be either a bank account or a crypto wallet.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_ProductApi
    {

        [Newtonsoft.Json.JsonProperty("bank_account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_BankAccount Bank_account { get; set; }

        [Newtonsoft.Json.JsonProperty("crypto_wallet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_CryptoWallet Crypto_wallet { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_ProductApiCurrency? Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("monthly_payment_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Monthly_payment_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthly_received_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Monthly_received_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthly_transaction_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Monthly_transaction_count { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("onboarding_channel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_OnboardingChannelApi Onboarding_channel { get; set; }

        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Purpose { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_ResidentialInformation
    {

        [Newtonsoft.Json.JsonProperty("country_of_residence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_ResidentialInformationCountry_of_residence? Country_of_residence { get; set; }

        [Newtonsoft.Json.JsonProperty("residential_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_ResidentialInformationResidential_status? Residential_status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_Salary
    {

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_LongRange Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_SalaryCurrency? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_ScreeningResult
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_StepDetails
    {

        [Newtonsoft.Json.JsonProperty("error_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_message { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_StepDetailsStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("step_output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_StepOutput Step_output { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_StepOutput
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_StoredActivityStepOutput
    {

        [Newtonsoft.Json.JsonProperty("activity_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Activity_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Update and re-score customer synchronously
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_UpdateAndRescoreCustomerRequest
    {

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ol_UpdateCustomerApi Customer { get; set; } = new Ol_UpdateCustomerApi();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer to be updated and re-scored. It can be either a person, a company or undefined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_UpdateCustomerApi
    {

        [Newtonsoft.Json.JsonProperty("acquisition_source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Acquisition_source { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Company Company { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_since", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Date Customer_since { get; set; }

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_Person Person { get; set; }

        [Newtonsoft.Json.JsonProperty("undefined", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ol_CustomerTypeUndefined Undefined { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ol_WorkflowState
    {

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_WorkflowStateStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("step_details", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Ol_StepDetails> Step_details { get; set; } = new System.Collections.Generic.Dictionary<string, Ol_StepDetails>();

        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Steps> Steps { get; set; } = new System.Collections.ObjectModel.Collection<Steps>();

        [Newtonsoft.Json.JsonProperty("workflow_instance_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Workflow_instance_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("workflow_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ol_WorkflowStateWorkflow_type Workflow_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Address
    {

        [Newtonsoft.Json.JsonProperty("address_line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Address_line1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address_line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Address_line2 { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_AddressCountry? Country { get; set; }

        [Newtonsoft.Json.JsonProperty("country_subdivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Country_subdivision { get; set; }

        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Postal_code { get; set; }

        [Newtonsoft.Json.JsonProperty("town_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Town_name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_AddressType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Bank
    {

        [Newtonsoft.Json.JsonProperty("bic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string Bic { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_BankAccount : Anonymous8
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Company : Anonymous9
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CompanyForSearch
    {

        [Newtonsoft.Json.JsonProperty("legal_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Legal_name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_ContactInformation
    {

        [Newtonsoft.Json.JsonProperty("email_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Email_address { get; set; }

        [Newtonsoft.Json.JsonProperty("fax_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fax_number { get; set; }

        [Newtonsoft.Json.JsonProperty("phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Phone_number { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CryptoWallet : Anonymous10
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomerEntityScreeningMonitoring
    {

        /// <summary>
        /// The identifier of the screening monitor configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomerEntityScreeningMonitoringApi
    {

        /// <summary>
        /// The identifier of the screening monitor configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomerForSearch
    {

        [Newtonsoft.Json.JsonProperty("acquisition_source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Acquisition_source { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_CompanyForSearch Company { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Customer_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("monitor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_MonitorStatus Monitor { get; set; }

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_PersonForSearch Person { get; set; }

        [Newtonsoft.Json.JsonProperty("scores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_RiskScore Scores { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_CustomerForSearchStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("undefined_customer_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_UndefinedForSearch Undefined_customer_type { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomerMonitoringData
    {

        [Newtonsoft.Json.JsonProperty("entity_screening", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_CustomerEntityScreeningMonitoring Entity_screening { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomerMonitoringDataApi
    {

        [Newtonsoft.Json.JsonProperty("entity_screening", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerManager_CustomerEntityScreeningMonitoringApi Entity_screening { get; set; } = new CustomerManager_CustomerEntityScreeningMonitoringApi();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomerTypeUndefined : Anonymous11
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomerV2
    {

        [Newtonsoft.Json.JsonProperty("acquisition_source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Acquisition_source { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Company Company { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Customer_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_since", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Date Customer_since { get; set; }

        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Person Person { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_CustomerV2Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("undefined", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_CustomerTypeUndefined Undefined { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_CustomersList
    {

        [Newtonsoft.Json.JsonProperty("customers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerManager_CustomerForSearch> Customers { get; set; } = new System.Collections.ObjectModel.Collection<CustomerManager_CustomerForSearch>();

        [Newtonsoft.Json.JsonProperty("page_number", Required = Newtonsoft.Json.Required.Always)]
        public int Page_number { get; set; }

        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Always)]
        public int Page_size { get; set; }

        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Always)]
        public long Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Date
    {

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Day { get; set; }

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month { get; set; }

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_EntityScreeningStatus
    {

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_InBranch : Anonymous12
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_LabelV2
    {

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_LongRange
    {

        [Newtonsoft.Json.JsonProperty("high", Required = Newtonsoft.Json.Required.Always)]
        public long High { get; set; }

        [Newtonsoft.Json.JsonProperty("low", Required = Newtonsoft.Json.Required.Always)]
        public long Low { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_MonitorStatus
    {

        [Newtonsoft.Json.JsonProperty("entity_screening", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerManager_EntityScreeningStatus Entity_screening { get; set; } = new CustomerManager_EntityScreeningStatus();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_NetWorth
    {

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_NetWorthCurrency? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_OnboardingChannelApi
    {

        [Newtonsoft.Json.JsonProperty("in_branch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_InBranch In_branch { get; set; }

        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Online Online { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Online : Anonymous13
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_PaginatedAcquisitionSourcesV2Response
    {

        /// <summary>
        /// List of acquisition sources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acquisition_sources", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Acquisition_sources { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_PaginatedCustomerLabelsV2Response
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerManager_LabelV2> Labels { get; set; } = new System.Collections.ObjectModel.Collection<CustomerManager_LabelV2>();

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_PaginatedProductsV2Response
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerManager_ProductApi> Products { get; set; } = new System.Collections.ObjectModel.Collection<CustomerManager_ProductApi>();

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Person : Anonymous14
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_PersonForSearch
    {

        [Newtonsoft.Json.JsonProperty("fathers_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fathers_name { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("middle_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Middle_name { get; set; }

        [Newtonsoft.Json.JsonProperty("mothers_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mothers_name { get; set; }

        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_PersonalIdentification
    {

        [Newtonsoft.Json.JsonProperty("date_of_expiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Date Date_of_expiry { get; set; }

        [Newtonsoft.Json.JsonProperty("date_of_issue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Date Date_of_issue { get; set; }

        [Newtonsoft.Json.JsonProperty("issuing_country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_PersonalIdentificationIssuing_country? Issuing_country { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_PersonalIdentificationType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_ProductApi
    {

        [Newtonsoft.Json.JsonProperty("bank_account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_BankAccount Bank_account { get; set; }

        [Newtonsoft.Json.JsonProperty("crypto_wallet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_CryptoWallet Crypto_wallet { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_ProductApiCurrency? Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("monthly_payment_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Monthly_payment_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthly_received_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Monthly_received_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthly_transaction_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Monthly_transaction_count { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("onboarding_channel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_OnboardingChannelApi Onboarding_channel { get; set; }

        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Purpose { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_ResidentialInformation
    {

        [Newtonsoft.Json.JsonProperty("country_of_residence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_ResidentialInformationCountry_of_residence? Country_of_residence { get; set; }

        [Newtonsoft.Json.JsonProperty("residential_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_ResidentialInformationResidential_status? Residential_status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_RiskScore
    {

        [Newtonsoft.Json.JsonProperty("overall_result", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerManager_RiskScoreResult Overall_result { get; set; } = new CustomerManager_RiskScoreResult();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_RiskScoreResult
    {

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_RiskScoreResultLevel? Level { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Salary
    {

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_LongRange Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerManager_SalaryCurrency? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_UndefinedForSearch
    {

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManager_Unit
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_CategoryResult
    {

        [Newtonsoft.Json.JsonProperty("attribute_results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RiskScoring_ListField> Attribute_results { get; set; } = new System.Collections.ObjectModel.Collection<RiskScoring_ListField>();

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RiskScoring_CategoryResultCategory Category { get; set; }

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RiskScoring_CategoryResultLevel Level { get; set; }

        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Always)]
        public double Score { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public double Weight { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("list_field", typeof(RiskScoring_ListField))]
    [JsonInheritanceAttribute("value_field", typeof(RiskScoring_ValueField))]
    [JsonInheritanceAttribute("RiskScoring_ListField1", typeof(RiskScoring_ListField1))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_Field
    {

        [Newtonsoft.Json.JsonProperty("attribute_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Attribute_name { get; set; }

        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Always)]
        public double Score { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_ListField : RiskScoring_Field
    {

        [Newtonsoft.Json.JsonProperty("attribute_results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RiskScoring_ListField1> Attribute_results { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_ListField1 : RiskScoring_Field
    {

        [Newtonsoft.Json.JsonProperty("attribute_results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RiskScoring_ValueField> Attribute_results { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_OverallResult
    {

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RiskScoring_OverallResultLevel Level { get; set; }

        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Always)]
        public double Score { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_RiskScore
    {

        [Newtonsoft.Json.JsonProperty("account_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Account_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("category_results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RiskScoring_CategoryResult> Category_results { get; set; } = new System.Collections.ObjectModel.Collection<RiskScoring_CategoryResult>();

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Customer_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_version", Required = Newtonsoft.Json.Required.Always)]
        public int Customer_version { get; set; }

        [Newtonsoft.Json.JsonProperty("overall_result", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RiskScoring_OverallResult Overall_result { get; set; } = new RiskScoring_OverallResult();

        [Newtonsoft.Json.JsonProperty("risk_model_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Risk_model_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("risk_model_version", Required = Newtonsoft.Json.Required.Always)]
        public int Risk_model_version { get; set; }

        [Newtonsoft.Json.JsonProperty("score_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Score_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RiskScoring_RiskScoreType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskScoring_ValueField : RiskScoring_Field
    {

        [Newtonsoft.Json.JsonProperty("evaluated_parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Evaluated_parameter { get; set; }

    }

    /// <summary>
    /// Summary of alerts information, including the highest priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_AlertsSummary
    {

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }

        /// <summary>
        /// The highest priority of alerts associated with the case.
        /// <br/>
        /// <br/>Alerts priority:
        /// <br/>
        /// <br/>1-3 -&gt; High
        /// <br/>
        /// <br/>4-6 -&gt; Medium
        /// <br/>
        /// <br/>7-9 -&gt; Low
        /// <br/>
        /// <br/>`null` -&gt; No priority
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highest_priority", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 9)]
        public int? Highest_priority { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_AssignCaseBulkActionPayload
    {

        /// <summary>
        /// User identifier to whom the case should be assigned, or null to un-assign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid? Assignee { get; set; }

        /// <summary>
        /// Note: content to be associated with case assignment (optional).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5000)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Assign multiple cases (bulk action).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_AssignCasesRequest
    {

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_AssignCaseBulkActionPayload Payload { get; set; } = new CaseManagement_AssignCaseBulkActionPayload();

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_BulkActionQuery Query { get; set; } = new CaseManagement_BulkActionQuery();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Assignee case information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_AssignedCaseResponse
    {

        /// <summary>
        /// The user identifier to whom the case is assigned, or null if unassigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Assignee { get; set; }

        /// <summary>
        /// The date and time at which this case was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// The user identifier that last updated this case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Summary of payment information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_BankPaymentSummaryResponse
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An error in a bulk action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_BulkActionError
    {

        /// <summary>
        /// Detail on the particular instance of the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// Summary of the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Bulk action for adding a note to Cases.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_BulkActionPayloadNote
    {

        /// <summary>
        /// The contents of the note to be created (up to 5000 characters).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5000)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The case to be updated will be those that match the properties in this object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_BulkActionQuery
    {

        /// <summary>
        /// The unique identifier of cases to be updated in bulk action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<System.Guid> Identifier { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains all the results of a bulk action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_BulkActionResponse
    {

        /// <summary>
        /// Results of the bulk action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CaseManagement_BulkActionResult> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A single result of a bulk action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_BulkActionResult
    {

        /// <summary>
        /// Errors of bulk action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseManagement_BulkActionError> Errors { get; set; }

        /// <summary>
        /// The identifier of a case for which an update was attempted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Boolean indicating if this case was successfully updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case alert response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseAlertResponseV2
    {

        /// <summary>
        /// Alert unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Alerts priority:
        /// <br/>
        /// <br/>1-3 -&gt; High
        /// <br/>
        /// <br/>4-6 -&gt; Medium
        /// <br/>
        /// <br/>7-9 -&gt; Low
        /// <br/>
        /// <br/>`null` -&gt; No priority
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 9)]
        public int? Priority { get; set; }

        /// <summary>
        /// The sources of risk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("risk_source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseAlertResponseV2Risk_source Risk_source { get; set; }

        /// <summary>
        /// Alert state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseAlertResponseV2State State { get; set; }

        /// <summary>
        /// Alert title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// Alert type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseAlertResponseV2Type Type { get; set; }

        /// <summary>
        /// Alert last updated date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case assignment update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseAssignment
    {

        /// <summary>
        /// The user identifier to whom the case should be assigned, or null to un-assign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Assignee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Note associated to a case assignment action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseAssignmentNoteResponse
    {

        /// <summary>
        /// The contents of the note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contents { get; set; }

        /// <summary>
        /// The date and time at which this note was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The user identifier that created this note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// Current case assigned user identifier. When null, case was un-assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("current_assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Current_assignee { get; set; }

        /// <summary>
        /// Unique identifier of the note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Previous case assigned user identifier. When null, case was un-assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previous_assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Previous_assignee { get; set; }

        /// <summary>
        /// Defines the type of a note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseAssignmentNoteResponseType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer summary that is associated to a case.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseCustomerSummaryResponse
    {

        /// <summary>
        /// Customer external identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_identifier { get; set; }

        /// <summary>
        /// Customer unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Customer name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Customer current risk level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("risk_level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseCustomerSummaryResponseRisk_level? Risk_level { get; set; }

        /// <summary>
        /// Customer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseCustomerSummaryResponseType Type { get; set; }

        /// <summary>
        /// Customer version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Base note model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseNoteResponse
    {

        /// <summary>
        /// The contents of the note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contents { get; set; }

        /// <summary>
        /// The date and time at which this note was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The user identifier that created this note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// Unique identifier of the note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Defines the type of a note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseNoteResponseType2 Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case result detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseResponse
    {

        /// <summary>
        /// User unique identifier that is currently assigned to case.
        /// <br/>
        /// <br/> null if un-assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Assignee { get; set; }

        /// <summary>
        /// Case created date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseManagement_CaseCustomerSummaryResponse Customer { get; set; }

        /// <summary>
        /// Case unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("last_user_stage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseManagement_Stage Last_user_stage { get; set; }

        /// <summary>
        /// The last state the case was transitioned to by a user (as opposed to a system action).
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as  USER_DEFINED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_user_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete]
        public CaseManagement_CaseResponseLast_user_state? Last_user_state { get; set; }

        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payment Payment { get; set; }

        /// <summary>
        /// Number of items to review in case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("review_items_count", Required = Newtonsoft.Json.Required.Always)]
        public int Review_items_count { get; set; }

        /// <summary>
        /// Risk types of case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("risk_types", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_RiskTypesResponse> Risk_types { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_RiskTypesResponse>();

        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_Stage Stage { get; set; } = new CaseManagement_Stage();

        /// <summary>
        /// The current state of the case.
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as USER_DEFINED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete]
        public CaseManagement_CaseResponseState State { get; set; }

        /// <summary>
        /// Case type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseResponseType Type { get; set; }

        /// <summary>
        /// Case last updated date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Last state of case set by an user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case result detail for list endpoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseResultResponse
    {

        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_AlertsSummary Alerts { get; set; } = new CaseManagement_AlertsSummary();

        /// <summary>
        /// User identifier that is currently assigned to case.
        /// <br/>
        /// <br/> null if un-assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Assignee { get; set; }

        /// <summary>
        /// Case created date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseManagement_CaseCustomerSummaryResponse Customer { get; set; }

        /// <summary>
        /// Case unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("last_user_stage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_Stage Last_user_stage { get; set; } = new CaseManagement_Stage();

        /// <summary>
        /// The last state the case was transitioned to by a user (as opposed to a system action).
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as  USER_DEFINED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_user_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete]
        public CaseManagement_CaseResultResponseLast_user_state? Last_user_state { get; set; }

        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment Payment { get; set; } = new Payment();

        /// <summary>
        /// Number of items to review in case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("review_items_count", Required = Newtonsoft.Json.Required.Always)]
        public int Review_items_count { get; set; }

        /// <summary>
        /// Risk types of case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("risk_types", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_RiskTypesResponse> Risk_types { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_RiskTypesResponse>();

        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_Stage Stage { get; set; } = new CaseManagement_Stage();

        /// <summary>
        /// The current state of the case.
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as USER_DEFINED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete]
        public CaseManagement_CaseResultResponseState State { get; set; }

        /// <summary>
        /// Case type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseResultResponseType Type { get; set; }

        /// <summary>
        /// Case last updated date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Last state of case set by an user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case stage update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseStageTransitionRequest
    {

        /// <summary>
        /// Note: content to be associated with case transition. Only required if case transition is an end stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5000)]
        public string Note { get; set; }

        /// <summary>
        /// The stage identifier to which the case should be transitioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stage_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Stage_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case state update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class CaseManagement_CaseStateTransitionRequest
    {

        /// <summary>
        /// Note: content to be associated with case transition. Only required if case transition is an end state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5000)]
        public string Note { get; set; }

        /// <summary>
        /// Available state to transition a case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseStateTransitionRequestState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case state &amp; type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseStatesResponse
    {

        /// <summary>
        /// Case type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("case_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseStatesResponseCase_type Case_type { get; set; }

        /// <summary>
        /// The current state of the case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseStatesResponseName Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Note associated to a case state transition action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseTransitionNoteResponse
    {

        /// <summary>
        /// The contents of the note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contents { get; set; }

        /// <summary>
        /// The date and time at which this note was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The user identifier that created this note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// Unique identifier of the note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_Stage Stage { get; set; } = new CaseManagement_Stage();

        /// <summary>
        /// Available state to transition a case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete]
        public CaseManagement_CaseTransitionNoteResponseState State { get; set; }

        /// <summary>
        /// Defines the type of a note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_CaseTransitionNoteResponseType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Case transition response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CaseTransitionResponse
    {

        /// <summary>
        /// The stage identifier to which the case was last transitioned by a user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_user_stage_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Last_user_stage_identifier { get; set; }

        /// <summary>
        /// The last state the case was transitioned to by a user (as opposed to a system action).
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as  USER_DEFINED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_user_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete]
        public CaseManagement_CaseTransitionResponseLast_user_state? Last_user_state { get; set; }

        /// <summary>
        /// The stage identifier to which the case has been transitioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stage_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Stage_identifier { get; set; }

        /// <summary>
        /// The current state of the case.
        /// <br/>
        /// <br/>For those using the deprecated case_state, if any new case stages are added the case state response for these will be returned as USER_DEFINED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.Obsolete]
        public CaseManagement_CaseTransitionResponseState State { get; set; }

        /// <summary>
        /// The date and time at which this case was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// The user identifier that last updated this case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Create case note request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CreateCaseNoteRequest
    {

        /// <summary>
        /// The contents of the note to be created (up to 5000 characters).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5000)]
        public string Contents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Add note to multiple cases (bulk action).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_CreateCasesNoteRequest
    {

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_BulkActionPayloadNote Payload { get; set; } = new CaseManagement_BulkActionPayloadNote();

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_BulkActionQuery Query { get; set; } = new CaseManagement_BulkActionQuery();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The existing Stage to be updated or remain unchanged
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_ExistingStage
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The stage to be created
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_NewStage
    {

        /// <summary>
        /// The decision type of the stage (decision stages only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decision_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_NewStageDecision_type? Decision_type { get; set; }

        /// <summary>
        /// The display name of the stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 3)]
        public string Display_name { get; set; }

        /// <summary>
        /// The display order of the stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_order", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Display_order { get; set; }

        /// <summary>
        /// The type of the stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stage_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_NewStageStage_type Stage_type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_PaginatedResponseCaseAlertResponseV2
    {

        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_CaseAlertResponseV2> Alerts { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_CaseAlertResponseV2>();

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_PaginatedResponseCaseResponse
    {

        [Newtonsoft.Json.JsonProperty("cases", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_CaseResponse> Cases { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_CaseResponse>();

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_PaginatedResponseCaseResultResponse
    {

        [Newtonsoft.Json.JsonProperty("cases", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_CaseResultResponse> Cases { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_CaseResultResponse>();

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_PaginatedResponseCaseStatesResponse
    {

        [Newtonsoft.Json.JsonProperty("case_states", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_CaseStatesResponse> Case_states { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_CaseStatesResponse>();

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_PaginatedResponseNoteResponse
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Notes> Notes { get; set; } = new System.Collections.ObjectModel.Collection<Notes>();

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_PaginatedResponseWorkflowResponse
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_WorkflowResponse> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_WorkflowResponse>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Risk child.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_RiskTypesChildResponse
    {

        /// <summary>
        /// Risk child name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_RiskTypesChildResponseName Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Risk reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_RiskTypesResponse
    {

        /// <summary>
        /// Risk type children. Only PEP and ADVERSE_MEDIA risk types have child objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_RiskTypesChildResponse> Children { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_RiskTypesChildResponse>();

        /// <summary>
        /// Risk type name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_RiskTypesResponseName Name { get; set; }

        /// <summary>
        /// Risk type priority. This can be used to sort cases by priority.
        /// <br/>Priorities are:
        /// <br/>1. ADVERSE_MEDIA
        /// <br/>2. FITNESS_PROBITY
        /// <br/>3. WARNING
        /// <br/>4. PEP
        /// <br/>5. SANCTION_RELATED
        /// <br/>6. SANCTION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Stage
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_Stage
    {

        /// <summary>
        /// The decision type of the stage (decision stages only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decision_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_StageDecision_type? Decision_type { get; set; }

        /// <summary>
        /// The display name of the stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 3)]
        public string Display_name { get; set; }

        /// <summary>
        /// The display order of the stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_order", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Display_order { get; set; }

        /// <summary>
        /// Stage unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// The type of the stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stage_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_StageStage_type Stage_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_TransitionCaseBulkActionPayload
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_TransitionCaseStageBulkActionPayload
    {

        /// <summary>
        /// Note: content to be associated with case transition. Only required if case transition is an end stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5000)]
        public string Note { get; set; }

        /// <summary>
        /// The stage identifier to which the cases should be transitioned. To get this identifier for the API call, you can find it within the responses of either the 'Get list of case workflows' or 'Get a specific case workflow' endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stage_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Stage_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Bulk action for case state transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_TransitionCasesRequest
    {

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Payload Payload { get; set; } = new Payload();

        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseManagement_BulkActionQuery Query { get; set; } = new CaseManagement_BulkActionQuery();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_UpdateWorkflowRequest
    {

        [Newtonsoft.Json.JsonProperty("stages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Stages> Stages { get; set; } = new System.Collections.ObjectModel.Collection<Stages>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaseManagement_WorkflowResponse
    {

        /// <summary>
        /// The type of the case to which the workflow applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("case_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CaseManagement_WorkflowResponseCase_type Case_type { get; set; }

        /// <summary>
        /// Workflow created date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// User identifier that created the workflow; null if created by a system action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Created_by { get; set; }

        /// <summary>
        /// Workflow unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// List of all stages in the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CaseManagement_Stage> Stages { get; set; } = new System.Collections.ObjectModel.Collection<CaseManagement_Stage>();

        /// <summary>
        /// The version of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_AccountData
    {

        /// <summary>
        /// Type of the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Identity_AccountDataAccount_type Account_type { get; set; }

        /// <summary>
        /// If the account is active or deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        /// <summary>
        /// The unique identifier of the account's client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Client_identifier { get; set; }

        /// <summary>
        /// Date and time the account was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Date and time the account was deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Deactivated_at { get; set; }

        /// <summary>
        /// The unique identifier of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Name of the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Date and time the account was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_AccountSwitchRequestBody
    {

        /// <summary>
        /// The unique identifier of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Account_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_AccountUserRolesRequestBody
    {

        /// <summary>
        /// The unique identifier of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Account_identifier { get; set; }

        /// <summary>
        /// List of role identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role_identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> Role_identifiers { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_AccountUserRolesResponse
    {

        /// <summary>
        /// The unique identifier of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// List of roles within the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_UserRole> Roles { get; set; } = new System.Collections.ObjectModel.Collection<Identity_UserRole>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_AccountsResponse
    {

        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_AccountData> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<Identity_AccountData>();

        /// <summary>
        /// The url with parameters of the first page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The url with parameters of the next page, null if there are no more pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The url with parameters of the previous page, null if current page_number is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The url with parameters of the current page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_AnyUserResponse
    {

        /// <summary>
        /// If a user is active or deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        /// <summary>
        /// The unique identifier of the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Client_identifier { get; set; }

        /// <summary>
        /// Date and time the user was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The unique identifier of who created the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// Date and time the user was deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Deactivated_at { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        /// <summary>
        /// Date and time of when MFA will be enforced for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enforce_mfa_after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Enforce_mfa_after { get; set; }

        /// <summary>
        /// The unique identifier of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Full name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Date and time the user was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// The unique identifier of who last updated the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_BuiltInRoleResponse : Identity_RoleResponse
    {

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Name of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Number of users assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users_assigned_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Users_assigned_count { get; set; }

    }

    /// <summary>
    /// List with the result of the operation on each user identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_BulkAccountUserRoles
    {

        /// <summary>
        /// Details for in case it wasn't successful.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Identity_BulkAccountUserRolesError> Errors { get; set; }

        /// <summary>
        /// The unique identifier of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        /// <summary>
        /// The unique identifier of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid User_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details for in case it wasn't successful.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_BulkAccountUserRolesError
    {

        /// <summary>
        /// Detail of the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Details { get; set; }

        /// <summary>
        /// Error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_BulkAccountUserRolesRequestBody
    {

        /// <summary>
        /// The unique identifier of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Account_identifier { get; set; }

        /// <summary>
        /// List of role identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role_identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> Role_identifiers { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        /// <summary>
        /// List of user identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> User_identifiers { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_BulkAccountUserRolesResponse
    {

        /// <summary>
        /// List with the result of the operation on each user identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_BulkAccountUserRoles> Results { get; set; } = new System.Collections.ObjectModel.Collection<Identity_BulkAccountUserRoles>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_ClientData
    {

        /// <summary>
        /// If your client is active or deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        /// <summary>
        /// If password login is enabled or disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_password_login", Required = Newtonsoft.Json.Required.Always)]
        public bool Allow_password_login { get; set; }

        /// <summary>
        /// If SSO login is enabled or disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_sso_login", Required = Newtonsoft.Json.Required.Always)]
        public bool Allow_sso_login { get; set; }

        /// <summary>
        /// Date and time the client was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Date and time the client was deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Deactivated_at { get; set; }

        /// <summary>
        /// The unique identifier of the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// The identifier of the identity provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idp_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Idp_identifier { get; set; }

        /// <summary>
        /// The client's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Date and time the client was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_CustomRoleResponse : Identity_RoleResponse
    {

        /// <summary>
        /// The account identifier of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Account_identifier { get; set; }

        /// <summary>
        /// Date and time the role was last created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Created by identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Created_by { get; set; } = new System.Guid("00000000-0000-0000-0000-000000000000");

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Name of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Date and time the role was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Updated by identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Updated_by { get; set; } = new System.Guid("00000000-0000-0000-0000-000000000000");

        /// <summary>
        /// Number of users assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users_assigned_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Users_assigned_count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_CustomRoleWithPermissionsResponse : Identity_RoleWithPermissionResponse
    {

        /// <summary>
        /// The account identifier of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Account_identifier { get; set; }

        /// <summary>
        /// Date and time the role was last created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Created by identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Created_by { get; set; } = new System.Guid("00000000-0000-0000-0000-000000000000");

        /// <summary>
        /// Date and time the role was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Updated by identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Updated_by { get; set; } = new System.Guid("00000000-0000-0000-0000-000000000000");

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_DefaultRoleWithPermissionsResponse : Identity_RoleWithPermissionResponse
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_ExtendedUserAccountRolesResponse
    {

        /// <summary>
        /// List of accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_ExtendedUserAccountsRoles> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<Identity_ExtendedUserAccountsRoles>();

        /// <summary>
        /// The url with parameters of the first page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The url with parameters of the next page, null if there are no more pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The url with parameters of the previous page, null if current page_number is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The url with parameters of the current page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of accounts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_ExtendedUserAccountsRoles
    {

        /// <summary>
        /// Type of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Identity_ExtendedUserAccountsRolesAccount_type Account_type { get; set; }

        /// <summary>
        /// The unique identifier of the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Client_identifier { get; set; }

        /// <summary>
        /// The unique identifier of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Name of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// List of roles within the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_ExtendedUserRole> Roles { get; set; } = new System.Collections.ObjectModel.Collection<Identity_ExtendedUserRole>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of roles within the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_ExtendedUserRole
    {

        /// <summary>
        /// Date and time the user was assigned the user role in the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigned_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Assigned_at { get; set; }

        /// <summary>
        /// Name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The unique identifier of the user role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_role_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid User_role_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_OwnUserResponse
    {

        /// <summary>
        /// If a user is active or deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        /// <summary>
        /// The unique identifier of the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Client_identifier { get; set; }

        /// <summary>
        /// Date and time the user was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The unique identifier of who created the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// Date and time the user was deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Deactivated_at { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        /// <summary>
        /// Date and time of when MFA will be enforced for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enforce_mfa_after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Enforce_mfa_after { get; set; }

        /// <summary>
        /// The unique identifier of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Default locale is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_default_locale", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_default_locale { get; set; }

        /// <summary>
        /// Locale of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Identity_OwnUserResponseLocale Locale { get; set; }

        /// <summary>
        /// Full name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Date and time the user was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// The unique identifier of who last updated the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_PaginatedResponseRoleResponse
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_BuiltInRoleResponse> Roles { get; set; } = new System.Collections.ObjectModel.Collection<Identity_BuiltInRoleResponse>();

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_PartialUpdateRoleRequestBody
    {

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(300)]
        public string Description { get; set; }

        /// <summary>
        /// Name of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// An array of permissions as integers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_PermissionListResponse
    {

        [Newtonsoft.Json.JsonProperty("bitfield", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Bitfield { get; set; }

        /// <summary>
        /// List of your permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_PermissionResponse> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<Identity_PermissionResponse>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_PermissionResponse
    {

        /// <summary>
        /// Description of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        public int Identifier { get; set; }

        /// <summary>
        /// Permission level type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Identity_PermissionResponseLevel Level { get; set; }

        /// <summary>
        /// Name of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_RoleRequestBody
    {

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(300)]
        public string Description { get; set; }

        /// <summary>
        /// Name of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// List of user permission identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_RoleResponse
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_RoleWithPermissionResponse
    {

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Name of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Role permission identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        /// <summary>
        /// Number of users assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users_assigned_count", Required = Newtonsoft.Json.Required.Always)]
        public int Users_assigned_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of roles within the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_StandardUserRole
    {

        /// <summary>
        /// Date and time the user was assigned the user role in the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigned_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Assigned_at { get; set; }

        /// <summary>
        /// Name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_UserAccountRolesResponse
    {

        /// <summary>
        /// List of accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_UserAccountsRoles> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<Identity_UserAccountsRoles>();

        /// <summary>
        /// The url with parameters of the first page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The url with parameters of the next page, null if there are no more pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The url with parameters of the previous page, null if current page_number is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The url with parameters of the current page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of accounts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_UserAccountsRoles
    {

        /// <summary>
        /// Type of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Identity_UserAccountsRolesAccount_type Account_type { get; set; }

        /// <summary>
        /// The unique identifier of the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Client_identifier { get; set; }

        /// <summary>
        /// The unique identifier of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Name of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// List of roles within the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_StandardUserRole> Roles { get; set; } = new System.Collections.ObjectModel.Collection<Identity_StandardUserRole>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_UserData
    {

        /// <summary>
        /// If a user is active or deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        /// <summary>
        /// The unique identifier of the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Client_identifier { get; set; }

        /// <summary>
        /// Date and time the user was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Date and time the user was deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deactivated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Deactivated_at { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        /// <summary>
        /// Date and time of when MFA will be enforced for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enforce_mfa_after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Enforce_mfa_after { get; set; }

        /// <summary>
        /// The unique identifier of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Full name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// User roles list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Identity_StandardUserRole> Roles { get; set; }

        /// <summary>
        /// Date and time the user was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_UserPartialUpdateRequestBody
    {

        /// <summary>
        /// If the user is active or deactivated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Active { get; set; }

        /// <summary>
        /// Date and time of when MFA will be enforced for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enforce_mfa_after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Enforce_mfa_after { get; set; }

        /// <summary>
        /// Full name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_UserRequestBody
    {

        /// <summary>
        /// Email address of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Email { get; set; }

        /// <summary>
        /// Full name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of roles within the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_UserRole
    {

        /// <summary>
        /// Date and time the user was assigned the user role in the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigned_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Assigned_at { get; set; }

        /// <summary>
        /// Name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The unique identifier of the user role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_role_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid User_role_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity_UsersResponse
    {

        /// <summary>
        /// The url with parameters of the first page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The url with parameters of the next page, null if there are no more pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The url with parameters of the previous page, null if current page_number is 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The url with parameters of the current page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        /// <summary>
        /// List of users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Identity_UserData> Users { get; set; } = new System.Collections.ObjectModel.Collection<Identity_UserData>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exports_CreateExportPayload
    {

        /// <summary>
        /// Export data end date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset End_date { get; set; }

        /// <summary>
        /// Export name, created by customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("export_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Export_name { get; set; }

        /// <summary>
        /// Export type key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("export_type_key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Export_type_key { get; set; }

        /// <summary>
        /// Export data start date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Start_date { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exports_DownloadExportResponseBody
    {

        /// <summary>
        /// Download url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("download_url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Download_url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exports_ExportItem
    {

        /// <summary>
        /// Export creation time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Export name, created by customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("export_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Export_name { get; set; }

        /// <summary>
        /// Export type key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("export_type_key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Export_type_key { get; set; }

        /// <summary>
        /// Export type id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Export status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        /// <summary>
        /// Export data end date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("window_end_time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Window_end_time { get; set; }

        /// <summary>
        /// Export data start date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("window_start_time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Window_start_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exports_ExportTypeKeys
    {

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exports_PaginatedResponseExportItem
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Exports_ExportItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<Exports_ExportItem>();

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exports_PaginatedResponseExportTypeKeys
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Exports_ExportTypeKeys> Items { get; set; } = new System.Collections.ObjectModel.Collection<Exports_ExportTypeKeys>();

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exports_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_AlertMuteDTO
    {

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Customer_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("profile_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Profile_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("risk_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Risk_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_CreateAlertMuteRequest
    {

        [Newtonsoft.Json.JsonProperty("customer_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Customer_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("profile_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Profile_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("risk_identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Risk_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_GetAlertMutesResponse
    {

        [Newtonsoft.Json.JsonProperty("alert_mutes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Am_AlertMuteDTO> Alert_mutes { get; set; } = new System.Collections.ObjectModel.Collection<Am_AlertMuteDTO>();

        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_RiskStatusUpdatePayload
    {

        [Newtonsoft.Json.JsonProperty("decision", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Am_RiskStatusUpdatePayloadDecision Decision { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_Scenario
    {

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_Segment
    {

        [Newtonsoft.Json.JsonProperty("identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> Identifiers { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("outcome", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Am_SegmentOutcome Outcome { get; set; }

        /// <summary>
        /// Priority 1 is the highest while 9 is the lowest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 9)]
        public int Priority { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_Transaction
    {

        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Am_TransactionType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_TransactionMonitoringRisk
    {

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Am_TransactionMonitoringRiskDetail Detail { get; set; } = new Am_TransactionMonitoringRiskDetail();

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Am_TransactionMonitoringRiskType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_TransactionMonitoringRiskDetail
    {

        [Newtonsoft.Json.JsonProperty("scenario", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Am_Scenario Scenario { get; set; } = new Am_Scenario();

        [Newtonsoft.Json.JsonProperty("transaction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Am_Transaction Transaction { get; set; } = new Am_Transaction();

        [Newtonsoft.Json.JsonProperty("triggered_segment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Am_Segment Triggered_segment { get; set; } = new Am_Segment();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Am_TransactionMonitoringRisksResponse
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        [Newtonsoft.Json.JsonProperty("risks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Am_TransactionMonitoringRisk> Risks { get; set; } = new System.Collections.ObjectModel.Collection<Am_TransactionMonitoringRisk>();

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Added mention for a risk
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_AddedMentions
    {

        /// <summary>
        /// Added AML mentions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("added_aml_types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Added_aml_types { get; set; }

        /// <summary>
        /// Added listing mentions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("added_listings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Added_listings { get; set; }

        /// <summary>
        /// Added snippet mentions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("added_snippets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Added_snippets { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identity information of the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Aircraft
    {

        /// <summary>
        /// List of known associates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Associate> Associates { get; set; }

        /// <summary>
        /// List of known names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Name> Names { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Associate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Associate
    {

        /// <summary>
        /// Name of associate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Association type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Object containing the collection of screening parameters. A collection can either contain ComplyAdvantage sources or custom lists.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Collection
    {

        /// <summary>
        /// The list of available AML types for the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aml_types", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Aml_types { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The list of available custom lists for the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom_list_identifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Custom_list_identifiers { get; set; }

        /// <summary>
        /// The description of the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The fuzziness of the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuzziness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0F, 1F)]
        public float Fuzziness { get; set; }

        /// <summary>
        /// The name and identifier of the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The list of available options for the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Options { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The list of available sources for the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source_identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Source_identifiers { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identity information of the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Company
    {

        /// <summary>
        /// List of known names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Name> Names { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Object containing a screening configuration with multiple collections.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Configuration
    {

        /// <summary>
        /// Configurations to be used across all collections, not the same as options inside a collection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration_options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Configuration_options { get; set; }

        /// <summary>
        /// Country based screening results filtering
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_filters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Country_filters { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The description of the screening configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The flag to indicate if the screening configuration is archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_archived { get; set; } = false;

        /// <summary>
        /// The name and identifier of the screening configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The limit of screening results returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results_limit", Required = Newtonsoft.Json.Required.Always)]
        public Sra_ConfigurationResults_limit Results_limit { get; set; }

        /// <summary>
        /// The list of collections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source_collections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Sra_Collection> Source_collections { get; set; } = new System.Collections.ObjectModel.Collection<Sra_Collection>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Create configuration request containing a change reason and a screening configuration with multiple collections.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_CreateConfigurationRequest
    {

        /// <summary>
        /// The reason for the change/creation. Defaults to "Initial creation"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Configuration Configuration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Date of birth
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_DateOfBirth
    {

        /// <summary>
        /// Source associated with the date of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Date of death
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_DateOfDeath
    {

        /// <summary>
        /// Source associated with the date of death
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// Date of death
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information associated with a source.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Field
    {

        /// <summary>
        /// Name of the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Tag relating to the information (if applicable)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Image
    {

        /// <summary>
        /// Source associated with the image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Url of the image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response object containing a list of configuration versions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_ListConfigurationVersionsResponse
    {

        /// <summary>
        /// The list of configuration versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_ScreeningConfigurationVersion> Versions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response object containing a list of screening configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_ListConfigurationsResponse
    {

        /// <summary>
        /// The list of screening configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_ScreeningConfiguration> Configurations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A list of entity screening risks associated with the alert.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_ListRisksResponse
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// List of Risks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("risks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Risk> Risks { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Risk identified in media.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Media
    {

        /// <summary>
        /// Unique identifier of the media (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>
        /// Publishing date of the media (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishing_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publishing_date { get; set; }

        /// <summary>
        /// Snippet of the media (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snippet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Snippet { get; set; }

        /// <summary>
        /// Title of the media (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Url of the media (if available)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Name
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Name
    {

        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Name type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sra_NameType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Risks identified from PEP lists.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_PepSource
    {

        /// <summary>
        /// List of dates when the PEP finished in office
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active_end_dates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Active_end_dates { get; set; }

        /// <summary>
        /// List of dates when the PEP started in office
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active_start_dates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Active_start_dates { get; set; }

        /// <summary>
        /// Aml types associated with the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aml_types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Aml_types { get; set; }

        /// <summary>
        /// Country codes associated with the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_codes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Country_codes { get; set; }

        /// <summary>
        /// List of relevant information from the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Field> Fields { get; set; }

        /// <summary>
        /// Unique identifier of the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>
        /// Date the source was removed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listing_ended_utc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Listing_ended_utc { get; set; }

        /// <summary>
        /// Date the source was first published
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listing_started_utc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Listing_started_utc { get; set; }

        /// <summary>
        /// Name of the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// List of political parties associated with the PEP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("political_parties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Political_parties { get; set; }

        /// <summary>
        /// List of political positions held by the PEP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("political_positions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Political_positions { get; set; }

        /// <summary>
        /// List of political regions associated with the PEP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("political_regions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Political_regions { get; set; }

        /// <summary>
        /// List urls related to the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("related_urls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Related_urls { get; set; }

        /// <summary>
        /// Url of the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identity information of the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Person
    {

        /// <summary>
        /// List of known associates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Associate> Associates { get; set; }

        /// <summary>
        /// List of known dates of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dates_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_DateOfBirth> Dates_of_birth { get; set; }

        /// <summary>
        /// List of known dates of death
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dates_of_death", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_DateOfDeath> Dates_of_death { get; set; }

        /// <summary>
        /// List of images
        /// </summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Image> Images { get; set; }

        /// <summary>
        /// List of known names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Name> Names { get; set; }

        /// <summary>
        /// List of known places of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("places_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_PlaceOfBirth> Places_of_birth { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Place of birth
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_PlaceOfBirth
    {

        /// <summary>
        /// Source associated with the place of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// Place of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A list of entity screening risks associated with the alert.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Profile
    {

        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Aircraft Aircraft { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Company Company { get; set; }

        /// <summary>
        /// Unique identifier of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>
        /// Match score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("match_score", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Match_score { get; set; }

        /// <summary>
        /// List of reasons the profile matched the screen criteria
        /// </summary>
        [Newtonsoft.Json.JsonProperty("match_types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Match_types { get; set; }

        /// <summary>
        /// Name of the profile that matched the screen criteria
        /// </summary>
        [Newtonsoft.Json.JsonProperty("matching_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Matching_name { get; set; }

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Person Person { get; set; }

        [Newtonsoft.Json.JsonProperty("risk_indicators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_RiskIndicators Risk_indicators { get; set; }

        [Newtonsoft.Json.JsonProperty("vessel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Vessel Vessel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Object containing risk information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Risk
    {

        /// <summary>
        /// Timestamp of when the risk was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Decision made on the risk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sra_RiskDecision Decision { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_RiskDetail Detail { get; set; }

        /// <summary>
        /// Unique identifier of the risk
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Decision made on the risk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previous_decision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sra_RiskPrevious_decision Previous_decision { get; set; }

        /// <summary>
        /// Type of risk
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sra_RiskType Type { get; set; }

        /// <summary>
        /// Timestamp of when the risk was updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Unique identifier of the user of last updated the risk
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Detail of the risk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_RiskDetail
    {

        [Newtonsoft.Json.JsonProperty("added_mentions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_AddedMentions Added_mentions { get; set; }

        /// <summary>
        /// Type of change detected on the profile between two successive screens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sra_RiskDetailChange_type? Change_type { get; set; }

        /// <summary>
        /// Unique identifier of the screening configuration used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Profile Profile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Risks associated with the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_RiskIndicators
    {

        /// <summary>
        /// List of aml types associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aml_types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Aml_types { get; set; }

        /// <summary>
        /// List of risks identified from lists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Source> Lists { get; set; }

        /// <summary>
        /// List of risks identified in media
        /// </summary>
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Media> Media { get; set; }

        /// <summary>
        /// List of risks identified from PEP lists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("peps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_PepSource> Peps { get; set; }

        /// <summary>
        /// List of risks identified from sanction lists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sanctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Source> Sanctions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response schema for a screening configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_ScreeningConfiguration
    {

        /// <summary>
        /// The reason for the change in the screening configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Configuration Configuration { get; set; }

        /// <summary>
        /// The screening configuration identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Configuration_identifier { get; set; }

        /// <summary>
        /// Timestamp of when the screening configuration was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The unique identifier of the user who created the screening configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// The version of the screening configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The list of configuration versions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_ScreeningConfigurationVersion
    {

        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Created_by { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Risks identified from sanction or watch lists.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Source
    {

        /// <summary>
        /// Aml types associated with the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aml_types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Aml_types { get; set; }

        /// <summary>
        /// Country codes associated with the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_codes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Country_codes { get; set; }

        /// <summary>
        /// List of relevant information from the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Field> Fields { get; set; }

        /// <summary>
        /// Unique identifier of the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>
        /// Date the source was removed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listing_ended_utc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Listing_ended_utc { get; set; }

        /// <summary>
        /// Date the source was first published
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listing_started_utc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Listing_started_utc { get; set; }

        /// <summary>
        /// Name of the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// List urls related to the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("related_urls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Related_urls { get; set; }

        /// <summary>
        /// Url of the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Update configuration request containing a change reason and a screening configuration with multiple collections.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_UpdateConfigurationRequest
    {

        /// <summary>
        /// The reason for the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sra_Configuration Configuration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identity information of the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sra_Vessel
    {

        /// <summary>
        /// List of known associates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Associate> Associates { get; set; }

        /// <summary>
        /// List of known names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sra_Name> Names { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_Batch
    {

        [Newtonsoft.Json.JsonProperty("account_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Account_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Created_by { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Bulk_BatchErrors Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Bulk_BatchRequest Request { get; set; } = new Bulk_BatchRequest();

        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Bulk_BatchStatistics Statistics { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Bulk_BatchStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_BatchErrors
    {

        [Newtonsoft.Json.JsonProperty("file_errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Bulk_FileError> File_errors { get; set; } = new System.Collections.ObjectModel.Collection<Bulk_FileError>();

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Bulk_BatchErrorsReason? Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("row_errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Bulk_RowError> Row_errors { get; set; } = new System.Collections.ObjectModel.Collection<Bulk_RowError>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_BatchReport
    {

        [Newtonsoft.Json.JsonProperty("workflows_download_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Workflows_download_link { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_BatchRequest
    {

        [Newtonsoft.Json.JsonProperty("file_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string File_name { get; set; }

        [Newtonsoft.Json.JsonProperty("upload_method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Bulk_BatchRequestUpload_method Upload_method { get; set; }

        [Newtonsoft.Json.JsonProperty("workflow_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Bulk_BatchRequestWorkflow_type Workflow_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_BatchStatistics
    {

        [Newtonsoft.Json.JsonProperty("num_of_completed_workflows", Required = Newtonsoft.Json.Required.Always)]
        public int Num_of_completed_workflows { get; set; }

        [Newtonsoft.Json.JsonProperty("num_of_created_workflows", Required = Newtonsoft.Json.Required.Always)]
        public int Num_of_created_workflows { get; set; }

        [Newtonsoft.Json.JsonProperty("num_of_errored_workflows", Required = Newtonsoft.Json.Required.Always)]
        public int Num_of_errored_workflows { get; set; }

        [Newtonsoft.Json.JsonProperty("num_of_processed_rows", Required = Newtonsoft.Json.Required.Always)]
        public long Num_of_processed_rows { get; set; }

        [Newtonsoft.Json.JsonProperty("num_of_validated_rows", Required = Newtonsoft.Json.Required.Always)]
        public int Num_of_validated_rows { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_DeletedBatch
    {

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_ErrorAttributes
    {

        [Newtonsoft.Json.JsonProperty("column_names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Column_names { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("column_options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<string>> Column_options { get; set; } = new System.Collections.ObjectModel.Collection<System.Collections.Generic.ICollection<string>>();

        [Newtonsoft.Json.JsonProperty("expected_range", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> Expected_range { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        [Newtonsoft.Json.JsonProperty("rejected_values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Rejected_values { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("required_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Obsolete]
        public string Required_format { get; set; }

        [Newtonsoft.Json.JsonProperty("required_formats", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Required_formats { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_FileError
    {

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Bulk_ErrorAttributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Bulk_FileErrorCode Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_PaginatedResponseBatch
    {

        [Newtonsoft.Json.JsonProperty("batches", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Bulk_Batch> Batches { get; set; } = new System.Collections.ObjectModel.Collection<Bulk_Batch>();

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_RowError
    {

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Bulk_RowErrorMessage> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Bulk_RowErrorMessage>();

        [Newtonsoft.Json.JsonProperty("row_number", Required = Newtonsoft.Json.Required.Always)]
        public long Row_number { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bulk_RowErrorMessage
    {

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Bulk_ErrorAttributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Bulk_RowErrorMessageCode Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_BicSettings
    {

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options> Options { get; set; }

        /// <summary>
        /// Choose how strict you want the BIC search to be. BANK is the least strict, returning a match for any BIC matching the first 4 digits, COUNTRY returns a match on the first 6 digits, LOCATION returns a match on the first 8 digits, and BRANCH requires a match on 11 digits. If not supplied, the default is full match on the BIC, whether length is 8 or 11 digits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strictness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ps_BicSettingsStrictness? Strictness { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_Configuration
    {

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Supply CUSTOMER and your customer will not be screened.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignored_parties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Ignored_parties> Ignored_parties { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("source_collections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Ps_SourceCollection> Source_collections { get; set; } = new System.Collections.ObjectModel.Collection<Ps_SourceCollection>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_ConfigurationDetail
    {

        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ps_Configuration Configuration { get; set; } = new Ps_Configuration();

        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("is_archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_archived { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Updated_by { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_ConfigurationSummariesResponse
    {

        [Newtonsoft.Json.JsonProperty("configurations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Ps_ConfigurationSummary> Configurations { get; set; } = new System.Collections.ObjectModel.Collection<Ps_ConfigurationSummary>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_ConfigurationSummary
    {

        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("is_archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_archived { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Updated_by { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_ConfigurationVersion
    {

        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Updated_by { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_ConfigurationVersions
    {

        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("is_archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_archived { get; set; }

        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Ps_ConfigurationVersion> Versions { get; set; } = new System.Collections.ObjectModel.Collection<Ps_ConfigurationVersion>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_CreateConfigurationRequest
    {

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ps_Configuration Configuration { get; set; } = new Ps_Configuration();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_CreateConfigurationResponse
    {

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ps_Configuration Configuration { get; set; } = new Ps_Configuration();

        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_NameSettings
    {

        /// <summary>
        /// A search fuzziness score between 0 and 1 by 0.1 increments, where 0 is a narrow search and 1 is a broad search. If provided, this value overrides the overall source collection fuzziness.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name_fuzziness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0F, 1F)]
        public float? Name_fuzziness { get; set; }

        /// <summary>
        /// Choose one or more of these options to use them in name searches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options2> Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_ReferenceTextSettings
    {

        /// <summary>
        /// Choose one or more of these options to use them in reference text searches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options3> Options { get; set; }

        /// <summary>
        /// A search fuzziness score between 0 and 1 by 0.1 increments, where 0 is a narrow search and 1 is a broad search. If provided, this value overrides the overall source collection fuzziness.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference_text_fuzziness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0F, 1F)]
        public float? Reference_text_fuzziness { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_SourceCollection
    {

        [Newtonsoft.Json.JsonProperty("bic_settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ps_BicSettings Bic_settings { get; set; }

        /// <summary>
        /// A search fuzziness score between 0 and 1 by 0.1 increments, where 0 is a narrow search and 1 is a broad search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuzziness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0F, 1F)]
        public float Fuzziness { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("name_settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ps_NameSettings Name_settings { get; set; }

        [Newtonsoft.Json.JsonProperty("reference_text_settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ps_ReferenceTextSettings Reference_text_settings { get; set; }

        /// <summary>
        /// Provide the source identifiers for the lists you want to screen against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source_identifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1000)]
        public System.Collections.Generic.ICollection<string> Source_identifiers { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_UpdateConfigurationRequest
    {

        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ps_Configuration Configuration { get; set; } = new Ps_Configuration();

        [Newtonsoft.Json.JsonProperty("is_archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_archived { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ps_UpdateConfigurationResponse
    {

        [Newtonsoft.Json.JsonProperty("change_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Change_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ps_Configuration Configuration { get; set; } = new Ps_Configuration();

        [Newtonsoft.Json.JsonProperty("configuration_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Configuration_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("is_archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_archived { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Updated_by { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_DeletedEmailConfigurationResponse
    {

        /// <summary>
        /// Email configuration unique identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_EmailConfigurationLog
    {

        /// <summary>
        /// Timestamp when the configuration was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Created by the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled_for", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ns_EnabledFor Enabled_for { get; set; } = new Ns_EnabledFor();

        /// <summary>
        /// Unique identifier for the configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// The event type that the user wants to be notified about
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Timestamp when the configuration was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_EmailConfigurationPayload
    {

        [Newtonsoft.Json.JsonProperty("enabled_for", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ns_EnabledFor Enabled_for { get; set; } = new Ns_EnabledFor();

        /// <summary>
        /// The event type that the user wants to listen to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ns_EmailConfigurationPayloadType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_EmailTestPayload
    {

        /// <summary>
        /// The recipient email address to which the test email will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Lists of user and role identifiers the email will be sent to
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_EnabledFor
    {

        /// <summary>
        /// List of role identifiers the email will be sent to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> Roles { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        /// <summary>
        /// List of user identifiers the email will be sent to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> Users { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_PaginatedResponse
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_PaginatedResponseEmailConfigurationLog
    {

        [Newtonsoft.Json.JsonProperty("email_notification_configurations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Ns_EmailConfigurationLog> Email_notification_configurations { get; set; } = new System.Collections.ObjectModel.Collection<Ns_EmailConfigurationLog>();

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_TestEmailResponse
    {

        /// <summary>
        /// Test email unique identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("test_result", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ns_TestEmailResult Test_result { get; set; } = new Ns_TestEmailResult();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response from the SMTP email server on the attempt to send
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_TestEmailResult
    {

        /// <summary>
        /// Type of response
        /// </summary>
        [Newtonsoft.Json.JsonProperty("response_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ns_TestEmailResultResponse_type Response_type { get; set; }

        /// <summary>
        /// SMTP server response
        /// </summary>
        [Newtonsoft.Json.JsonProperty("server_response_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Server_response_code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_TestWebhookResponseLegacy
    {

        /// <summary>
        /// Test webhook unique identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("test_webhook_identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Test_webhook_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_UpdateEmailConfigurationPayload
    {

        [Newtonsoft.Json.JsonProperty("enabled_for", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Ns_EnabledFor Enabled_for { get; set; } = new Ns_EnabledFor();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_UpdateWebhookPayload
    {

        /// <summary>
        /// 
        /// <br/>            This flag sets whether the webhook is active or not.
        /// <br/>            If 'true', Mesh sends updates when the monitored events take place.
        /// <br/>            If 'false', Mesh will not send any updates.
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_active { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_WebhookConfigurationLog
    {

        /// <summary>
        /// Timestamp when the configuration was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The user who created the webhook notification configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// Unique identifier for the configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        /// <summary>
        /// Flag indicating if the notification configuration is active
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_active { get; set; }

        /// <summary>
        /// Name of the webhook configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the notification type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ns_WebhookConfigurationLogType Type { get; set; }

        /// <summary>
        /// Timestamp when the configuration was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// The client side URL that webhooks should be sent to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_WebhookConfigurationPayload
    {

        /// <summary>
        /// This flag sets whether the webhook is in use or not. If 'true' Mesh sends updates when
        /// <br/>            the monitored events take place. If 'false', Mesh will not send any updates. If unset
        /// <br/>             default value will always be true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_active { get; set; }

        /// <summary>
        /// The name of the webhook configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The type of webhook notification configuration being created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ns_WebhookConfigurationPayloadType Type { get; set; }

        /// <summary>
        /// The client side URL that webhooks should be sent to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ns_WebhookTestPayload
    {

        /// <summary>
        /// The URL you want the example payload sent to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label_CreateLabelsPayload
    {

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label_CreateLabelsResponse
    {

        /// <summary>
        /// List of labels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Label_Label> Labels { get; set; } = new System.Collections.ObjectModel.Collection<Label_Label>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label_GetLabelsPaginatedResponse
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// List of labels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Label_Label> Labels { get; set; } = new System.Collections.ObjectModel.Collection<Label_Label>();

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of labels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Always)]
        public long Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of labels
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label_Label
    {

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_by { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Updated_by { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label_UpdateLabelRequest
    {

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(280)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cert_PaginatedResponseReport
    {

        /// <summary>
        /// The URL path to the first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First { get; set; }

        /// <summary>
        /// The URL path to the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL path to the previous page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        [Newtonsoft.Json.JsonProperty("reports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Cert_Report> Reports { get; set; }

        /// <summary>
        /// The URL path to the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// Total number of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cert_ProblemDetailErrorResponse
    {

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cert_Report
    {

        /// <summary>
        /// Timestamp at which the report was generated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// User that generated the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_by", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Created_by { get; set; }

        /// <summary>
        /// The type of report being downloaded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("download_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Download_url { get; set; }

        /// <summary>
        /// Timestamp at which the download_url expires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Expires_at { get; set; }

        /// <summary>
        /// Url to download the certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("report_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Cert_ReportReport_type Report_type { get; set; }

        /// <summary>
        /// Status of the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Cert_ReportStatus Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cert_ReportsRequest
    {

        [Newtonsoft.Json.JsonProperty("report_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Cert_ReportsRequestReport_type Report_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"assigned_at")]
        Assigned_at = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"created_at")]
        Created_at = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"updated_at")]
        Updated_at = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_ONBOARDING")]
        CUSTOMER_ONBOARDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_MONITORING")]
        CUSTOMER_MONITORING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING")]
        PAYMENT_SCREENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PROHIBITED")]
        PROHIBITED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_CYBERCRIME")]
        ADVERSE_MEDIA_CYBERCRIME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_EU_AML_DIRECTIVE")]
        ADVERSE_MEDIA_EU_AML_DIRECTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_AML_CFT")]
        ADVERSE_MEDIA_FINANCIAL_AML_CFT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_CRIME")]
        ADVERSE_MEDIA_FINANCIAL_CRIME = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_DIFFICULTY")]
        ADVERSE_MEDIA_FINANCIAL_DIFFICULTY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FRAUD_LINKED")]
        ADVERSE_MEDIA_FRAUD_LINKED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FRAUD")]
        ADVERSE_MEDIA_FRAUD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_GENERAL_AML_CFT")]
        ADVERSE_MEDIA_GENERAL_AML_CFT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_GENERAL")]
        ADVERSE_MEDIA_GENERAL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_HIGH_RISK")]
        ADVERSE_MEDIA_HIGH_RISK = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_NARCOTICS_AML_CFT")]
        ADVERSE_MEDIA_NARCOTICS_AML_CFT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_NARCOTICS")]
        ADVERSE_MEDIA_NARCOTICS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_FINANCIAL")]
        ADVERSE_MEDIA_OTHER_FINANCIAL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_MINOR")]
        ADVERSE_MEDIA_OTHER_MINOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_SERIOUS")]
        ADVERSE_MEDIA_OTHER_SERIOUS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_PROPERTY")]
        ADVERSE_MEDIA_PROPERTY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_REGULATORY")]
        ADVERSE_MEDIA_REGULATORY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_SEXUAL_CRIME")]
        ADVERSE_MEDIA_SEXUAL_CRIME = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_TERRORISM")]
        ADVERSE_MEDIA_TERRORISM = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENCE_AML_CFT")]
        ADVERSE_MEDIA_VIOLENCE_AML_CFT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENCE_NON_AML_CFT")]
        ADVERSE_MEDIA_VIOLENCE_NON_AML_CFT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENT_CRIME")]
        ADVERSE_MEDIA_VIOLENT_CRIME = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA")]
        ADVERSE_MEDIA = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"FITNESS_PROBITY")]
        FITNESS_PROBITY = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1_TO_3")]
        PEP_CLASS_1_TO_3 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1")]
        PEP_CLASS_1 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_2")]
        PEP_CLASS_2 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_3")]
        PEP_CLASS_3 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_4")]
        PEP_CLASS_4 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP")]
        PEP = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION_RELATED")]
        SANCTION_RELATED = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION")]
        SANCTION = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 32,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_ASSIGNED")]
        CASE_ASSIGNED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_CREATED")]
        CASE_CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_STATE_UPDATED")]
        CASE_STATE_UPDATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WORKFLOW_COMPLETED")]
        WORKFLOW_COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_ALERT_LIST_UPDATED")]
        CASE_ALERT_LIST_UPDATED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_MATCH_STATUS_UPDATED")]
        CSOM_EMULATION_MATCH_STATUS_UPDATED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_SEARCH_STATUS_UPDATED")]
        CSOM_EMULATION_SEARCH_STATUS_UPDATED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_MONITORED_SEARCH_UPDATED")]
        CSOM_EMULATION_MONITORED_SEARCH_UPDATED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_STARTED")]
        NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATING")]
        VALIDATING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATING_ERROR")]
        VALIDATING_ERROR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING_ERROR")]
        PROCESSING_ERROR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL_ERROR")]
        INTERNAL_ERROR = 6,

    }

    /// <summary>
    /// The workflow type for the batch process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Workflow_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"create-and-screen")]
        CreateAndScreen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"create-and-monitor")]
        CreateAndMonitor = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Workflow_type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"create-and-screen")]
        CreateAndScreen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"create-and-monitor")]
        CreateAndMonitor = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        [Newtonsoft.Json.JsonProperty("error_description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TokenCreateResponseDataScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"read:api write:api")]
        ReadApi_writeApi = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TokenCreateResponseDataToken_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Bearer")]
        Bearer = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_AddressCountry
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_AddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENTIAL_ADDRESS")]
        RESIDENTIAL_ADDRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAILING_ADDRESS")]
        MAILING_ADDRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATING_ADDRESS")]
        OPERATING_ADDRESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REGISTRATION_ADDRESS")]
        REGISTRATION_ADDRESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BILLING_ADDRESS")]
        BILLING_ADDRESS = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_AlertStepAlert_skipped_code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALERT_SKIPPED_CODE_UNSPECIFIED")]
        ALERT_SKIPPED_CODE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALERT_SKIPPED_CODE_NO_ALERT_REQUIRED")]
        ALERT_SKIPPED_CODE_NO_ALERT_REQUIRED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALERT_SKIPPED_CODE_MANUAL_SUPPRESSION")]
        ALERT_SKIPPED_CODE_MANUAL_SUPPRESSION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ALERT_SKIPPED_CODE_FROM_SOURCE")]
        ALERT_SKIPPED_CODE_FROM_SOURCE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_CompanyStatus_summary
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Aml_types
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA")]
        ADVERSE_MEDIA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_GENERAL")]
        ADVERSE_MEDIA_GENERAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_OTHER_MINOR")]
        ADVERSE_MEDIA_V2_OTHER_MINOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_EU_AML_DIRECTIVE")]
        ADVERSE_MEDIA_V2_EU_AML_DIRECTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V1_HIGH_RISK")]
        ADVERSE_MEDIA_V1_HIGH_RISK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENT_CRIME")]
        ADVERSE_MEDIA_VIOLENT_CRIME = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_VIOLENCE_AML_CFT")]
        ADVERSE_MEDIA_V2_VIOLENCE_AML_CFT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_VIOLENCE_NON_AML_CFT")]
        ADVERSE_MEDIA_V2_VIOLENCE_NON_AML_CFT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_CRIME")]
        ADVERSE_MEDIA_FINANCIAL_CRIME = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP")]
        PEP = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_PROPERTY")]
        ADVERSE_MEDIA_V2_PROPERTY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1_TO_3")]
        PEP_CLASS_1_TO_3 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_NARCOTICS")]
        ADVERSE_MEDIA_NARCOTICS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_NARCOTICS_AML_CFT")]
        ADVERSE_MEDIA_V2_NARCOTICS_AML_CFT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FITNESS_PROBITY")]
        FITNESS_PROBITY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FRAUD")]
        ADVERSE_MEDIA_FRAUD = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_FRAUD_LINKED")]
        ADVERSE_MEDIA_V2_FRAUD_LINKED = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_2")]
        PEP_CLASS_2 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_REGULATORY")]
        ADVERSE_MEDIA_V2_REGULATORY = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1")]
        PEP_CLASS_1 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_GENERAL_AML_CFT")]
        ADVERSE_MEDIA_V2_GENERAL_AML_CFT = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_OTHER_SERIOUS")]
        ADVERSE_MEDIA_V2_OTHER_SERIOUS = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_TERRORISM")]
        ADVERSE_MEDIA_TERRORISM = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_FINANCIAL_AML_CFT")]
        ADVERSE_MEDIA_V2_FINANCIAL_AML_CFT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_FINANCIAL_DIFFICULTY")]
        ADVERSE_MEDIA_V2_FINANCIAL_DIFFICULTY = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_4")]
        PEP_CLASS_4 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_TERRORISM")]
        ADVERSE_MEDIA_V2_TERRORISM = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_SEXUAL_CRIME")]
        ADVERSE_MEDIA_SEXUAL_CRIME = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_3")]
        PEP_CLASS_3 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_CYBERCRIME")]
        ADVERSE_MEDIA_V2_CYBERCRIME = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION")]
        SANCTION = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_V2_OTHER_FINANCIAL")]
        ADVERSE_MEDIA_V2_OTHER_FINANCIAL = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION_RELATED")]
        SANCTION_RELATED = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 35,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_DecisionStepOutputDecision
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESS")]
        PROCESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLD")]
        HOLD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECT")]
        REJECT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_FullRiskScoringStepOutputOverall_level
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED-RISK")]
        UNSPECIFIEDRISK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW-RISK")]
        LOWRISK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM-RISK")]
        MEDIUMRISK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH-RISK")]
        HIGHRISK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PROHIBITED")]
        PROHIBITED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_InitialRiskScoringStepOutputOverall_level
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED-RISK")]
        UNSPECIFIEDRISK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW-RISK")]
        LOWRISK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM-RISK")]
        MEDIUMRISK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH-RISK")]
        HIGHRISK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PROHIBITED")]
        PROHIBITED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_NetWorthCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"VED")]
        VED = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWL")]
        ZWL = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 179,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_OnlineIp_format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IPV4")]
        IPV4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IPV6")]
        IPV6 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_PersonCountry_of_birth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_PersonGender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_KNOWN")]
        NOT_KNOWN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Nationality
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_PersonalIdentificationIssuing_country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_PersonalIdentificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SOCIAL_SECURITY_NUMBER")]
        SOCIAL_SECURITY_NUMBER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENCE")]
        DRIVING_LICENCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_CARD")]
        IDENTITY_CARD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TAX_REGISTRATION")]
        TAX_REGISTRATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ALIEN_IDENTIFICATION")]
        ALIEN_IDENTIFICATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYER_IDENTIFICATION")]
        EMPLOYER_IDENTIFICATION = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_ProductApiCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"VED")]
        VED = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWL")]
        ZWL = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 179,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_ResidentialInformationCountry_of_residence
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_ResidentialInformationResidential_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENT")]
        RESIDENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PERMANENT_RESIDENT")]
        PERMANENT_RESIDENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_RESIDENT")]
        NON_RESIDENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TAX_RESIDENT")]
        TAX_RESIDENT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_SalaryCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"VED")]
        VED = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWL")]
        ZWL = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 179,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_StepDetailsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT-STARTED")]
        NOTSTARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN-PROGRESS")]
        INPROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ERRORED")]
        ERRORED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_WorkflowStateStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT-STARTED")]
        NOTSTARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN-PROGRESS")]
        INPROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ERRORED")]
        ERRORED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Steps
    {

        [System.Runtime.Serialization.EnumMember(Value = @"customer-creation")]
        CustomerCreation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"initial-risk-scoring")]
        InitialRiskScoring = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"customer-screening")]
        CustomerScreening = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"case-creation")]
        CaseCreation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"alerting")]
        Alerting = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"customer-update")]
        CustomerUpdate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"risk-scoring")]
        RiskScoring = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ol_WorkflowStateWorkflow_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"create-and-screen")]
        CreateAndScreen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"update-and-rescore")]
        UpdateAndRescore = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_AddressCountry
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_AddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENTIAL_ADDRESS")]
        RESIDENTIAL_ADDRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAILING_ADDRESS")]
        MAILING_ADDRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATING_ADDRESS")]
        OPERATING_ADDRESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REGISTRATION_ADDRESS")]
        REGISTRATION_ADDRESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BILLING_ADDRESS")]
        BILLING_ADDRESS = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous8
    {

        [Newtonsoft.Json.JsonProperty("account_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string Account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("bank", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Bank Bank { get; set; }

        [Newtonsoft.Json.JsonProperty("bban", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Bban { get; set; }

        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }

        [Newtonsoft.Json.JsonProperty("sort_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string Sort_code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous9
    {

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerManager_Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("company_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Company_type { get; set; }

        [Newtonsoft.Json.JsonProperty("incorporation_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Date Incorporation_date { get; set; }

        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Industry { get; set; }

        [Newtonsoft.Json.JsonProperty("legal_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Legal_name { get; set; }

        [Newtonsoft.Json.JsonProperty("place_of_registration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 2)]
        public string Place_of_registration { get; set; }

        [Newtonsoft.Json.JsonProperty("registration_authority_identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Registration_authority_identification { get; set; }

        [Newtonsoft.Json.JsonProperty("source_of_income", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Source_of_income { get; set; }

        [Newtonsoft.Json.JsonProperty("status_summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status_summary Status_summary { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous10
    {

        [Newtonsoft.Json.JsonProperty("managing_exchange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Managing_exchange { get; set; }

        [Newtonsoft.Json.JsonProperty("wallet_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Wallet_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_CustomerForSearchStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous11
    {

        [Newtonsoft.Json.JsonProperty("birth_year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Birth_year { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Country2> Country { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_CustomerV2Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous12
    {

        [Newtonsoft.Json.JsonProperty("branch_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Branch_identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_NetWorthCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"VED")]
        VED = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWL")]
        ZWL = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 179,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous13
    {

        [Newtonsoft.Json.JsonProperty("device_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Device_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("device_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Device_type { get; set; }

        [Newtonsoft.Json.JsonProperty("ip_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip_address { get; set; }

        [Newtonsoft.Json.JsonProperty("ip_format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ip_format Ip_format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous14
    {

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerManager_Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact_information", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_ContactInformation Contact_information { get; set; }

        [Newtonsoft.Json.JsonProperty("country_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country_of_birth Country_of_birth { get; set; }

        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Date Date_of_birth { get; set; }

        [Newtonsoft.Json.JsonProperty("fathers_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Fathers_name { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Full_name { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gender Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Industry { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("middle_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Middle_name { get; set; }

        [Newtonsoft.Json.JsonProperty("mothers_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Mothers_name { get; set; }

        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Nationality2> Nationality { get; set; }

        [Newtonsoft.Json.JsonProperty("net_worth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_NetWorth Net_worth { get; set; }

        [Newtonsoft.Json.JsonProperty("personal_identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerManager_PersonalIdentification> Personal_identification { get; set; }

        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Profession { get; set; }

        [Newtonsoft.Json.JsonProperty("residential_information", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerManager_ResidentialInformation> Residential_information { get; set; }

        [Newtonsoft.Json.JsonProperty("salary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerManager_Salary Salary { get; set; }

        [Newtonsoft.Json.JsonProperty("source_of_income", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Source_of_income { get; set; }

        [Newtonsoft.Json.JsonProperty("source_of_wealth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Source_of_wealth { get; set; }

        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Suffix { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_PersonalIdentificationIssuing_country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_PersonalIdentificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SOCIAL_SECURITY_NUMBER")]
        SOCIAL_SECURITY_NUMBER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENCE")]
        DRIVING_LICENCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_CARD")]
        IDENTITY_CARD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TAX_REGISTRATION")]
        TAX_REGISTRATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ALIEN_IDENTIFICATION")]
        ALIEN_IDENTIFICATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYER_IDENTIFICATION")]
        EMPLOYER_IDENTIFICATION = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_ProductApiCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"VED")]
        VED = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWL")]
        ZWL = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 179,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_ResidentialInformationCountry_of_residence
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_ResidentialInformationResidential_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENT")]
        RESIDENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PERMANENT_RESIDENT")]
        PERMANENT_RESIDENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_RESIDENT")]
        NON_RESIDENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TAX_RESIDENT")]
        TAX_RESIDENT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_RiskScoreResultLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PROHIBITED")]
        PROHIBITED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerManager_SalaryCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BYN")]
        BYN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SVC")]
        SVC = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MRU")]
        MRU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"XUA")]
        XUA = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"STN")]
        STN = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"XSU")]
        XSU = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"UYW")]
        UYW = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"VES")]
        VES = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"VED")]
        VED = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWL")]
        ZWL = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"XTS")]
        XTS = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 179,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RiskScoring_CategoryResultCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BASIC_INFORMATION")]
        BASIC_INFORMATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL")]
        CHANNEL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY")]
        COUNTRY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT")]
        PRODUCT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SCREENING")]
        SCREENING = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RiskScoring_CategoryResultLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PROHIBITED")]
        PROHIBITED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RiskScoring_OverallResultLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PROHIBITED")]
        PROHIBITED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RiskScoring_RiskScoreType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL")]
        PARTIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL")]
        FULL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_BankPaymentSummaryResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BANK_PAYMENT")]
        BANK_PAYMENT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseAlertResponseV2Risk_source
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SCREENING")]
        CUSTOMER_SCREENING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING")]
        PAYMENT_SCREENING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseAlertResponseV2State
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_STARTED")]
        NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIVE_END_STATE")]
        POSITIVE_END_STATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGATIVE_END_STATE")]
        NEGATIVE_END_STATE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseAlertResponseV2Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SCREENING")]
        CUSTOMER_SCREENING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING")]
        MONITORING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING")]
        PAYMENT_SCREENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseAssignmentNoteResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_ASSIGNMENT")]
        CASE_ASSIGNMENT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseCustomerSummaryResponseRisk_level
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PROHIBITED")]
        PROHIBITED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseCustomerSummaryResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON")]
        PERSON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseNoteResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE")]
        CASE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseResponseLast_user_state
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseResponseState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_ONBOARDING")]
        CUSTOMER_ONBOARDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_MONITORING")]
        CUSTOMER_MONITORING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING")]
        PAYMENT_SCREENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseResultResponseLast_user_state
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_ESCALATED")]
        ONBOARDING_ESCALATED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_BLOCKED")]
        ONBOARDING_BLOCKED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseResultResponseState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_ESCALATED")]
        ONBOARDING_ESCALATED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_BLOCKED")]
        ONBOARDING_BLOCKED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseResultResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_ONBOARDING")]
        CUSTOMER_ONBOARDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_MONITORING")]
        CUSTOMER_MONITORING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING")]
        PAYMENT_SCREENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseStateTransitionRequestState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_ESCALATED")]
        ONBOARDING_ESCALATED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_BLOCKED")]
        ONBOARDING_BLOCKED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseStatesResponseCase_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_ONBOARDING")]
        CUSTOMER_ONBOARDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_MONITORING")]
        CUSTOMER_MONITORING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING")]
        PAYMENT_SCREENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseStatesResponseName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseTransitionNoteResponseState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_ESCALATED")]
        ONBOARDING_ESCALATED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_BLOCKED")]
        ONBOARDING_BLOCKED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseTransitionNoteResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_TRANSITION")]
        CASE_TRANSITION = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseTransitionResponseLast_user_state
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseTransitionResponseState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_ExistingStageDecision_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIVE")]
        POSITIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGATIVE")]
        NEGATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_POSITIVE")]
        PARTIAL_POSITIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_ExistingStageStage_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REVIEW")]
        REVIEW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DECISION")]
        DECISION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_NewStageDecision_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIVE")]
        POSITIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGATIVE")]
        NEGATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_POSITIVE")]
        PARTIAL_POSITIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_NewStageStage_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REVIEW")]
        REVIEW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DECISION")]
        DECISION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_RiskTypesChildResponseName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_CYBERCRIME")]
        ADVERSE_MEDIA_CYBERCRIME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_EU_AML_DIRECTIVE")]
        ADVERSE_MEDIA_EU_AML_DIRECTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_AML_CFT")]
        ADVERSE_MEDIA_FINANCIAL_AML_CFT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_CRIME")]
        ADVERSE_MEDIA_FINANCIAL_CRIME = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_DIFFICULTY")]
        ADVERSE_MEDIA_FINANCIAL_DIFFICULTY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FRAUD_LINKED")]
        ADVERSE_MEDIA_FRAUD_LINKED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FRAUD")]
        ADVERSE_MEDIA_FRAUD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_GENERAL_AML_CFT")]
        ADVERSE_MEDIA_GENERAL_AML_CFT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_GENERAL")]
        ADVERSE_MEDIA_GENERAL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_HIGH_RISK")]
        ADVERSE_MEDIA_HIGH_RISK = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_NARCOTICS_AML_CFT")]
        ADVERSE_MEDIA_NARCOTICS_AML_CFT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_NARCOTICS")]
        ADVERSE_MEDIA_NARCOTICS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_FINANCIAL")]
        ADVERSE_MEDIA_OTHER_FINANCIAL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_MINOR")]
        ADVERSE_MEDIA_OTHER_MINOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_SERIOUS")]
        ADVERSE_MEDIA_OTHER_SERIOUS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_PROPERTY")]
        ADVERSE_MEDIA_PROPERTY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_REGULATORY")]
        ADVERSE_MEDIA_REGULATORY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_SEXUAL_CRIME")]
        ADVERSE_MEDIA_SEXUAL_CRIME = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_TERRORISM")]
        ADVERSE_MEDIA_TERRORISM = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENCE_AML_CFT")]
        ADVERSE_MEDIA_VIOLENCE_AML_CFT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENCE_NON_AML_CFT")]
        ADVERSE_MEDIA_VIOLENCE_NON_AML_CFT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENT_CRIME")]
        ADVERSE_MEDIA_VIOLENT_CRIME = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA")]
        ADVERSE_MEDIA = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"FITNESS_PROBITY")]
        FITNESS_PROBITY = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1_TO_3")]
        PEP_CLASS_1_TO_3 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1")]
        PEP_CLASS_1 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_2")]
        PEP_CLASS_2 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_3")]
        PEP_CLASS_3 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_4")]
        PEP_CLASS_4 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP")]
        PEP = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION_RELATED")]
        SANCTION_RELATED = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION")]
        SANCTION = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 32,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_RiskTypesResponseName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_CYBERCRIME")]
        ADVERSE_MEDIA_CYBERCRIME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_EU_AML_DIRECTIVE")]
        ADVERSE_MEDIA_EU_AML_DIRECTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_AML_CFT")]
        ADVERSE_MEDIA_FINANCIAL_AML_CFT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_CRIME")]
        ADVERSE_MEDIA_FINANCIAL_CRIME = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FINANCIAL_DIFFICULTY")]
        ADVERSE_MEDIA_FINANCIAL_DIFFICULTY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FRAUD_LINKED")]
        ADVERSE_MEDIA_FRAUD_LINKED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_FRAUD")]
        ADVERSE_MEDIA_FRAUD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_GENERAL_AML_CFT")]
        ADVERSE_MEDIA_GENERAL_AML_CFT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_GENERAL")]
        ADVERSE_MEDIA_GENERAL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_HIGH_RISK")]
        ADVERSE_MEDIA_HIGH_RISK = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_NARCOTICS_AML_CFT")]
        ADVERSE_MEDIA_NARCOTICS_AML_CFT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_NARCOTICS")]
        ADVERSE_MEDIA_NARCOTICS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_FINANCIAL")]
        ADVERSE_MEDIA_OTHER_FINANCIAL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_MINOR")]
        ADVERSE_MEDIA_OTHER_MINOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_OTHER_SERIOUS")]
        ADVERSE_MEDIA_OTHER_SERIOUS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_PROPERTY")]
        ADVERSE_MEDIA_PROPERTY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_REGULATORY")]
        ADVERSE_MEDIA_REGULATORY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_SEXUAL_CRIME")]
        ADVERSE_MEDIA_SEXUAL_CRIME = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_TERRORISM")]
        ADVERSE_MEDIA_TERRORISM = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENCE_AML_CFT")]
        ADVERSE_MEDIA_VIOLENCE_AML_CFT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENCE_NON_AML_CFT")]
        ADVERSE_MEDIA_VIOLENCE_NON_AML_CFT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA_VIOLENT_CRIME")]
        ADVERSE_MEDIA_VIOLENT_CRIME = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERSE_MEDIA")]
        ADVERSE_MEDIA = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"FITNESS_PROBITY")]
        FITNESS_PROBITY = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1_TO_3")]
        PEP_CLASS_1_TO_3 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_1")]
        PEP_CLASS_1 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_2")]
        PEP_CLASS_2 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_3")]
        PEP_CLASS_3 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP_CLASS_4")]
        PEP_CLASS_4 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PEP")]
        PEP = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION_RELATED")]
        SANCTION_RELATED = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SANCTION")]
        SANCTION = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 32,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_StageDecision_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIVE")]
        POSITIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGATIVE")]
        NEGATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL_POSITIVE")]
        PARTIAL_POSITIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_StageStage_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REVIEW")]
        REVIEW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DECISION")]
        DECISION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_TransitionCaseBulkActionPayloadState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NOT_STARTED")]
        ONBOARDING_NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_IN_PROGRESS")]
        ONBOARDING_IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_ESCALATED")]
        ONBOARDING_ESCALATED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_BLOCKED")]
        ONBOARDING_BLOCKED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_POSITIVE_END_STATE")]
        ONBOARDING_POSITIVE_END_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE")]
        ONBOARDING_MANAGEABLE_RISK_POSITIVE_END_STATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBOARDING_NEGATIVE_END_STATE")]
        ONBOARDING_NEGATIVE_END_STATE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NOT_STARTED")]
        MONITORING_NOT_STARTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_IN_PROGRESS")]
        MONITORING_IN_PROGRESS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_ESCALATED")]
        MONITORING_ESCALATED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_BLOCKED")]
        MONITORING_BLOCKED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_NO_RISK_DETECTED_POSITIVE_END_STATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_POSITIVE_END_STATE")]
        MONITORING_RISK_DETECTED_POSITIVE_END_STATE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MONITORING_RISK_DETECTED_NEGATIVE_END_STATE")]
        MONITORING_RISK_DETECTED_NEGATIVE_END_STATE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_NOT_STARTED")]
        PAYMENT_SCREENING_NOT_STARTED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_IN_PROGRESS")]
        PAYMENT_SCREENING_IN_PROGRESS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_ESCALATED")]
        PAYMENT_SCREENING_ESCALATED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_BLOCKED")]
        PAYMENT_SCREENING_BLOCKED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_AWAITING_INFORMATION")]
        PAYMENT_SCREENING_AWAITING_INFORMATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_PROCESS_PAYMENT_END_STATE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE")]
        PAYMENT_SCREENING_REJECT_PAYMENT_END_STATE = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_WorkflowResponseCase_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_ONBOARDING")]
        CUSTOMER_ONBOARDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_MONITORING")]
        CUSTOMER_MONITORING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_SCREENING")]
        PAYMENT_SCREENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Identity_AccountDataAccount_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_UNSPECIFIED")]
        CLIENT_ACCOUNT_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_NON_PRODUCTION")]
        CLIENT_ACCOUNT_TYPE_NON_PRODUCTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_PRODUCTION")]
        CLIENT_ACCOUNT_TYPE_PRODUCTION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNRECOGNIZED")]
        UNRECOGNIZED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Identity_ExtendedUserAccountsRolesAccount_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_UNSPECIFIED")]
        CLIENT_ACCOUNT_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_NON_PRODUCTION")]
        CLIENT_ACCOUNT_TYPE_NON_PRODUCTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_PRODUCTION")]
        CLIENT_ACCOUNT_TYPE_PRODUCTION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNRECOGNIZED")]
        UNRECOGNIZED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Identity_OwnUserResponseLocale
    {

        [System.Runtime.Serialization.EnumMember(Value = @"en-US")]
        EnUS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"en-GB")]
        EnGB = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fr-CA")]
        FrCA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"fr-FR")]
        FrFR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Identity_PermissionResponseLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Identity_UserAccountsRolesAccount_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_UNSPECIFIED")]
        CLIENT_ACCOUNT_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_NON_PRODUCTION")]
        CLIENT_ACCOUNT_TYPE_NON_PRODUCTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_ACCOUNT_TYPE_PRODUCTION")]
        CLIENT_ACCOUNT_TYPE_PRODUCTION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNRECOGNIZED")]
        UNRECOGNIZED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Am_RiskStatusUpdatePayloadDecision
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_REVIEWED")]
        NOT_REVIEWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_REVIEW")]
        IN_REVIEW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FALSE_POSITIVE")]
        FALSE_POSITIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUE_POSITIVE")]
        TRUE_POSITIVE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Am_SegmentOutcome
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW")]
        ALLOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLD")]
        HOLD = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Am_TransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BANK_PAYMENT")]
        BANK_PAYMENT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Am_TransactionMonitoringRiskType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSACTION_MONITORING")]
        TRANSACTION_MONITORING = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sra_ConfigurationResults_limit
    {

        _10 = 10,

        _25 = 25,

        _50 = 50,

        _100 = 100,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sra_NameType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AKA")]
        AKA = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sra_RiskDecision
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_REVIEWED")]
        NOT_REVIEWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_REVIEW")]
        IN_REVIEW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FALSE_POSITIVE")]
        FALSE_POSITIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUE_POSITIVE")]
        TRUE_POSITIVE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sra_RiskPrevious_decision
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_REVIEWED")]
        NOT_REVIEWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_REVIEW")]
        IN_REVIEW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FALSE_POSITIVE")]
        FALSE_POSITIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUE_POSITIVE")]
        TRUE_POSITIVE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sra_RiskType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENTITY_SCREENING")]
        ENTITY_SCREENING = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sra_RiskDetailChange_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADDED")]
        ADDED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVED")]
        REMOVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UPDATED")]
        UPDATED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Bulk_BatchStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_STARTED")]
        NOT_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATING")]
        VALIDATING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VALIDATING_ERROR")]
        VALIDATING_ERROR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING_ERROR")]
        PROCESSING_ERROR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL_ERROR")]
        INTERNAL_ERROR = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Bulk_BatchErrorsReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL_ERROR")]
        INTERNAL_ERROR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MALFORMED_FILE")]
        MALFORMED_FILE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ROWS")]
        INVALID_ROWS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Bulk_BatchRequestUpload_method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HTTP")]
        HTTP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SFTP")]
        SFTP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Bulk_BatchRequestWorkflow_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"create-and-screen")]
        CreateAndScreen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"create-and-monitor")]
        CreateAndMonitor = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Bulk_FileErrorCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSUPPORTED_MIMETYPE")]
        UNSUPPORTED_MIMETYPE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE_SHEETS_FOUND")]
        MULTIPLE_SHEETS_FOUND = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MALFORMED_CONTENT")]
        MALFORMED_CONTENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSUPPORTED_COLUMN")]
        UNSUPPORTED_COLUMN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Bulk_RowErrorMessageCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MANDATORY_COLUMN_MISSING")]
        MANDATORY_COLUMN_MISSING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONE_OF_REQUIRED")]
        ONE_OF_REQUIRED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MUTUALLY_EXCLUSIVE")]
        MUTUALLY_EXCLUSIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_RESIDENTIAL_STATUS")]
        INVALID_RESIDENTIAL_STATUS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CURRENCY_CODE")]
        INVALID_CURRENCY_CODE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY_CODE")]
        INVALID_COUNTRY_CODE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY_SUBDIVISION_CODE")]
        INVALID_COUNTRY_SUBDIVISION_CODE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_IDENTIFIER")]
        INVALID_IDENTIFIER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_NUMBER")]
        INVALID_NUMBER = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_BIRTH_DATE_YEAR")]
        INVALID_BIRTH_DATE_YEAR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PHONE_NUMBER")]
        INVALID_PHONE_NUMBER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_EMAIL_ADDRESS")]
        INVALID_EMAIL_ADDRESS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_URL")]
        INVALID_URL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_GENDER")]
        INVALID_GENDER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COMPANY_STATUS")]
        INVALID_COMPANY_STATUS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ADDRESS_TYPE")]
        INVALID_ADDRESS_TYPE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ADDRESS_TYPE_PERSON")]
        INVALID_ADDRESS_TYPE_PERSON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ADDRESS_TYPE_COMPANY")]
        INVALID_ADDRESS_TYPE_COMPANY = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PERSONAL_IDENTIFICATION_TYPE")]
        INVALID_PERSONAL_IDENTIFICATION_TYPE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_LABEL_NOT_FOUND")]
        CUSTOMER_LABEL_NOT_FOUND = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SCREENING_CONFIGURATION_NOT_FOUND")]
        SCREENING_CONFIGURATION_NOT_FOUND = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX_SIZE_LIMIT_REACHED")]
        MAX_SIZE_LIMIT_REACHED = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MIN_SIZE_LIMIT_REACHED")]
        MIN_SIZE_LIMIT_REACHED = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_IBAN")]
        INVALID_IBAN = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_IP_ADDRESS")]
        INVALID_IP_ADDRESS = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE")]
        INVALID_DATE = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_NOT_IN_PAST")]
        DATE_NOT_IN_PAST = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_EXCEEDS_PRESENT")]
        DATE_EXCEEDS_PRESENT = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATE_OF_EXPIRY")]
        INVALID_DATE_OF_EXPIRY = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_SALARY_AMOUNT")]
        INVALID_SALARY_AMOUNT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_SALARY_CURRENCY")]
        INVALID_SALARY_CURRENCY = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_BIC")]
        INVALID_BIC = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CHARACTER")]
        INVALID_CHARACTER = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_BOOLEAN")]
        INVALID_BOOLEAN = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_TIMESTAMP")]
        INVALID_TIMESTAMP = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_IANA_TIMEZONE")]
        INVALID_IANA_TIMEZONE = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_TRANSACTION_TYPE")]
        INVALID_TRANSACTION_TYPE = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_TRANSACTION_CLASSIFICATION")]
        INVALID_TRANSACTION_CLASSIFICATION = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_BANK_PAYMENT_STATE")]
        INVALID_BANK_PAYMENT_STATE = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CARD_PAYMENT_STAGE")]
        INVALID_CARD_PAYMENT_STAGE = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CARD_SCHEME")]
        INVALID_CARD_SCHEME = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CARD_PAYMENT_SCOPE")]
        INVALID_CARD_PAYMENT_SCOPE = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_BANK_IDENTIFICATION_NUMBER")]
        INVALID_BANK_IDENTIFICATION_NUMBER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_CUSTOM_FIELDS")]
        TOO_MANY_CUSTOM_FIELDS = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PAYMENT_SCHEME")]
        INVALID_PAYMENT_SCHEME = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PAYMENT_CHANNEL")]
        INVALID_PAYMENT_CHANNEL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CARD_VERIFICATION_RESULT")]
        INVALID_CARD_VERIFICATION_RESULT = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_AGENTS")]
        TOO_MANY_AGENTS = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_AGENT_ROLE")]
        INVALID_AGENT_ROLE = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_SCENARIO_CONFIGURATION_IDENTIFIER")]
        INVALID_SCENARIO_CONFIGURATION_IDENTIFIER = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_SCENARIO_CONFIGURATION_IDENTIFIERS")]
        TOO_MANY_SCENARIO_CONFIGURATION_IDENTIFIERS = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CUSTOMER_EXTERNAL_IDENTIFIER")]
        INVALID_CUSTOMER_EXTERNAL_IDENTIFIER = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE_CUSTOMERS")]
        MULTIPLE_CUSTOMERS = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_EXTERNAL_IDENTIFIER_MISMATCH")]
        CUSTOMER_EXTERNAL_IDENTIFIER_MISMATCH = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CARD_PAYMENT_TYPE")]
        INVALID_CARD_PAYMENT_TYPE = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_POS_CONDITION_CODE")]
        INVALID_POS_CONDITION_CODE = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_POS_ENTRY_MODE_CODE")]
        INVALID_POS_ENTRY_MODE_CODE = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CARD_WALLET_TYPE")]
        INVALID_CARD_WALLET_TYPE = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ALPHANUMERIC_VALUE")]
        INVALID_ALPHANUMERIC_VALUE = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CARD_FUNDING_TYPE")]
        INVALID_CARD_FUNDING_TYPE = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_MERCHANT_CATEGORY_TYPE")]
        INVALID_MERCHANT_CATEGORY_TYPE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_MERCHANT_CATEGORY_CODE")]
        INVALID_MERCHANT_CATEGORY_CODE = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_DELISTED_ENTITIES_SANCTION_ONLY")]
        REMOVE_DELISTED_ENTITIES_SANCTION_ONLY = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ps_BicSettingsStrictness
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BANK")]
        BANK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY")]
        COUNTRY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
        LOCATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BRANCH")]
        BRANCH = 3,

    }

    /// <summary>
    /// Supply CUSTOMER and your customer will not be screened.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ignored_parties
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER")]
        CUSTOMER = 0,

    }

    /// <summary>
    /// Choose one or more of these options to use them in name searches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_WORDS_MANDATORY")]
        ALL_WORDS_MANDATORY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_NON_PHONETIC_FUZZY_MATCHES_SANCTION")]
        ALLOW_NON_PHONETIC_FUZZY_MATCHES_SANCTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_ONE_NON_PHONETIC")]
        ALLOW_ONE_NON_PHONETIC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_ONE_NON_PHONETIC_FITNESS")]
        ALLOW_ONE_NON_PHONETIC_FITNESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_ONE_NON_PHONETIC_SANCTION")]
        ALLOW_ONE_NON_PHONETIC_SANCTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_ONE_NON_PHONETIC_WARNING")]
        ALLOW_ONE_NON_PHONETIC_WARNING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_WORD_OPTIONAL")]
        FIRST_WORD_OPTIONAL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LAST_WORD_OPTIONAL")]
        LAST_WORD_OPTIONAL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MORE_ARABIC_TRANSLITERATIONS_SANCTION")]
        MORE_ARABIC_TRANSLITERATIONS_SANCTION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_DECEASED")]
        REMOVE_DECEASED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_DELISTED_ENTITIES_SANCTION_ONLY")]
        REMOVE_DELISTED_ENTITIES_SANCTION_ONLY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_EQUIVALENT_NAMES")]
        REMOVE_EQUIVALENT_NAMES = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_HOMOPHONES")]
        REMOVE_HOMOPHONES = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_WEAK_ALIAS")]
        REMOVE_WEAK_ALIAS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_ADDED_MATERNAL")]
        SPANISH_ADDED_MATERNAL = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING_FITNESS_ENTITY_TYPE_FILTER")]
        WARNING_FITNESS_ENTITY_TYPE_FILTER = 15,

    }

    /// <summary>
    /// Choose one or more of these options to use them in reference text searches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXCLUDE_VESSELS")]
        EXCLUDE_VESSELS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_DECEASED")]
        REMOVE_DECEASED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_DELISTED_ENTITIES_SANCTION_ONLY")]
        REMOVE_DELISTED_ENTITIES_SANCTION_ONLY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_EQUIVALENT_NAMES")]
        REMOVE_EQUIVALENT_NAMES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_HOMOPHONES")]
        REMOVE_HOMOPHONES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_ONE_WORD_PERSON_ALIAS")]
        REMOVE_ONE_WORD_PERSON_ALIAS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE_WEAK_ALIAS")]
        REMOVE_WEAK_ALIAS = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ns_EmailConfigurationPayloadType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_ASSIGNED")]
        CASE_ASSIGNED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ns_TestEmailResultResponse_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVER_ERROR")]
        SERVER_ERROR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ns_WebhookConfigurationLogType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_CREATED")]
        CASE_CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_STATE_UPDATED")]
        CASE_STATE_UPDATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WORKFLOW_COMPLETED")]
        WORKFLOW_COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_MATCH_STATUS_UPDATED")]
        CSOM_EMULATION_MATCH_STATUS_UPDATED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_SEARCH_STATUS_UPDATED")]
        CSOM_EMULATION_SEARCH_STATUS_UPDATED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_MONITORED_SEARCH_UPDATED")]
        CSOM_EMULATION_MONITORED_SEARCH_UPDATED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ns_WebhookConfigurationPayloadType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_CREATED")]
        CASE_CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_STATE_UPDATED")]
        CASE_STATE_UPDATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WORKFLOW_COMPLETED")]
        WORKFLOW_COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_ALERT_LIST_UPDATED")]
        CASE_ALERT_LIST_UPDATED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_MATCH_STATUS_UPDATED")]
        CSOM_EMULATION_MATCH_STATUS_UPDATED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_SEARCH_STATUS_UPDATED")]
        CSOM_EMULATION_SEARCH_STATUS_UPDATED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CSOM_EMULATION_MONITORED_SEARCH_UPDATED")]
        CSOM_EMULATION_MONITORED_SEARCH_UPDATED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Cert_ReportReport_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCREENING_REPORT")]
        SCREENING_REPORT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Cert_ReportStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"READY")]
        READY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_READY")]
        NOT_READY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Cert_ReportsRequestReport_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCREENING_REPORT")]
        SCREENING_REPORT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status_summary
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Ip_format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IPV4")]
        IPV4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IPV6")]
        IPV6 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country_of_birth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Gender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_KNOWN")]
        NOT_KNOWN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Nationality2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AF")]
        AF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AX")]
        AX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DZ")]
        DZ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AO")]
        AO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AI")]
        AI = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AQ")]
        AQ = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AG")]
        AG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AW")]
        AW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BH")]
        BH = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BB")]
        BB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BY")]
        BY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BZ")]
        BZ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BJ")]
        BJ = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BM")]
        BM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BT")]
        BT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BO")]
        BO = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BQ")]
        BQ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BA")]
        BA = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BW")]
        BW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BV")]
        BV = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BR")]
        BR = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"IO")]
        IO = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BN")]
        BN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BG")]
        BG = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BF")]
        BF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BI")]
        BI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CV")]
        CV = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"KH")]
        KH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"TD")]
        TD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CX")]
        CX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"KM")]
        KM = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CG")]
        CG = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CD")]
        CD = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CK")]
        CK = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CI")]
        CI = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"HR")]
        HR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"CU")]
        CU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CW")]
        CW = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"CY")]
        CY = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CZ")]
        CZ = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DK")]
        DK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DJ")]
        DJ = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DM")]
        DM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DO")]
        DO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EG")]
        EG = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SV")]
        SV = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"GQ")]
        GQ = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EE")]
        EE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SZ")]
        SZ = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FK")]
        FK = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FO")]
        FO = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FJ")]
        FJ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FI")]
        FI = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GF")]
        GF = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"PF")]
        PF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"TF")]
        TF = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GI")]
        GI = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GR")]
        GR = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GD")]
        GD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GP")]
        GP = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"GG")]
        GG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GW")]
        GW = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"GY")]
        GY = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HM")]
        HM = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"HN")]
        HN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"HK")]
        HK = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"HU")]
        HU = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IS")]
        IS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"IR")]
        IR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"IQ")]
        IQ = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"JM")]
        JM = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"JE")]
        JE = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"JO")]
        JO = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KZ")]
        KZ = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KE")]
        KE = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KI")]
        KI = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KP")]
        KP = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"KW")]
        KW = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LV")]
        LV = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LR")]
        LR = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LY")]
        LY = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LI")]
        LI = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"LU")]
        LU = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MG")]
        MG = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MW")]
        MW = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"ML")]
        ML = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MQ")]
        MQ = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MR")]
        MR = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MU")]
        MU = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"YT")]
        YT = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MC")]
        MC = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MZ")]
        MZ = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MM")]
        MM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NP")]
        NP = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NL")]
        NL = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NI")]
        NI = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NU")]
        NU = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NF")]
        NF = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OM")]
        OM = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PG")]
        PG = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PN")]
        PN = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PL")]
        PL = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PT")]
        PT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"MK")]
        MK = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"RO")]
        RO = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RU")]
        RU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"RW")]
        RW = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RE")]
        RE = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"BL")]
        BL = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SH")]
        SH = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"KN")]
        KN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"MF")]
        MF = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SM")]
        SM = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"ST")]
        ST = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SA")]
        SA = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"RS")]
        RS = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SX")]
        SX = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SK")]
        SK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SI")]
        SI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SB")]
        SB = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SO")]
        SO = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"GS")]
        GS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"LK")]
        LK = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"SJ")]
        SJ = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"CH")]
        CH = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"SY")]
        SY = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TJ")]
        TJ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TZ")]
        TZ = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TL")]
        TL = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TG")]
        TG = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TK")]
        TK = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"TO")]
        TO = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"TT")]
        TT = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"TM")]
        TM = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"TC")]
        TC = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"TV")]
        TV = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"UG")]
        UG = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"UA")]
        UA = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"AE")]
        AE = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"GB")]
        GB = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"UM")]
        UM = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"UZ")]
        UZ = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"VU")]
        VU = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"VE")]
        VE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"VG")]
        VG = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"WF")]
        WF = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"EH")]
        EH = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"XK")]
        XK = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"YE")]
        YE = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"ZM")]
        ZM = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"ZW")]
        ZW = 250,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CaseManagement_CaseNoteResponseType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CASE")]
        CASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_ASSIGNMENT")]
        CASE_ASSIGNMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_TRANSITION")]
        CASE_TRANSITION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765