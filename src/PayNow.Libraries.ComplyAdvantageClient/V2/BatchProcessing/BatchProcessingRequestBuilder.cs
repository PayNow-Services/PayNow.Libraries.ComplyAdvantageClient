// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PayNow.Libraries.ComplyAdvantageClient.Models;
using PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\batch-processing
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BatchProcessingRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the PayNow.Libraries.ComplyAdvantageClient.v2.batchProcessing.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.Item.WithIdentifierItemRequestBuilder"/></returns>
        public global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.Item.WithIdentifierItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("identifier", position);
                return new global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.Item.WithIdentifierItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the PayNow.Libraries.ComplyAdvantageClient.v2.batchProcessing.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.Item.WithIdentifierItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.Item.WithIdentifierItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("identifier", position);
                return new global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.Item.WithIdentifierItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BatchProcessingRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/batch-processing?workflow_type={workflow_type}{&created_by*,page_number*,page_size*,sort*,status*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BatchProcessingRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/batch-processing?workflow_type={workflow_type}{&created_by*,page_number*,page_size*,sort*,status*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint will return a list of all batch processes that have been initiated, including their `identifiers`, status and errors.You need one of the &quot;View customers&quot; or &quot;View transactions&quot; permissions to use this endpoint.
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_PaginatedResponseBatch"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_PaginatedResponseBatch?> GetAsync(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder.BatchProcessingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_PaginatedResponseBatch> GetAsync(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder.BatchProcessingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_PaginatedResponseBatch>(requestInfo, global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_PaginatedResponseBatch.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint initiates a batch process asynchronously for a given workflow type.The response will return an `identifier` that can be used to retrieve the file processing status by polling GET /v2/batch-processing/{identifier}.The workflow types available are:1. **Create and screen a batch of customers** - This workflow will initiate all of the steps in the [&apos;Create and screen customer asynchronously&apos;](https://docs.mesh.complyadvantage.com/reference/createcustomerandscreenasync) for each of the customers in your file.2. **Create and monitor a batch of transactions** - This workflow will initiate all of the steps in the &apos;Create and process transactions asynchronously&apos; for each of the transactions in your file. To learn more about the format of the batch file, see [Batch transaction upload](https://support.complyadvantage.com/hc/en-gb/articles/36369611503633-Batch-transaction-upload).The response will include an `identifier` that can be used to check the status of the batch process,as well as any validation errors that have caused the file to not be processed.To invoke &apos;create-and-screen&apos; workflow, you need &quot;Access to base customer screening functionality&quot; enabled and the &quot;Create and screen customers&quot; permission.To invoke &apos;create-and-monitor&apos; workflow, you need &quot;Access to base transaction monitoring functionality&quot; enabled.
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_Batch"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_Batch?> PostAsync(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_Batch> PostAsync(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_Batch>(requestInfo, global::PayNow.Libraries.ComplyAdvantageClient.Models.Bulk_Batch.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint will return a list of all batch processes that have been initiated, including their `identifiers`, status and errors.You need one of the &quot;View customers&quot; or &quot;View transactions&quot; permissions to use this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder.BatchProcessingRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder.BatchProcessingRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// This endpoint initiates a batch process asynchronously for a given workflow type.The response will return an `identifier` that can be used to retrieve the file processing status by polling GET /v2/batch-processing/{identifier}.The workflow types available are:1. **Create and screen a batch of customers** - This workflow will initiate all of the steps in the [&apos;Create and screen customer asynchronously&apos;](https://docs.mesh.complyadvantage.com/reference/createcustomerandscreenasync) for each of the customers in your file.2. **Create and monitor a batch of transactions** - This workflow will initiate all of the steps in the &apos;Create and process transactions asynchronously&apos; for each of the transactions in your file. To learn more about the format of the batch file, see [Batch transaction upload](https://support.complyadvantage.com/hc/en-gb/articles/36369611503633-Batch-transaction-upload).The response will include an `identifier` that can be used to check the status of the batch process,as well as any validation errors that have caused the file to not be processed.To invoke &apos;create-and-screen&apos; workflow, you need &quot;Access to base customer screening functionality&quot; enabled and the &quot;Create and screen customers&quot; permission.To invoke &apos;create-and-monitor&apos; workflow, you need &quot;Access to base transaction monitoring functionality&quot; enabled.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/v2/batch-processing", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint will return a list of all batch processes that have been initiated, including their `identifiers`, status and errors.You need one of the &quot;View customers&quot; or &quot;View transactions&quot; permissions to use this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BatchProcessingRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("created_by")]
            public Guid?[]? CreatedBy { get; set; }
#nullable restore
#else
            [QueryParameter("created_by")]
            public Guid?[] CreatedBy { get; set; }
#endif
            /// <summary>One-based page index (1..N)</summary>
            [QueryParameter("page_number")]
            public int? PageNumber { get; set; }
            /// <summary>The size of the page to be returned</summary>
            [QueryParameter("page_size")]
            public int? PageSize { get; set; }
            /// <summary>Sorting criteria in the format of: `[-]property` (`-` descending modifier).* Default sort order is ascending (without `-`).* Multiple sort criteria are supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string[]? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string[] Sort { get; set; }
#endif
            [Obsolete("This property is deprecated, use StatusAsGetStatusQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public string[]? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public string[] Status { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.GetStatusQueryParameterType[]? StatusAsGetStatusQueryParameterType { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.GetStatusQueryParameterType[] StatusAsGetStatusQueryParameterType { get; set; }
#endif
            /// <summary>The workflow type for the batch process</summary>
            [Obsolete("This property is deprecated, use WorkflowTypeAsGetWorkflowTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("workflow_type")]
            public string? WorkflowType { get; set; }
#nullable restore
#else
            [QueryParameter("workflow_type")]
            public string WorkflowType { get; set; }
#endif
            /// <summary>The workflow type for the batch process</summary>
            [QueryParameter("workflow_type")]
            public global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.GetWorkflow_typeQueryParameterType? WorkflowTypeAsGetWorkflowTypeQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BatchProcessingRequestBuilderGetRequestConfiguration : RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.BatchProcessing.BatchProcessingRequestBuilder.BatchProcessingRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BatchProcessingRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
