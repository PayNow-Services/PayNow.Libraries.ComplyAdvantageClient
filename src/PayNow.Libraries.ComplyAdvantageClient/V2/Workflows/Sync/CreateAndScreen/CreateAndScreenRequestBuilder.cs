// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PayNow.Libraries.ComplyAdvantageClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\workflows\sync\create-and-screen
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CreateAndScreenRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CreateAndScreenRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/workflows/sync/create-and-screen{?last_sync_step*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CreateAndScreenRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/workflows/sync/create-and-screen{?last_sync_step*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint initiates the &apos;create and screen&apos; workflow for your customer in **synchronous mode**. The workflow consists of five steps:1. **Customer Record Creation:** The Customer Record is created in Mesh.2. **Risk Scoring:** An initial Risk Score is calculated for the Customer.3. **Customer Screening:** The Customer is screened using settings based on the Calculated Risk Score.4. **Alerts:** Alerts associated with the screened customer are generated based on the risk analysis.5. **Case Creation:** Create cases based on the result of customer screening and alerts, for an analyst to review.Each customer must have a unique customer external identifier specified as part of the request. This identifier is used to find the customer within Mesh and link back to your own internal systems.The customer can be one of: `PERSON`, `COMPANY` or `UNDEFINED` and can optionally have multiple `products`.Following risk scoring, the customer will be screened using ComplyAdvantage&apos;s AML database.  You can specify the screening profile used for initial screening and subsequent ongoing monitoring within the `configuration` object.  The value for `screening_profile_identifier` can be found in the settings section of the Mesh application.The workflow executes synchronously up to customer screening, returning the workflow status. This end-point is currently idempotent: in case of downstream error you can re-send the exact same request, and the workflow will be retried.You need &quot;Access to base customer screening functionality&quot; enabled and the &quot;Create and screen customers&quot; permission to use this endpoint.
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_WorkflowState"/></returns>
        /// <param name="body">Create and screen customer synchronously</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ProblemDetailErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ProblemDetailErrorResponse">When receiving a 409 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_WorkflowState?> PostAsync(global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_CreateAndScreenCustomerRequest body, Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder.CreateAndScreenRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_WorkflowState> PostAsync(global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_CreateAndScreenCustomerRequest body, Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder.CreateAndScreenRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ProblemDetailErrorResponse.CreateFromDiscriminatorValue },
                { "409", global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ProblemDetailErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_WorkflowState>(requestInfo, global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_WorkflowState.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint initiates the &apos;create and screen&apos; workflow for your customer in **synchronous mode**. The workflow consists of five steps:1. **Customer Record Creation:** The Customer Record is created in Mesh.2. **Risk Scoring:** An initial Risk Score is calculated for the Customer.3. **Customer Screening:** The Customer is screened using settings based on the Calculated Risk Score.4. **Alerts:** Alerts associated with the screened customer are generated based on the risk analysis.5. **Case Creation:** Create cases based on the result of customer screening and alerts, for an analyst to review.Each customer must have a unique customer external identifier specified as part of the request. This identifier is used to find the customer within Mesh and link back to your own internal systems.The customer can be one of: `PERSON`, `COMPANY` or `UNDEFINED` and can optionally have multiple `products`.Following risk scoring, the customer will be screened using ComplyAdvantage&apos;s AML database.  You can specify the screening profile used for initial screening and subsequent ongoing monitoring within the `configuration` object.  The value for `screening_profile_identifier` can be found in the settings section of the Mesh application.The workflow executes synchronously up to customer screening, returning the workflow status. This end-point is currently idempotent: in case of downstream error you can re-send the exact same request, and the workflow will be retried.You need &quot;Access to base customer screening functionality&quot; enabled and the &quot;Create and screen customers&quot; permission to use this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Create and screen customer synchronously</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_CreateAndScreenCustomerRequest body, Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder.CreateAndScreenRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_CreateAndScreenCustomerRequest body, Action<RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder.CreateAndScreenRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint initiates the &apos;create and screen&apos; workflow for your customer in **synchronous mode**. The workflow consists of five steps:1. **Customer Record Creation:** The Customer Record is created in Mesh.2. **Risk Scoring:** An initial Risk Score is calculated for the Customer.3. **Customer Screening:** The Customer is screened using settings based on the Calculated Risk Score.4. **Alerts:** Alerts associated with the screened customer are generated based on the risk analysis.5. **Case Creation:** Create cases based on the result of customer screening and alerts, for an analyst to review.Each customer must have a unique customer external identifier specified as part of the request. This identifier is used to find the customer within Mesh and link back to your own internal systems.The customer can be one of: `PERSON`, `COMPANY` or `UNDEFINED` and can optionally have multiple `products`.Following risk scoring, the customer will be screened using ComplyAdvantage&apos;s AML database.  You can specify the screening profile used for initial screening and subsequent ongoing monitoring within the `configuration` object.  The value for `screening_profile_identifier` can be found in the settings section of the Mesh application.The workflow executes synchronously up to customer screening, returning the workflow status. This end-point is currently idempotent: in case of downstream error you can re-send the exact same request, and the workflow will be retried.You need &quot;Access to base customer screening functionality&quot; enabled and the &quot;Create and screen customers&quot; permission to use this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CreateAndScreenRequestBuilderPostQueryParameters 
        {
            /// <summary>Optional stage until which the sync workflow should continue before switching to async</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("last_sync_step")]
            public string? LastSyncStep { get; set; }
#nullable restore
#else
            [QueryParameter("last_sync_step")]
            public string LastSyncStep { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CreateAndScreenRequestBuilderPostRequestConfiguration : RequestConfiguration<global::PayNow.Libraries.ComplyAdvantageClient.V2.Workflows.Sync.CreateAndScreen.CreateAndScreenRequestBuilder.CreateAndScreenRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
