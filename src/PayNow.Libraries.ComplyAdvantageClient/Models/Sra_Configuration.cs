// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.Models
{
    /// <summary>
    /// Object containing a screening configuration with multiple collections.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Sra_Configuration : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Configurations to be used across all collections, not the same as options inside a collection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ConfigurationOptions { get; set; }
#nullable restore
#else
        public List<string> ConfigurationOptions { get; set; }
#endif
        /// <summary>Country based screening results filtering</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CountryFilters { get; set; }
#nullable restore
#else
        public List<string> CountryFilters { get; set; }
#endif
        /// <summary>The description of the screening configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The flag to indicate if the screening configuration is archived.</summary>
        public bool? IsArchived { get; set; }
        /// <summary>The name and identifier of the screening configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The limit of screening results returned</summary>
        public int? ResultsLimit { get; set; }
        /// <summary>The list of collections.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection>? SourceCollections { get; set; }
#nullable restore
#else
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection> SourceCollections { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Configuration"/> and sets the default values.
        /// </summary>
        public Sra_Configuration()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Configuration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Configuration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Configuration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "configuration_options", n => { ConfigurationOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "country_filters", n => { CountryFilters = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "is_archived", n => { IsArchived = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "results_limit", n => { ResultsLimit = n.GetIntValue(); } },
                { "source_collections", n => { SourceCollections = n.GetCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection>(global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("configuration_options", ConfigurationOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("country_filters", CountryFilters);
            writer.WriteStringValue("description", Description);
            writer.WriteBoolValue("is_archived", IsArchived);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("results_limit", ResultsLimit);
            writer.WriteCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection>("source_collections", SourceCollections);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
