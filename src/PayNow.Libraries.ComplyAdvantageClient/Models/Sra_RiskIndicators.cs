// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.Models
{
    /// <summary>
    /// Risks associated with the profile.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Sra_RiskIndicators : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List of aml types associated with the profile</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AmlTypes { get; set; }
#nullable restore
#else
        public List<string> AmlTypes { get; set; }
#endif
        /// <summary>List of risks identified from lists</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source>? Lists { get; set; }
#nullable restore
#else
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source> Lists { get; set; }
#endif
        /// <summary>List of risks identified in media</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Media>? Media { get; set; }
#nullable restore
#else
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Media> Media { get; set; }
#endif
        /// <summary>List of risks identified from PEP lists</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource>? Peps { get; set; }
#nullable restore
#else
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource> Peps { get; set; }
#endif
        /// <summary>List of risks identified from sanction lists</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source>? Sanctions { get; set; }
#nullable restore
#else
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source> Sanctions { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_RiskIndicators"/> and sets the default values.
        /// </summary>
        public Sra_RiskIndicators()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_RiskIndicators"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_RiskIndicators CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_RiskIndicators();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aml_types", n => { AmlTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "lists", n => { Lists = n.GetCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source>(global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source.CreateFromDiscriminatorValue)?.AsList(); } },
                { "media", n => { Media = n.GetCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Media>(global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Media.CreateFromDiscriminatorValue)?.AsList(); } },
                { "peps", n => { Peps = n.GetCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource>(global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sanctions", n => { Sanctions = n.GetCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source>(global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("aml_types", AmlTypes);
            writer.WriteCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source>("lists", Lists);
            writer.WriteCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Media>("media", Media);
            writer.WriteCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource>("peps", Peps);
            writer.WriteCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Source>("sanctions", Sanctions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
