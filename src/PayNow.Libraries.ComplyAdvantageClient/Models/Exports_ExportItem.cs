// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Exports_ExportItem : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Export creation time</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Export name, created by customer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExportName { get; set; }
#nullable restore
#else
        public string ExportName { get; set; }
#endif
        /// <summary>Export type key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExportTypeKey { get; set; }
#nullable restore
#else
        public string ExportTypeKey { get; set; }
#endif
        /// <summary>Export type id</summary>
        public Guid? Identifier { get; set; }
        /// <summary>Export status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Export data since date</summary>
        public DateTimeOffset? WindowDataSinceTime { get; set; }
        /// <summary>Export data end date</summary>
        public DateTimeOffset? WindowEndTime { get; set; }
        /// <summary>Export data start date</summary>
        public DateTimeOffset? WindowStartTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Exports_ExportItem"/> and sets the default values.
        /// </summary>
        public Exports_ExportItem()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Exports_ExportItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::PayNow.Libraries.ComplyAdvantageClient.Models.Exports_ExportItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::PayNow.Libraries.ComplyAdvantageClient.Models.Exports_ExportItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "export_name", n => { ExportName = n.GetStringValue(); } },
                { "export_type_key", n => { ExportTypeKey = n.GetStringValue(); } },
                { "identifier", n => { Identifier = n.GetGuidValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "window_data_since_time", n => { WindowDataSinceTime = n.GetDateTimeOffsetValue(); } },
                { "window_end_time", n => { WindowEndTime = n.GetDateTimeOffsetValue(); } },
                { "window_start_time", n => { WindowStartTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("export_name", ExportName);
            writer.WriteStringValue("export_type_key", ExportTypeKey);
            writer.WriteGuidValue("identifier", Identifier);
            writer.WriteStringValue("status", Status);
            writer.WriteDateTimeOffsetValue("window_data_since_time", WindowDataSinceTime);
            writer.WriteDateTimeOffsetValue("window_end_time", WindowEndTime);
            writer.WriteDateTimeOffsetValue("window_start_time", WindowStartTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
