// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.Models
{
    /// <summary>
    /// Object containing the collection of screening parameters. A collection can either contain ComplyAdvantage sources or custom lists.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Sra_Collection : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The list of available AML types for the collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AmlTypes { get; set; }
#nullable restore
#else
        public List<string> AmlTypes { get; set; }
#endif
        /// <summary>The list of available custom lists for the collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CustomListIdentifiers { get; set; }
#nullable restore
#else
        public List<string> CustomListIdentifiers { get; set; }
#endif
        /// <summary>The description of the collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The fuzziness of the collection.</summary>
        public float? Fuzziness { get; set; }
        /// <summary>The name and identifier of the collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The list of available options for the collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Options { get; set; }
#nullable restore
#else
        public List<string> Options { get; set; }
#endif
        /// <summary>The list of available sources for the collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SourceIdentifiers { get; set; }
#nullable restore
#else
        public List<string> SourceIdentifiers { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection"/> and sets the default values.
        /// </summary>
        public Sra_Collection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Collection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aml_types", n => { AmlTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "custom_list_identifiers", n => { CustomListIdentifiers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "fuzziness", n => { Fuzziness = n.GetFloatValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "options", n => { Options = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "source_identifiers", n => { SourceIdentifiers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("aml_types", AmlTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("custom_list_identifiers", CustomListIdentifiers);
            writer.WriteStringValue("description", Description);
            writer.WriteFloatValue("fuzziness", Fuzziness);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("options", Options);
            writer.WriteCollectionOfPrimitiveValues<string>("source_identifiers", SourceIdentifiers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
