// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Ol_ScenarioEvaluationDTO : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Detail on the evaluation error of the scenario if any</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_EvaluationErrorDTO? Error { get; set; }
#nullable restore
#else
        public global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_EvaluationErrorDTO Error { get; set; }
#endif
        /// <summary>The outcome of the scenario evaluation:- **HOLD**: A case will be open and the transaction should not be released until remediation of the case- **ALLOW**: A case will be open but the transaction can be released- **PROCESS**: The scenario did not identify a risk for the transaction- **ERROR**: The scenario could not be evaluated successfully. See errorDetails for more information</summary>
        public global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ScenarioEvaluationDTO_outcome? Outcome { get; set; }
        /// <summary>Priority 1 is the highest while 9 is the lowest.Note: The priority is not set if the scenario did not find a risk</summary>
        public int? Priority { get; set; }
        /// <summary>Identifier of the scenario the evaluation is based on</summary>
        public Guid? ScenarioIdentifier { get; set; }
        /// <summary>The scenario name is usually populated unless it was not available in our evaluation engine</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScenarioName { get; set; }
#nullable restore
#else
        public string ScenarioName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ScenarioEvaluationDTO"/> and sets the default values.
        /// </summary>
        public Ol_ScenarioEvaluationDTO()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ScenarioEvaluationDTO"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ScenarioEvaluationDTO CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ScenarioEvaluationDTO();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "error", n => { Error = n.GetObjectValue<global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_EvaluationErrorDTO>(global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_EvaluationErrorDTO.CreateFromDiscriminatorValue); } },
                { "outcome", n => { Outcome = n.GetEnumValue<global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ScenarioEvaluationDTO_outcome>(); } },
                { "priority", n => { Priority = n.GetIntValue(); } },
                { "scenario_identifier", n => { ScenarioIdentifier = n.GetGuidValue(); } },
                { "scenario_name", n => { ScenarioName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_EvaluationErrorDTO>("error", Error);
            writer.WriteEnumValue<global::PayNow.Libraries.ComplyAdvantageClient.Models.Ol_ScenarioEvaluationDTO_outcome>("outcome", Outcome);
            writer.WriteIntValue("priority", Priority);
            writer.WriteGuidValue("scenario_identifier", ScenarioIdentifier);
            writer.WriteStringValue("scenario_name", ScenarioName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
