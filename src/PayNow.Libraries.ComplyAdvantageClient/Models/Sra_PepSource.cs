// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace PayNow.Libraries.ComplyAdvantageClient.Models
{
    /// <summary>
    /// Risks identified from PEP lists.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Sra_PepSource : IAdditionalDataHolder, IParsable
    {
        /// <summary>List of dates when the PEP finished in office</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ActiveEndDates { get; set; }
#nullable restore
#else
        public List<string> ActiveEndDates { get; set; }
#endif
        /// <summary>List of dates when the PEP started in office</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ActiveStartDates { get; set; }
#nullable restore
#else
        public List<string> ActiveStartDates { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Aml types associated with the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AmlTypes { get; set; }
#nullable restore
#else
        public List<string> AmlTypes { get; set; }
#endif
        /// <summary>Country codes associated with the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CountryCodes { get; set; }
#nullable restore
#else
        public List<string> CountryCodes { get; set; }
#endif
        /// <summary>List of relevant information from the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Field>? Fields { get; set; }
#nullable restore
#else
        public List<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Field> Fields { get; set; }
#endif
        /// <summary>Unique identifier of the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Identifier { get; set; }
#nullable restore
#else
        public string Identifier { get; set; }
#endif
        /// <summary>Date the source was removed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingEndedUtc { get; set; }
#nullable restore
#else
        public string ListingEndedUtc { get; set; }
#endif
        /// <summary>Date the source was first published</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ListingStartedUtc { get; set; }
#nullable restore
#else
        public string ListingStartedUtc { get; set; }
#endif
        /// <summary>Name of the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>List of political parties associated with the PEP</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PoliticalParties { get; set; }
#nullable restore
#else
        public List<string> PoliticalParties { get; set; }
#endif
        /// <summary>List of political positions held by the PEP</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PoliticalPositions { get; set; }
#nullable restore
#else
        public List<string> PoliticalPositions { get; set; }
#endif
        /// <summary>List of political regions associated with the PEP</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PoliticalRegions { get; set; }
#nullable restore
#else
        public List<string> PoliticalRegions { get; set; }
#endif
        /// <summary>List urls related to the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RelatedUrls { get; set; }
#nullable restore
#else
        public List<string> RelatedUrls { get; set; }
#endif
        /// <summary>Url of the source</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource"/> and sets the default values.
        /// </summary>
        public Sra_PepSource()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_PepSource();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active_end_dates", n => { ActiveEndDates = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "active_start_dates", n => { ActiveStartDates = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "aml_types", n => { AmlTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "country_codes", n => { CountryCodes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "fields", n => { Fields = n.GetCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Field>(global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Field.CreateFromDiscriminatorValue)?.AsList(); } },
                { "identifier", n => { Identifier = n.GetStringValue(); } },
                { "listing_ended_utc", n => { ListingEndedUtc = n.GetStringValue(); } },
                { "listing_started_utc", n => { ListingStartedUtc = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "political_parties", n => { PoliticalParties = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "political_positions", n => { PoliticalPositions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "political_regions", n => { PoliticalRegions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "related_urls", n => { RelatedUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("active_end_dates", ActiveEndDates);
            writer.WriteCollectionOfPrimitiveValues<string>("active_start_dates", ActiveStartDates);
            writer.WriteCollectionOfPrimitiveValues<string>("aml_types", AmlTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("country_codes", CountryCodes);
            writer.WriteCollectionOfObjectValues<global::PayNow.Libraries.ComplyAdvantageClient.Models.Sra_Field>("fields", Fields);
            writer.WriteStringValue("identifier", Identifier);
            writer.WriteStringValue("listing_ended_utc", ListingEndedUtc);
            writer.WriteStringValue("listing_started_utc", ListingStartedUtc);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("political_parties", PoliticalParties);
            writer.WriteCollectionOfPrimitiveValues<string>("political_positions", PoliticalPositions);
            writer.WriteCollectionOfPrimitiveValues<string>("political_regions", PoliticalRegions);
            writer.WriteCollectionOfPrimitiveValues<string>("related_urls", RelatedUrls);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
